<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Webdriver | Selenium Tutorial]]></title>
  <link href="http://tabaolan1987.github.io/blog/categories/webdriver/atom.xml" rel="self"/>
  <link href="http://tabaolan1987.github.io/"/>
  <updated>2014-06-04T09:13:16+07:00</updated>
  <id>http://tabaolan1987.github.io/</id>
  <author>
    <name><![CDATA[Ta Bao Lan]]></name>
    <email><![CDATA[tabaolan1987@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Webdriver : Action Class]]></title>
    <link href="http://tabaolan1987.github.io/blog/2014/05/30/webdriver-action-class/"/>
    <updated>2014-05-30T14:01:08+07:00</updated>
    <id>http://tabaolan1987.github.io/blog/2014/05/30/webdriver-action-class</id>
    <content type="html"><![CDATA[<h2>Introduction</h2>

<p>The Advanced User Interactions API is a new, more comprehensive API for describing actions a user can perform on a web page. This includes actions such as drag and drop or clicking multiple elements while holding down the Control key.</p>

<!--more-->


<h3>Mouse Hover action</h3>

<p>There will be situations where it is required to click on the item of the drop down menu that will show up when you mouse over this menu.take a look in the example :</p>

<p><code>
// find the menu that have the dropdown showing when we mouse over it.  
WebElement element = driver.findElement(By.linkText("Category"));
//Create instance of action class
Actions action = new Actions(driver);
//move mouse over the menu.
action.moveToElement(element).build().perform();
//find the link you want and click it.
driver.findElement(By.linkText("News")).click();
</code></p>

<p>or you can code like this way :</p>

<p>```
WebElement element = driver.findElement(By.linkText(&ldquo;Category&rdquo;));</p>

<pre><code>    Actions action = new Actions(driver);
</code></pre>

<p>action.moveToElement(element).moveToElement(driver.findElement(By.linkText(&ldquo;News&rdquo;))).click().build().perform();</p>

<p>```</p>

<p>With some of the browser it happens that once mouse hover action is performed, the menu list disappear with in the fractions of seconds before Selenium identify the next submenu item and perform click action on it. In that case it is better to use perform()&lsquo; action on the main menu to hold the menu list till the time Selenium identify the sub menu item and click on it.</p>

<p><code>
WebElement element = driver.findElement(By.linkText("Category"));
Actions action = new Actions(driver);
action.moveToElement(element).perform();
WebElement subElement = driver.findElement(By.linkText("News"));
action.moveToElement(subElement);
action.click();
action.perform();
</code></p>

<h3>Drag And Drop</h3>

<p>In case you need drag and drop an element to another position , the action class provide us the way like below code :</p>

<p>```</p>

<p>WebElement From = driver.findElement(By.xpath(&ldquo;yourlocationElement));
WebElement To = driver.findElement(By.xpath("yourlocationElement&rdquo;));
Actions builder = new Actions(driver);
Action dragAndDrop = builder.clickAndHold(From)
.moveToElement(To)
.release(To)
.build();
dragAndDrop.perform();</p>

<p>```</p>

<h3>Scroll bars dragging</h3>

<p>The following code demonstrates how to drag the vertical scroll bars on a window. The &ldquo;Actions&rdquo; class is used to click and hold on to the scroll bar and then it is dragged to a new location.</p>

<p>```
Actions dragger = new Actions(driver);
WebElement draggablePartOfScrollbar = driver.findElement(By.xpath(&ldquo;yourscrollbarsXpaht&rdquo;));</p>

<p>// drag downwards
int numberOfPixelsToDragTheScrollbarDown = 10;
for (int i=10;i&lt;150;i=i+numberOfPixelsToDragTheScrollbarDown){</p>

<pre><code>// this causes a gradual drag of the scroll bar, 10 units at a time
dragger.moveToElement(draggablePartOfScrollbar).clickAndHold().moveByOffset(0,numberOfPixelsToDragTheScrollbarDown).release().perform();
Thread.sleep(1000L);
</code></pre>

<p>}</p>

<pre><code>// now drag opposite way (downwards)
numberOfPixelsToDragTheScrollbarDown = -10;
</code></pre>

<p>for (int i=150;i>10;i=i+numberOfPixelsToDragTheScrollbarDown){</p>

<pre><code>// this causes a gradual drag of the scroll bar, -10 units at a time
dragger.moveToElement(draggablePartOfScrollbar).clickAndHold().moveByOffset(0,numberOfPixelsToDragTheScrollbarDown).release().perform();
Thread.sleep(1000L);
</code></pre>

<p>}</p>

<p>```</p>

<h3>RightClick on Element</h3>

<p>In case you want right click on Element please follow the code below :</p>

<p><code>
Actions actions = new Actions(driver);    
Action action=actions.contextClick(WebElement).build(); //pass WebElement as an argument
action.perform();
</code></p>

<h3>Sliding</h3>

<p><code>
WebElement draggable = driver.findElement("find your slider in here by id or xpath etc..");
new Actions(driver).dragAndDropBy(draggable, 120, 0).build().perform();
</code></p>

<h3>SelectMulti</h3>

<p><code>
List&lt;WebElement&gt; listItems = driver.findElements("find your select by id or xpath or etc");
Actions builder = new Actions(driver);
builder.clickAndHold(listItems.get(1)).clickAndHold(listItems.get(2)).click();
Action selectMultiple = builder.build();
selectMultiple.perform();
</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Webdriver XPath : Selenium Locators]]></title>
    <link href="http://tabaolan1987.github.io/blog/2014/05/26/xpath-locators-in-selenium/"/>
    <updated>2014-05-26T10:48:22+07:00</updated>
    <id>http://tabaolan1987.github.io/blog/2014/05/26/xpath-locators-in-selenium</id>
    <content type="html"><![CDATA[<h2>Locators in Selenium</h2>

<p>Selenium uses what is called locators to find and match the elements of the webpage that it needs to interact with. Locators are the lifeblood of the tests. Using the right locator ensures the tests are faster, more reliable or has lower maintenance over releases. If you’re fortunate enough to be working with unique IDs and Classes, then you’re usually all set. But there will be times when choosing a right locator will become a nightmare. It can be a real challenge to verify that you have the right locators to accomplish what you want.</p>

<p>This tutorial explains different locators, how, when and ideal Strategies to use these locators.</p>

<!--more-->


<h3>Different types of Locators</h3>

<p>There are 8 explicit locators: id, name, identifier, dom, xpath, link, css and ui that Selenium’s commands support. I will explain just a few most important locators to avoid over dosage and any confusion.</p>

<h4>ID Locator</h4>

<p>Ids are the most preferred way to locate elements on a page, as each id is supposed to be unique which makes ids a very faster and reliable way to locate elements.</p>

<p>With this strategy, the first element with the id attribute value matching the location will be returned. If no element has a matching id attribute, a NoSuchElementException will be raised.</p>

<p>HTML CODE :</p>

<p><code>
&lt;form name="loginForm"&gt;Login
 Username: &lt;input id="username" type="text" name="login" /&gt;
 Password: &lt;input id="password" type="password" name="password" /&gt;
 &lt;input type="submit" name="signin" value="SignIn" /&gt;&lt;/form&gt;
</code></p>

<p>You can easily choose the element with the help of ID locator from the above example:</p>

<p>id = “username”</p>

<p>id = “password”</p>

<p>Use the same in your Selenium test script as well:</p>

<p>```
WebElement elementUsername = driver.findElement(By.id(&ldquo;username&rdquo;));</p>

<p>WebElement elementPassword = driver.findElement(By.id(&ldquo;password&rdquo;));</p>

<p>```</p>

<p>Even though this is a great locator, obviously it is not realistic for all objects on a page to have ids. In some cases developers make it having non-unique ids on a page or auto-generate the ids, in both cases it should be avoided.</p>

<h4>Name Locator</h4>

<p>This is also an efficient way to locate an element  with name attribute, after Ids give it your second preference but likewise Ids, name attributes don’t have to be unique in a page.</p>

<p>With this strategy, the first element with the name attribute value matching the location will be returned. If no element has a matching name attribute, a  NoSuchElementException will be raised.</p>

<p>Example: Let’s take the above example:</p>

<p>You can easily choose the element with the help of Name locator from the above example:</p>

<p>name = “login”</p>

<p>name = “password”</p>

<p>Use the same in your Selenium test script as well:</p>

<p>```
WebElement elementUsername = driver.findElement(By.name(&ldquo;login&rdquo;));</p>

<p>WebElement elementPassword = driver.findElement(By.name(&ldquo;password&rdquo;));
```</p>

<h4>Identifier Locator</h4>

<p>This selects the element with the specified @id attribute. If no match is found, then it tries to select the first element whose @name attribute is id.</p>

<p>Example: Valid locator for above example is:
identifier = “password”</p>

<p>First it will try to find the locator with id = “password” if it exists, otherwise it would target name = “password”.</p>

<h4>Link Locator</h4>

<p>With this you can find elements of “a” tags(Link) with the link names. Use this when you know link text used within an anchor tag.</p>

<p>Example: If an element is given like this:</p>

<p><code>
&lt;a href="link.html"&gt;Name of the Link&lt;/a&gt;
</code></p>

<p>To click this hyperlink using the anchor tag’s text, you can use the link locator:
link=”Name of the Link”</p>

<p>Use the same in your Selenium test script as well:</p>

<p><code>
WebElement element=driver.findElement(By.linkText("Name of the Link"));
</code></p>

<h4>DOM Locator</h4>

<p>The DOM strategy works by locating elements that matches the JavaScript expression referring to an element in the DOM of the page. DOM stands for Document Object Model. DOM is convention for representing objects in HTML documents.</p>

<p>Example: To select the username from the above example you can use the following ways:</p>

<p>document.forms[0].elements[0]</p>

<p>document.forms[&lsquo;loginForm&rsquo;].elements[&lsquo;username&rsquo;]</p>

<p>document.forms[&lsquo;loginForm&rsquo;].username</p>

<p>document.getElementById(‘username’)</p>

<h4>XPath Locator</h4>

<p>While DOM is the recognized standard for navigation through an HTML element tree, XPath is the standard navigation tool for XML; and an HTML document is also an XML document (xHTML). XPath is used everywhere where there is XML.</p>

<p>Example: To select the username from the above example you can use the following ways:</p>

<p>xpath=//*[@id=&lsquo;username&rsquo;]</p>

<p>xpath=//input[@id=&lsquo;username&rsquo;]</p>

<p>xpath=//form[@name=&lsquo;loginForm&rsquo;]/input[1]</p>

<p>xpath=//*[@name=&lsquo;loginForm&rsquo;]/input[1]</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Webdriver XPath : FireBug and FirePath]]></title>
    <link href="http://tabaolan1987.github.io/blog/2014/05/26/xpath-firebug-and-firepath/"/>
    <updated>2014-05-26T10:37:18+07:00</updated>
    <id>http://tabaolan1987.github.io/blog/2014/05/26/xpath-firebug-and-firepath</id>
    <content type="html"><![CDATA[<h2>FireBug and FirePath</h2>

<h3>What is XPath</h3>

<p>XPath is a language that describes a way to locate and process items in Extensible Markup Language (XML) documents by using an addressing syntax based on a path through the document’s logical structure or hierarchy. XPath in used in Selenium  to uniquely identify an element on a Webpage as element locator just like the way we use PostCode and House address in real world to locate Home Address.</p>

<!--more-->


<h3>What is Firebug</h3>

<p>Firebug integrates with Firefox to put a wealth of web development tools at your fingertips while you browse. You can edit, debug, and monitor CSS, HTML, and JavaScript live in any web page. The whole content of this page is taken from the <a href="https://getfirebug.com/html">firebug</a>.</p>

<h3>Why it is Useful to Selenium Automation Tester</h3>

<p>1) View source live : Firefox has a “View Source” window, but it doesn’t show you what the HTML source really looks like once it has been transformed by JavaScript. Firebug’s HTML tab shows you what the HTML looks like right now.</p>

<p>2) See changes highlighted: In any JavaScript-driven website, HTML elements are constantly being created, removed, and modified. Wouldn’t it be nice if you could see exactly what, when, and where these changes take place? Firebug highlights changes to the HTML in yellow immediately when they occur. If you want to spy even closer, you have the option to also scroll every change into view, so you won’t miss a thing.</p>

<p>3) Find elements with the mouse: Something in your page doesn’t quite look right and you want to know why. There’s no faster way to get answers than to click the “Inspect” button on Firebug’s toolbar and then prepare for immediate gratification. As you move around the page, whatever is beneath your mouse will be instantly revealed within Firebug, showing you the HTML and CSS behind it.</p>

<p>4) Copy the source: Right-click on any element, and you’ll have several options for copying aspects of that element to the clipboard, including its HTML fragment, the value of its “innerHTML” property, or an XPath expression that identifies the element uniquely.</p>

<h3>How to Download FireBug</h3>

<p>FireBug is a plugin which comes with Firefox browser, hence it is easily be downloadable from Firefox itself.</p>

<p>1) Go to Tools > Web Developer > Get More Tools.</p>

<p><img src="/images/Firebug-1.png"></p>

<p>2) It will open a Webpage and display all the plugins available for Firefox browser. As we need Firebug, just click on Add to Firefox button for Firebug.</p>

<p><img src="/images/Firebug-2.png"></p>

<p>3) Hit on Install Now button to proceed.</p>

<p><img src="/images/Firebug-3.png"></p>

<p>4) Once the Installation is finished, press ‘F-12′ to open Firebug tool. It will display like this.</p>

<p><img src="/images/FIND-ELEMENTS-2.png"></p>

<h3>How to Use it</h3>

<p>Most of the times it is used to Inspect Elements on a Webpage and to get the XPath of the Elements from a Webpage.</p>

<p>1) Inspect Elements: Please visit Finding Elements using Browser Inspector for details explanation on How to find Elements using Browser Inspector.</p>

<p>2) Copy XPath: Copying XPath is really very handy. Once you are done with selecting an Element using Inspector, all you need to do is to Right click on the HTML code of the selected element and select Copy XPath.</p>

<p><img src="/images/Firebug-6.png"></p>

<p>3) Now you can paste the copied XPath on your test script by pressing ‘Ctrl + V‘. It will display like this:</p>

<p><code>
/html/body/div/header/div/a/img
</code></p>

<h3>What is FirePath</h3>

<p>It is an extension to FireBug that adds a development tool to edit, inspect and generate XPath expressions and CSS3 Selectors.</p>

<h3>Why it is Useful to Selenium Automation Tester</h3>

<p>1) You can type self-written XPath and check if it is correct by highlighting the results directly on the Webpage.</p>

<p>2) Generate an XPath expression or a CSS selector for an element by right clicking on it and selecting “Inspect in FirePath” in the context menu.</p>

<p>3) Like Firebug it also gives you the Xpath of the selected Element.</p>

<h3>How to Download Firepath</h3>

<p>Firepath is an extension to Firebug, so you would only be able to install it after installing FireBug.</p>

<p>1) Go to Tools > Web Developer > Get More Tools.</p>

<p><img src="/images/Firebug-1.png"></p>

<p>2) It will open a Webpage and will display all the plugins available for Firefox browser. As I said before that it is an extension to Firebug, you need to click on the Extensions link and the type Firepath on the Search field. As we need FirePath, just click on Add to Firefox button for FirePath.</p>

<p><img src="/images/FirePath-1.png"></p>

<p>3) Hit on Install Now button to proceed.</p>

<p><img src="/images/FirePath-2.png"></p>

<p>4) Once it is installed, it will ask to Restart the browser. Click on Restart Now button.</p>

<p><img src="/images/FirePath-3.png"></p>

<p>4) Once it is opened, press ‘F-12′ to open Firebug tool. It will display the FirePath on the same console.</p>

<h3>How to Use FirePath</h3>

<p>1) Inspect Elements: Please visit Finding Elements using Browser Inspector for details explanation on How to find Elements using Browser Inspector. But unlike FireBug, it displays the XPath of the selected element on the console.</p>

<p><img src="/images/FirePath-6.png"></p>

<p>2) Copy XPath: Copying XPath is really very handy. Once you are done with selecting an Element using Inspector, all you need to do is to Copy the XPath of the selected element and paste it to your Test script by pressing ‘Ctrl + V‘. It will display like this:</p>

<p><code>
//*[@id='masthead']/div/a/img
</code></p>

<h3>Difference between FireBug and FirePath</h3>

<p>The only difference from Automation tester point of view is FireBug returns Absolute XPath and FirePath returns Relative XPath.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Webdriver XPath : Using Browser Inspector]]></title>
    <link href="http://tabaolan1987.github.io/blog/2014/05/26/xpath-using-browser-inspector/"/>
    <updated>2014-05-26T10:24:15+07:00</updated>
    <id>http://tabaolan1987.github.io/blog/2014/05/26/xpath-using-browser-inspector</id>
    <content type="html"><![CDATA[<h2>Finding Elements using Browser Inspector</h2>

<p>Now days, it is very easy to find elements on the page. All the modern browsers have the web inspector, the built-in tool for to easily examine the structure of webpages.</p>

<p>I used to use Google Chrome’s inspector because Chrome was my default browser; Safari uses the same inspector and IE uses IE Inspector. Firefox has its own built in Inspector and it has an optional extension called Firebug, which has a little more functionality that is sometimes worth switching over for. The steps to use it are largely the same.</p>

<!--more-->


<h3>1) Activating the Web Inspector</h3>

<p>You can activate the web inspector in any of the above browsers by right-clicking on any element in the page, such as a photo. A pop-up menu should appear with the option to Inspect Element.  Or you can use the short cut key for Inspector which is F-12.</p>

<p>F-12 will pop-up a panel, usually in the bottom-half of your browser, showing the HTML source. The red circle is pointing to the Element Inspector in Firefox.</p>

<p><img src="/images/Finding-Elements-1.png"></p>

<h3>2) Selecting Elements</h3>

<p>Once you click the Inspector Icon from the bottom panel your element inspector is active and as you move your mouse around the page, the element under your mouse is highlighted with a dotted border and an annotation displays its HTML tag. At the same time, its HTML definition is displayed, in context, in the Inspector’s left-hand pane.</p>

<p>In the screenshot below, I have chosen to inspect the &ldquo;Email or Phone” textbox on the <a href="http://adf.ly/p8vbH">Facebook</a>. The inspector (in the bottom panel of the browser) highlights where in the HTML that the “Email or Phone” button appears.</p>

<p><img src="/images/FIND-ELEMENTS-2.png"></p>

<p>With the help of above html code you can simply write the below code in your test script:</p>

<p><code>
driver.findElement(By.id("email")).sendKeys("your username or email login to facebook");
</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Webdriver : Dropdown and Multiple Select Operations]]></title>
    <link href="http://tabaolan1987.github.io/blog/2014/05/26/webdriver-dropdown-and-multiple-select-operations/"/>
    <updated>2014-05-26T10:15:16+07:00</updated>
    <id>http://tabaolan1987.github.io/blog/2014/05/26/webdriver-dropdown-and-multiple-select-operations</id>
    <content type="html"><![CDATA[<h2>DropDown &amp; Multiple Select Operations</h2>

<p>Just like Checkboxes &amp; Radio buttons, Dropdown and Multiple Select also works together and almost the same way. To perform any action, the first task is to identify the element group. I am saying it a group, as dropdown/multiple select is not a single element. They always have a single name but and they contains one or more than one elements in them. I should rather say more than one option in dropdown and multiple select. The only difference between these two is deselecting statement &amp; multiple selections are not allowed on dropdowns. Let’s look at the different operations:</p>

<!--more-->


<h3>Selecting Dropdown/Multiple Select Box</h3>

<p>It is just an ordinary operation like selecting any other type of element on a webpage. You can choose it by ID, Name, Css &amp; Xpath etc. But to perform any action on this element it is required to import ‘import org.openqa.selenium.support.ui.Select' package and to use it we need to create a new select object of class select.</p>

<p><code>
Select oSelection = new Select(driver.findElement(By.id(id)));
</code></p>

<p>Note: Select class only works for elements with select tags</p>

<h3>Selecting an option using ‘selectByVisibleText’</h3>

<p>It is very easy to choose or select an option given under any dropdowns and multiple selection boxes with selectByVisibleText method.</p>

<p>```
Select oSelection = new Select(driver.findElement(By.id(id)));
oSelection.selectByVisibleText(text);</p>

<p>```</p>

<h3>Selecting an option using ‘selectByIndex’</h3>

<p>It is almost the same as selectByVisibleText but the only difference here is that we provide the index number of the option here rather the option text.</p>

<p>```
Select oSelection = new Select(driver.findElement(By.id(id)));</p>

<p>oSelection.selectByIndex(index);
```</p>

<h3>Selecting an option using ‘selectByValue’</h3>

<p>It is again the same what we have discussed earlier, the only difference in this is that we need to provide the value of the option rather the option text.</p>

<p>```
Select oSelection = new Select(driver.findElement(By.id(id)));
oSelection.selectByValue(value);</p>

<p>```</p>

<p>Note: The value of an option and the text of the option may not be always same and there can be a possibility that the value is not assigned to Select webelement. If the value is given in the Select tag then only you can use the selectByValue method.</p>

<h3>Getting the Size of Select item</h3>

<p>Sometimes you may like to count the element in the dropdown and multiple select box, so that you can use the loop on Select element.</p>

<p>```
Select oSelection = new Select(driver.findElement(By.id(id)));
List<WebElement> oSize = oSelection.getOptions();
int iListSize = oSize.size();</p>

<p>```</p>

<h3>Printing the Options</h3>

<p>Once you get the size of the Select element then it is easy to print the Text of the options.</p>

<p>```
Select oSelection = new Select(driver.findElement(By.id(id)));</p>

<pre><code>List oSize = oSelection.getOptions();
int iListSize = oSize.size();
for(int i =0; i&gt;iListSize ; i++){
    String sValue = oSelection.getOptions().get(i).getText();
    System.out.println(sValue);
    }
</code></pre>

<p>```</p>

<p>All of the above methods work on both Dropdown and Multiple select box.</p>

<h3>Deselect methods</h3>

<p>This only works on Multiple selection boxes. If in case you want to deselect any selected option and that can be done with either deselectAll(), deselectByIndex, deselectByValue and deselectByVisibletext.</p>

<p>```
Select oSelection = new Select(driver.findElement(By.id(id)));</p>

<pre><code>oSelection.deselectAll();
oSelection.deselectByIndex(index);
oSelection.deselectByValue(value);
oSelection.deselectByVisibleText(text);
</code></pre>

<p>```</p>

<h3>Multiple selection method</h3>

<p>This one also just works on Multiple selection boxes and not on regular List boxes or dropdowns. There is no additional logic behind selecting multiple options of Select element. All you need to do is to fire select commands on multiple elements one by one that’s it.</p>

<p>```
Select oSelection = new Select(driver.findElement(By.id(id)));</p>

<pre><code>oSelection.selectByIndex(index)
oSelection.selectByIndex(index)
// Or
oSelection.selectByVisibleText(text)
oSelection.selectByVisibleText(text)
// Or
oSelection.selectByValue(value)
oSelection.selectByValue(value)
</code></pre>

<p>```</p>
]]></content>
  </entry>
  
</feed>
