<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Webdriver | Ta Bao Lan]]></title>
  <link href="http://tabaolan1987.github.io/blog/categories/webdriver/atom.xml" rel="self"/>
  <link href="http://tabaolan1987.github.io/"/>
  <updated>2014-05-23T17:00:54+07:00</updated>
  <id>http://tabaolan1987.github.io/</id>
  <author>
    <name><![CDATA[Ta Bao Lan]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Webdriver : Element Commands]]></title>
    <link href="http://tabaolan1987.github.io/blog/2014/05/23/webdriver-element-commands/"/>
    <updated>2014-05-23T16:29:53+07:00</updated>
    <id>http://tabaolan1987.github.io/blog/2014/05/23/webdriver-element-commands</id>
    <content type="html"><![CDATA[<h2>Selenium WebDriver WebElement Commands</h2>

<p>The next thing you like to do is to interact with a web page. You need to locate an element first on the web page before interacting with it and locating elements can be done on the WebDriver instance itself or on a WebElement. Webdriver gives us “Find Element” and “Find Elements” method to locate elements on the web page.</p>

<p>&mdash; Điều thứ 2 mà bạn muốn làm đó là tương tác với trang web. Bạn cần phải tìm ra địa điểm của những element trên web trước rồi mới có thể tương tác được với nó.Webdriver có đối tượng WebElement dùng để lưu lại các vị trí của các Element. Webdriver cung cấp 2 hàm &ldquo;Find Element&rdquo; và &ldquo;Find Elements&rdquo; dùng để tìm ra các Element trên trang web.</p>

<h3>Find Element &amp; Find Elements Method</h3>

<p>The difference between “Find Element” and “Find Elements” method is the first returns a WebElement object otherwise it throws an exception and the latter returns a list of WebElements, it can return an empty list if no DOM elements match the query. The “Find” methods take a locator or query object called “By”. “By” strategies are listed below.</p>

<p>&mdash; Sự khác nhau của 2 hàm là 1 hàm trả về 1 dãy các Element. Nó dựa vào By.</p>

<h4>By ID</h4>

<p>With this strategy, the first element with the id attribute value matching the location will be returned. If no element has a matching id attribute, a NoSuchElementException will be raised. This is the most efficient and preferred way to locate an element, as most of the times IDs are unique. But in some cases UI developers make it having non-unique ids on a page or auto-generating the id, in both cases it should be avoided.</p>

<p>&mdash; Tìm theo Id của Element trên trang web, nếu không tìm thấy sẽ báo lỗi NoSuchElementException.</p>

<p>Example: If an element is given like this:</p>

<p>```</p>

<p><!-- html code
<input id="Username"></input>
&mdash;!>
//java code to find the input with id is &ldquo;Username&rdquo;
WebElement element = driver.findElement(By.id(&ldquo;Username&rdquo;));</p>

<p>```</p>

<h4>By Name</h4>

<p>This is also an efficient way to locate an element but again the problem is same as with ID that UI developer make it having non-unique names on a page or auto-generating the names. With this strategy, the first element with the name attribute value matching the location will be returned. If no element has a matching name attribute, a NoSuchElementException will be raised.</p>

<p>&mdash; Tìm theo thuộc tính name của đối tượng trên trang web.Nếu không tìm thấy sẽ báo lỗi NoSuchElementException.</p>

<p>Example: If an element is given like this:</p>

<p>```
<!-- html code
<input name="Username"></input>
&mdash;!>
//java code to find the input with name is &ldquo;Username&rdquo;
WebElement element = driver.findElement(By.name(&ldquo;Username&rdquo;));</p>

<p>```</p>

<h4>By Class Name</h4>

<p>With this you can find elements based on the value of the “class” attribute. If an element has many classes then this will match against each of them. A class can contain many elements.</p>

<p>&mdash; Tìm theo thuộc tính class name của đối tượng.Với thuộc tính này bạn có thể tìm ra nhiều đối tượng vì 1 class name có thể đặt vào nhiều đối tượng cùng 1 lúc.</p>

<p>Example: If an element is given like this:</p>

<p>```
<!-- html code
<input class="Username"></input>
&mdash;!>
//java code to find the input with className is &ldquo;Username&rdquo;
WebElement element = driver.findElement(By.className(&ldquo;Username&rdquo;));</p>

<p>```</p>

<h4>By Tag Name</h4>

<p>With this you can find elements by their tag names.</p>

<p>&mdash; Tìm theo thuộc tính tag Name.</p>

<p>Example: If an element is given like this:</p>

<p>```
//html code
<a href="link.html">Name of the Link</a></p>

<p>// java code to find
WebElement element=driver.findElement(By.linkText(&ldquo;Name of the Link&rdquo;));</p>

<p>```</p>

<p>By Partial Link Text</p>

<p>With this you can find elements of “a” tags(Link) with the partial link names. Use this when you know link text used within an anchor tag.</p>

<p>&mdash; Tìm theo tag Name nhưng có thể tìm 1 phần trong cái tag Name đấy. xem ví dụ để biết thêm.</p>

<p>Example: If an element is given like this</p>

<p><code>
//html code
&lt;a href="link.html"&gt;Name of the Link&lt;/a&gt;
// java code to find
WebElement element=driver.findElement(By.linkText("Name of"));
</code></p>

<p>or</p>

<p><code>
WebElement element=driver.findElement(By.linkText("the Link"));
</code></p>

<h3>Practice Exercise 1</h3>

<p>1) Launch new Browser</p>

<p>2) Open URL <a href="https://www.facebook.com">https://www.facebook.com</a></p>

<p>3) Type Name &amp; password</p>

<p>4) Click on SignIn button</p>

<h4>Solution</h4>

<p>```
package automationFramework;</p>

<p>import java.util.concurrent.TimeUnit;</p>

<p>import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.firefox.FirefoxDriver;</p>

<p>public class PracticeWebElementCommands {</p>

<pre><code>public static WebDriver driver;
public static void main(String[] args) {
     // Create a new instance of the Firefox driver
    driver = new FirefoxDriver();

    // Put an Implicit wait, this means that any search for elements on the page could take the time the implicit wait is set for before throwing exception
    driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);

    // Launch the ToolsQA Website
    driver.get("https://www.facebook.com");

    // Type email      
    driver.findElement(By.id("emaill")).sendKeys("youremail"); 

    //Type passwork
    driver.findElement(By.name("pass")).sendKeys("yourpassword");

    // Click on SignIn
    driver.findElement(By.Xpath("//form[@id='login_form']/table/tbody/tr[2]/td[3]/label/input")).click();
    }
}
</code></pre>

<p>```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Webdriver : Browser Commands]]></title>
    <link href="http://tabaolan1987.github.io/blog/2014/05/23/webdriver-browser-commands/"/>
    <updated>2014-05-23T15:56:48+07:00</updated>
    <id>http://tabaolan1987.github.io/blog/2014/05/23/webdriver-browser-commands</id>
    <content type="html"><![CDATA[<h2>Selenium WebDriver Browser Commands</h2>

<p>The very first thing you like to do with Selenium is to opening and closing a new browser. Below are the numbers of commands you can apply on the Selenium opened browser.</p>

<p>&mdash; Điều đầu tiên bạn muốn làm với Selenium là mở và đóng 1 trình duyệt. Dưới đây là những lệnh hữu ích mà bạn có thể dùng.</p>

<h3>1)Get Command</h3>

<p>Purpose: This command is use to open a new web page in the current browser.</p>

<p>(Dùng để mở ra 1 trang web trên 1 trình duyệt)</p>

<p>Command: driver.get(URL);</p>

<p>Parameters: url – The URL to load. It is best to use a fully qualified URL.</p>

<p>(Dữ liệu truyền vào là 1 URL. Tốt nhất là truyền vào 1 URL đầy đủ cả Http)</p>

<p><code>
driver.get("wwww.google.com");
</code></p>

<h3>2)Get Title Command</h3>

<p>Purpose: This command is use to get the title of the current page.
(Lấy ra tiêu đề của trang hiện tại)</p>

<p><code>
driver.getTitle();
</code></p>

<h3>3)Get Current URL Command</h3>

<p>Purpose: This command is use to get the URL of the page currently loaded in the browser.</p>

<p>(Lệnh này dùng để lấy ra URL của 1 trang đã được tải xong trên trình duyệt)</p>

<p><code>
driver.getCurrentUrl();
</code></p>

<h3>4)Get Page Source Command</h3>

<p>Purpose: This command is use to get the source of the last loaded page.</p>

<p>(Lệnh này dùng để lấy các code html của trang đã được tải về trên trình duyệt)</p>

<p><code>
driver.getPageSource();
</code></p>

<h3>5)Close Command</h3>

<p>Purpose: This command is use to close the current window of the browser, if it’s the last window it will close the browser.</p>

<p>(Lệnh này dùng dể đóng trang web hiện tại đang mở trên trình duyệt nếu nó là trang web cuối cùng thì trình duyệt sẽ tự động đóng)</p>

<p><code>
driver.close();
</code></p>

<h3>6)Quit Command</h3>

<p>Purpose: This command is use to quit the browser and all the opened windows in the browser.</p>

<p>(Lệnh này dùng để đóng trình duyêt)</p>

<p><code>
driver.quit();
</code></p>

<h3>7)Refresh Command</h3>

<p>Purpose: There are some commands is use to refresh the current browser.</p>

<p>(Những lệnh sau đây dùng để tải lại trang web hiện tại trên trình duyệt)</p>

<p><code>
driver.navigate().refresh();
driver.get(driver.getCurrentUrl());
driver.navigate().to(driver.getCurrentUrl());
driver.findElement(By.name("s")).sendKeys("\uE035");
</code></p>

<h2>Simple Practice Exercise</h2>

<p>1) Launch a new Firefox browser.</p>

<p>2) Open daringfireball.net</p>

<p>3) Get Page Title name and Title length</p>

<p>4) Print Page Title and Title length on the Eclipse Console.</p>

<p>5) Get Page URL and URL length</p>

<p>6) Print URL and URL length on the Eclipse Console.</p>

<p>7) Refresh current page</p>

<p>8) Get Page Source (HTML Source code) and Page Source length</p>

<p>9) Print Page Source and length on Eclipse Console.</p>

<p>10) Close the Browser.</p>

<h3>Solution</h3>

<h4>1) Create class &lsquo;PracticeBrowserCommands&rsquo; and copy code below paste to your class and Run this class.</h4>

<p>```
package automationFramework;
import java.util.concurrent.TimeUnit;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.firefox.FirefoxDriver;</p>

<p>public class PracticeBrowserCommands {</p>

<pre><code>private static WebDriver driver = null;

public static void main(String[] args) throws InterruptedException {

     // Create a new instance of the Firefox driver
    driver = new FirefoxDriver();

    //Put a Implicit wait, this means that any search for elements on the page could take the time the implicit wait is set for before throwing exception
    driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);

    //Launch the markdown syntax
    driver.get("http://daringfireball.net/");

    // Storing Title name in String variable
    String sTitle = driver.getTitle();
    // Storing Title length in Int variable
    int iTitleLength = driver.getTitle().length();
    // Printing Title name on Console
    System.out.println(sTitle);
    // Printing Title length on console
    System.out.println(iTitleLength);

    // Storing URL in String variable
    sTitle = driver.getCurrentUrl();
    // Storing URL length in Int variable
    iTitleLength = driver.getCurrentUrl().length();
    // Printing URL on Console
    System.out.println(sTitle);
    // Printing URL length on console
    System.out.println(iTitleLength);

    // Refreshing current page
    driver.get(driver.getCurrentUrl());  

    // Storing Page Source in String variable
    String sPageSource = driver.getPageSource();
    // Storing Page Source length in Int variable
    int iPageSourceLength = driver.getPageSource().length();
    // Printing Page Source on console
    System.out.println(sPageSource);
    // Printing Page SOurce length on console
    System.out.println(iPageSourceLength);

    //Closing browser
    driver.close();
}
</code></pre>

<p>}
```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Webdriver : Introduction]]></title>
    <link href="http://tabaolan1987.github.io/blog/2014/05/23/webdriver-introduction/"/>
    <updated>2014-05-23T15:26:35+07:00</updated>
    <id>http://tabaolan1987.github.io/blog/2014/05/23/webdriver-introduction</id>
    <content type="html"><![CDATA[<h2>Selenium Introduction</h2>

<h3>About Selenium</h3>

<p>Selenium is a software testing framework for the web that facilitates the automation of browsers. The Selenium project produces various tools for automation testing such as Selenium IDE, Selenium Remote Control (RC), Selenium Grid and Selenium 2.0 &amp; WebDriver. Learning all the tools will give you many different options for approaching different automation problems. The entire suits of tools result in a rich set of testing functions specially geared to the needs of testing of web application of all types.</p>

<p>&mdash; Selenium là 1 phần mềm dành cho việc tự động hóa test cái website. Selenium cung cấp cho chúng ta rất nhiều công cụ để tạo automation test như Selenium IDE (1 plugin dành cho Firefox, tự động ghi lại quá trình người sử dụng trên trang web), Selenium Remote Control (RC) , Selenium Grid và Selenium 2.0 và WebDriver. Nếu hiểu rõ tất cả các sản phẩm mà Selenium cung cấp bạn có thể hoàn thành việc tạo 1 project chạy automation test rất hữu ích.</p>

<h3>Why Selenium</h3>

<ul>
<li>Selenium is an open source tool with Corporate backing. (Đây là phần mềm miễn phí)</li>
<li>The tests can then be run against most modern web browsers.(Có thể chạy trên nhiều trình duyệt)</li>
<li>Selenium deploys on Windows, Linux, and Macintosh platforms.(Thích ứng với các hệ điều hành OS, WINDOW, LINUX)</li>
<li>It allows recording, editing, and debugging tests.(Nó cho phép bạn ghi lại , sửa chữa và chạy từng bước test)</li>
<li>Recorded tests can be exported in most language e.g. html, Java, .net, perl, ruby etc. (Ghi lại các quá trình test có thể chuyển đổi sang các File Java, HTML , .net ,perl ,ruby&hellip;)</li>
<li>Selenium has the support of some of the largest browser vendors who have taken (or are taking) steps to make Selenium a native part of their browser.(Selenium được sự giúp đỡ của rất nhiều các chuyên gia về trình duyệt)</li>
</ul>


<h3>Selenium WebDriver</h3>

<p>The primary new feature in Selenium 2.0 is the integration of the WebDriver API. WebDriver is designed to provide a simpler, more concise programming interface in addition to addressing some limitations in the Selenium-RC API. It enables you to use a programming language to write test scripts in different programming languages like html, Java, .net , perl, ruby and which enables you to use conditional operations, looping and other programming concepts which makes you test script robust. Selenium-WebDriver was developed to better support dynamic web pages where elements of a page may change without the page itself being reloaded. WebDriver’s goal is to supply a well-designed object-oriented API that provides improved support for modern advanced web-app testing problems.</p>

<p>&mdash; WebDriver là 1 ứng dụng mới của Selenium phiên bản 2.0 , nó được thiết kế đơn giản hơn , ngắn gọn cho việc lập trình và giải quyết được một số vấn đề hạn chế của Selenium RC- API. Nó cho phép bạn viết code bằng rất nhiều ngôn ngữ như html , java, .net , perl, ruby .Nó cho phép bạn dùng những điều kiện , vòng lặp , và một số trường hợp khác để bạn tạo ra code dễ dàng.Selenium Webdriver được phát triển để hỗ trợ nhiều trình duyệt nơi mà các đối tượng trong page có thể thay đổi khi mà reload.</p>
]]></content>
  </entry>
  
</feed>
