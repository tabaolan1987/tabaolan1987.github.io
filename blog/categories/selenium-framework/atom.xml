<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Selenium-Framework | Software Engineer]]></title>
  <link href="http://tabaolan1987.github.io/blog/categories/selenium-framework/atom.xml" rel="self"/>
  <link href="http://tabaolan1987.github.io/"/>
  <updated>2014-05-29T15:08:30+07:00</updated>
  <id>http://tabaolan1987.github.io/</id>
  <author>
    <name><![CDATA[Ta Bao Lan]]></name>
    <email><![CDATA[tabaolan1987@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Selenium Automation Framework : Create Test Script]]></title>
    <link href="http://tabaolan1987.github.io/blog/2014/05/29/selenium-automation-framework-create-test-script/"/>
    <updated>2014-05-29T14:48:11+07:00</updated>
    <id>http://tabaolan1987.github.io/blog/2014/05/29/selenium-automation-framework-create-test-script</id>
    <content type="html"><![CDATA[<h2>Create Test Script</h2>

<h3>Required knowledge : <a href="/blog/2014/05/26/selenium-automation-framework-page-object-model/">Page Object Model</a>,<a href="/blog/2014/05/27/selenium-automation-framework-modular-driven-framework/">Modular Driven Framework</a> , <a href="/blog/categories/testng-framework/">TestNG Framework</a></h3>

<p>In this tutorial we will use testNG to create our test script base on action :</p>

<p>Login Facebook</p>

<p>Post Status</p>

<!--more-->


<h4>How to do it&hellip;</h4>

<p>1) Right Click in &lsquo;src/test/java&rsquo; &ndash;> New &ndash;> Package &ndash;> name it as &lsquo;com.selenium.test&rsquo;</p>

<p><img src="/images/testng-1.png"></p>

<p><img src="/images/testng-2.png"></p>

<p>2) Right Click in package &lsquo;com.selenium.test&rsquo; &ndash;> TestNG &ndash;> Create TestNG Class.</p>

<p><img src="/images/testng-3.png"></p>

<p>3) Name your class as &lsquo;autoTestFacebook&rsquo; and tick on &lsquo;BeforeTest&rsquo; and &lsquo;AfterTest&rsquo; option.</p>

<p><img src="/images/testng-4.png"></p>

<p>4) Double click in &lsquo;autoTestFacebook&rsquo; to open it. Copy and paste the code below to this.</p>

<p>```
package com.selenium.test;</p>

<p>import org.openqa.selenium.WebDriver;
import org.openqa.selenium.firefox.FirefoxDriver;
import org.testng.annotations.Test;
import org.testng.annotations.BeforeTest;
import org.testng.annotations.AfterTest;</p>

<p>import com.selenium.pageObject.LoginPage;
import com.selenium.userAction.PostStatus;
import com.selenium.userAction.SignIn;</p>

<p>public class autoTestFacebook {</p>

<pre><code>/**
 * Create WebDriver as static variable
 */
private static WebDriver driver;
</code></pre>

<p>  /<em>*
 * Setup some variable to run your script test
 </em>/
@BeforeTest
  public void beforeTest() {</p>

<pre><code>  driver = new FirefoxDriver();
</code></pre>

<p>  }</p>

<p>  @Test
  public void f() {</p>

<pre><code>  LoginPage.loadPage(driver);
  SignIn.Execute(driver, "gaumun", "63hamlong");
  PostStatus.Execute(driver, "this is my status posted by my automation test");
</code></pre>

<p>  }</p>

<p>  /<em>*
 * after run your script test , use this code to close your browser
 </em>/
@AfterTest
  public void afterTest() {</p>

<pre><code>  driver.quit();
</code></pre>

<p>  }
}</p>

<p>```</p>

<p>5) Right click on your class &ndash;> Run As &ndash;> TestNG Test.</p>

<p><img src="/images/testng-5.png"></p>

<p>6) Wait for TestNG running and check the result of test in folder &lsquo;test-output&rsquo;</p>

<p><img src="/images/testng-6.png"></p>

<h3>After this tutorial you are already have a project base on Selenium Framework. Take a look what you have done , you will see maintain this project is not hard. Your test script is very easy to know base on actually action of user.</h3>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Selenium Automation Framework : Modular Driven Framework]]></title>
    <link href="http://tabaolan1987.github.io/blog/2014/05/27/selenium-automation-framework-modular-driven-framework/"/>
    <updated>2014-05-27T10:11:21+07:00</updated>
    <id>http://tabaolan1987.github.io/blog/2014/05/27/selenium-automation-framework-modular-driven-framework</id>
    <content type="html"><![CDATA[<h2>Modular Driven Framework</h2>

<h3>Required knowledge : <a href="/blog/2014/05/26/selenium-automation-framework-page-object-model/">Page Object Model</a></h3>

<p>In most of the web application we have few set of actions which are always executed in the series of actions. Rather than writing those actions again and again in our test, we can club those actions in to a method and then calling that method in our test script. Modularity avoids duplicacy of code. In future if there is any change in the series of action, all you have to do is to make changes in your main modular method script. No test case will be impacted with the change.</p>

<!--more-->


<h3>How to do it..</h3>

<p>Look for repeated functionality in your application for example the &lsquo;login&rsquo; functionality. We can simple wrap this functionality in a method and we can give it a sensible name.</p>

<p>1) Create a &lsquo;New Package&rsquo; file and name it as &lsquo;userAction&rsquo;, by right click on the Project and select New > Package. We will be creating different packages for Page Objects, Utilities, Test Data, Test Cases and Modular actions. It is always recommended to use this structure, as it is easy to understand, easy to use and easy to maintain.</p>

<p><img src="/images/pom-1.png"></p>

<p><img src="/images/user-action-1.png"></p>

<p><img src="/images/user-action-2.png"></p>

<p>2) Create &lsquo;New Class&rsquo; and name it as SignIn by right click on package &lsquo;userAction&rsquo; and select New > Class. It will add new class &lsquo;SignIn&rsquo; under package &lsquo;userAction&rsquo;.</p>

<p><img src="/images/user-action-3.png"></p>

<p><img src="/images/user-action-4.png"></p>

<p>3) Now create a Public Static Void Method and name it as Execute  and club the following steps in to it:</p>

<p>Load Page login Facebook</p>

<p>Enter Username</p>

<p>Enter Password</p>

<p>Click on the Submit button</p>

<p>```
package com.selenium.userAction;</p>

<p>import org.openqa.selenium.WebDriver;</p>

<p>import com.selenium.pageObject.LoginPage;</p>

<p>public class SignIn {</p>

<pre><code>/**
 * @param driver
 * @param username
 * @param password
 * execute login to facebook
 */
public static void Execute(WebDriver driver , String username, String password) {
    LoginPage.loadPage(driver);
    LoginPage.txtbx_UserName(driver).sendKeys(username);
    LoginPage.txtbx_Password(driver).sendKeys(password);
    LoginPage.btn_LogIn(driver).click();
}
</code></pre>

<p>}</p>

<p>```</p>

<p>4) Create &lsquo;New Class&rsquo; and name it as PostStatus by right click on package &lsquo;userAction&rsquo; and select New > Class. It will add new class &lsquo;PostStatus&rsquo; under package &lsquo;userAction&rsquo;.</p>

<p><img src="/images/user-action-3.png"></p>

<p><img src="/images/user-action-5.png"></p>

<p>5) Now create a Public Static Void Method and name it as Execute  and club the following steps in to it:</p>

<p>Enter Status</p>

<p>Click on button Post.</p>

<p>```
package com.selenium.userAction;</p>

<p>import org.openqa.selenium.WebDriver;</p>

<p>import com.selenium.pageObject.HomePage;</p>

<p>public class PostStatus {</p>

<pre><code>/**
 * @param driver
 * @param status
 * execute post status in facebook
 */
public static void Execute(WebDriver driver, String status){
    HomePage.txt_status(driver).sendKeys(status);
    HomePage.butt_post(driver).click();
}
</code></pre>

<p>}</p>

<p>```</p>

<h3>We are complete to create the actions next we will follow to create the first test with TestNG</h3>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Selenium Automation Framework : Page Object Model]]></title>
    <link href="http://tabaolan1987.github.io/blog/2014/05/26/selenium-automation-framework-page-object-model/"/>
    <updated>2014-05-26T16:03:08+07:00</updated>
    <id>http://tabaolan1987.github.io/blog/2014/05/26/selenium-automation-framework-page-object-model</id>
    <content type="html"><![CDATA[<h2>Page Object Model | POM</h2>

<h3>Required knowledge : <a href="/blog/categories/webdriver/">WebDriver</a>,<a href="/blog/categories/xpath/">Xpath</a></h3>

<p>Creating Selenium test cases can result in an unmaintainable project. One of the reasons is that too many duplicated code is used. Duplicated code could be caused by duplicated functionality and this will result in duplicated usage of locators. The disadvantage of duplicated code is that the project is less maintainable. If some locator will change, you have to walk through the whole test code to adjust locators where necessary. By using the page object model we can make non-brittle test code and reduce or eliminate duplicate test code. Beside of that it improves the readability and allows us to create interactive documentation. Last but not least, we can create tests with less keystroke. An implementation of the page object model can be achieved by separating the abstraction of the test object and the test scripts.</p>

<!--more-->


<p>Note : We will try to create Login Page and Homepage follow website <a href="https://facebook.com">Facebook</a></p>

<h3>How to do it</h3>

<ol>
<li>Create a ‘New Package’ file and name it as ‘pageObjects’, by right click on the Project and select New > Package. We will be creating different packages for Page Objects, Utilities, Test Data, Test Cases and Modular actions. It is always recommended to use this structure, as it is easy to understand, easy to use and easy to maintain.</li>
</ol>


<p><img src="/images/pom-1.png"></p>

<p><img src="/images/pom-2.png"></p>

<p><img src="/images/pom-3.png"></p>

<ol>
<li>Create a ‘New Class’ file and refer the name to the actual page from the test object, by right click on the above created Package and select New > Class. In our case it is Login Page.</li>
</ol>


<p><img src="/images/pom-4.png"></p>

<p><img src="/images/pom-5.png"></p>

<ol>
<li>Open URL : <a href="Https://facebook.com">Https://facebook.com</a> . Wait for page loading then we will use firebug to find the location elements of form login Facebook.</li>
</ol>


<p><img src="/images/pom-6.png"></p>

<p>3.Now create a Static Method for each Element (Object) in the Login Page. Each method will have an Argument (driver) and a Return value (element).</p>

<p>```
package com.selenium.pageObject;</p>

<p>import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;</p>

<p>import com.gargoylesoftware.htmlunit.ElementNotFoundException;</p>

<p>public class LoginPage {</p>

<pre><code> /**
 * WebElement element 
 */
private static WebElement element = null;

/**
 * @param driver
 * @return let driver load the login page of facebook
 * @throws InterruptedException
 */
public static WebDriver loadPage(WebDriver driver) {
    driver.get("https://facebook.com");
    return driver;
}


/**
 * @param driver
 * 
 * @return the textbox username of login form facebook
 */
public static WebElement txtbx_UserName(WebDriver driver) throws ElementNotFoundException{
    element = driver.findElement(By.id("email"));
    return element;
}

/**
 * @param driver
 * @return the textbox passwork of login form facebook
 */
public static WebElement txtbx_Password(WebDriver driver) throws ElementNotFoundException{
    element = driver.findElement(By.id("pass"));
    return element;
}

/**
 * @param driver
 * @return the button login of login form facebook
 */
public static WebElement btn_LogIn(WebDriver driver) throws ElementNotFoundException{
    element = driver.findElement(By.id("loginbutton"));
    return element;
}
</code></pre>

<p>}
```</p>

<ol>
<li>Create a ‘New Class’ file and refer the name to the actual page from the test object, by right click on the above created Package and select New > Class. In our case it is Home Page.</li>
</ol>


<p><img src="/images/pom-1.png"></p>

<p><img src="/images/pom-7.png"></p>

<ol>
<li>Open URL : <a href="Https://facebook.com">Https://facebook.com</a> &ndash;> login in &ndash; use xpath to find element location (textarena to post status and button for post).</li>
</ol>


<p><img src="/images/pom-8.png"></p>

<p>8.Now create a Static Method for each Element (Object) in the Home Page. Each method will have an Argument (driver) and a Return value (element).</p>

<p>```
package com.selenium.pageObject;</p>

<p>import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;</p>

<p>public class HomePage {</p>

<pre><code>/**
 * WebElement
 */
private static WebElement element;

/**
 * @param driver
 * @return textbox update status element
 */
public static WebElement txt_status(WebDriver driver) {
    element = driver.findElement(By.xpath("//div[@id='pagelet_composer']/div/div/div/form[1]/div[1]/div[2]/div/div/div[2]/div/div/textarea"));
    return element;
}

/**
 * @param driver
 * @return button to post status
 */
public static WebElement butt_post(WebDriver driver){
    element = driver.findElement(By.xpath("//div[@id='pagelet_composer']/div/div/div/form[1]/div[1]/div[4]/div/ul/li[3]/button"));
    return element;
}
</code></pre>

<p>}
```</p>

<h3>We are finish to create a Login Page , Home Page follow Page Object Model . Now you will need to create an Action in Java base on User Define, please <a href="">click here</a></h3>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Selenium Automation Framework : Create New Project]]></title>
    <link href="http://tabaolan1987.github.io/blog/2014/05/26/selenium-automation-framework-create-new-project/"/>
    <updated>2014-05-26T15:01:18+07:00</updated>
    <id>http://tabaolan1987.github.io/blog/2014/05/26/selenium-automation-framework-create-new-project</id>
    <content type="html"><![CDATA[<h2>Create new Project</h2>

<p>Maven project is very helpful for us to manage the version of each library we used and easy to build , easy to configuration with Continuous Integration.</p>

<!--more-->


<p>Now we will create a project Maven name &ldquo;Selenium-Automation-Framework&rdquo;.</p>

<h4>Step 1 : Open eclipse &ndash;> Choose File menu &ndash;> Choose New &ndash;> Choose Other..</h4>

<p><img src="/images/c-maven-1.png"></p>

<h4>Step 2 : Find Maven &ndash;> Choose Maven Project &ndash;> Click &lsquo;Next&rsquo; button</h4>

<p><img src="/images/c-maven-2.png"></p>

<h4>Step 3 : Tick on  &ldquo;Create a simple project&rdquo; , &ldquo;Use default workspace&rdquo;</h4>

<p><img src="/images/c-maven-3.png"></p>

<h4>Step 4 : Enter value for &ldquo;Group ID&rdquo; and  &ldquo;Artifact ID&rdquo; . Then click &ldquo;Finish&rdquo;.</h4>

<p><img src="/images/c-maven-4.png"></p>

<h4>Step 5 : The new Project &ldquo;Selenium-Automation-Framework&rdquo; will show in the left menu of Eclipse.</h4>

<p><img src="/images/c-maven-5.png"></p>

<h2>Configuration Project</h2>

<p>First you need to configuration the pom.xml file to add library required by Selenium.</p>

<h4>Step 1 : Open project &ndash;> Double click to file &ldquo;pom.xml&rdquo;</h4>

<p><img src="/images/c-maven-6.png"></p>

<h4>Stemp 2 : Copy this code and paste into your pom.xml file</h4>

<p>```
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>
  <groupId>Selenium-Automation-Framework</groupId>
  <artifactId>Selenium-Framework</artifactId>
  <version>0.0.1-SNAPSHOT</version></p>

<pre><code>&lt;dependencies&gt;
    &lt;dependency&gt;
        &lt;groupId&gt;org.seleniumhq.selenium&lt;/groupId&gt;
        &lt;artifactId&gt;selenium-java&lt;/artifactId&gt;
        &lt;version&gt;2.41.0&lt;/version&gt;
    &lt;/dependency&gt;
    &lt;dependency&gt;
        &lt;groupId&gt;org.seleniumhq.selenium&lt;/groupId&gt;
        &lt;artifactId&gt;selenium-server&lt;/artifactId&gt;
        &lt;version&gt;2.41.0&lt;/version&gt;
    &lt;/dependency&gt;
    &lt;dependency&gt;
        &lt;groupId&gt;org.seleniumhq.selenium&lt;/groupId&gt;
        &lt;artifactId&gt;selenium-firefox-driver&lt;/artifactId&gt;
        &lt;version&gt;2.41.0&lt;/version&gt;
    &lt;/dependency&gt;
    &lt;dependency&gt;
        &lt;groupId&gt;org.seleniumhq.selenium&lt;/groupId&gt;
        &lt;artifactId&gt;selenium-chrome-driver&lt;/artifactId&gt;
        &lt;version&gt;2.41.0&lt;/version&gt;
    &lt;/dependency&gt;
    &lt;dependency&gt;
        &lt;groupId&gt;org.seleniumhq.selenium&lt;/groupId&gt;
        &lt;artifactId&gt;selenium-remote-driver&lt;/artifactId&gt;
        &lt;version&gt;2.41.0&lt;/version&gt;
    &lt;/dependency&gt;
    &lt;dependency&gt;
        &lt;groupId&gt;org.seleniumhq.selenium&lt;/groupId&gt;
        &lt;artifactId&gt;selenium-ie-driver&lt;/artifactId&gt;
        &lt;version&gt;2.41.0&lt;/version&gt;
    &lt;/dependency&gt;
    &lt;dependency&gt;
        &lt;groupId&gt;junit&lt;/groupId&gt;
        &lt;artifactId&gt;junit&lt;/artifactId&gt;
        &lt;version&gt;4.11&lt;/version&gt;
    &lt;/dependency&gt;
     &lt;dependency&gt;
        &lt;groupId&gt;org.apache.poi&lt;/groupId&gt;
        &lt;artifactId&gt;poi&lt;/artifactId&gt;
        &lt;version&gt;3.10-FINAL&lt;/version&gt;
    &lt;/dependency&gt;
    &lt;dependency&gt;
        &lt;groupId&gt;org.testng&lt;/groupId&gt;
        &lt;artifactId&gt;testng&lt;/artifactId&gt;
        &lt;version&gt;6.8.8&lt;/version&gt;
    &lt;/dependency&gt;
&lt;/dependencies&gt;
</code></pre>

<p></project></p>

<p>```</p>

<p>By adding this code , we are telling to maven that we will use jar files that we define in the tag <dependency>.</p>

<h4>Step 3 : Right click into project and choose Maven &ndash;> Update project.</h4>

<p><img src="/images/c-maven-7.png"></p>

<h4>Step 4 : Click &ldquo;Ok&rdquo; button to let Maven download jar files.</h4>

<p><img src="/images/c-maven-8.png"></p>

<h4>Step 5 : Open the &ldquo;Maven dependencies&rdquo; to see jar file are available in your project.</h4>

<p><img src="/images/c-maven-9.png"></p>

<h3>Note : you will need to have an internet in your laptop to allow the download of maven.</h3>

<p>Now the setup and configuration is done , you are able to start writing Selenium Automation Framework.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Selenium Automation Framework : Install Maven to Eclipse]]></title>
    <link href="http://tabaolan1987.github.io/blog/2014/05/26/selenium-automation-framework-install-maven-to-eclipse/"/>
    <updated>2014-05-26T14:14:07+07:00</updated>
    <id>http://tabaolan1987.github.io/blog/2014/05/26/selenium-automation-framework-install-maven-to-eclipse</id>
    <content type="html"><![CDATA[<h2>Maven plugin for Eclipse</h2>

<p>You can install Maven plugin for Eclipse via update site, simply copy the above update site link address and paste it into Eclipse’s “Update” or “Install New Software” manager as explained below.</p>

<!--more-->


<h3>Step 1 :</h3>

<p>Installing m2eclipse is fairly simple. Start Eclipse then go to: Help &ndash;> Install New Software</p>

<p>Copy this link <a href="http://download.eclipse.org/technology/m2e/releases">http://download.eclipse.org/technology/m2e/releases</a> for the latest Stable Release into Eclipse and hit Enter.</p>

<p><img src="/images/maven-plugin-eclipse-1.jpeg"></p>

<p>When the site loads, select the features to install, or click the Select All button. For our requirement select “Maven Integration for Eclipse” as shown above.</p>

<p>Checking [x] Contact all update sites during install to find required software might take sometime and this is optional.</p>

<h3>Step 2 :</h3>

<p>Click Next to view Installation Details.</p>

<p>Click Next to agree the license terms, and click Finish.</p>

<h3>Step 3 :</h3>

<p>If you get any warning message when installing, click OK to continue.</p>

<p><img src="/images/maven-plugin-eclipse-2.jpg"></p>

<p>This will take few minutes to install the Maven plugin and once done restart the Eclipse.</p>

<p><img src="/images/maven-3.jpg"></p>
]]></content>
  </entry>
  
</feed>
