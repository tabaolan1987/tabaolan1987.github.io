<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Selenium Tutorial]]></title>
  <link href="http://tabaolan1987.github.io/atom.xml" rel="self"/>
  <link href="http://tabaolan1987.github.io/"/>
  <updated>2014-06-09T15:46:54+07:00</updated>
  <id>http://tabaolan1987.github.io/</id>
  <author>
    <name><![CDATA[Ta Bao Lan]]></name>
    <email><![CDATA[tabaolan1987@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[IceCream Framework Part 2 : Download and Configuration]]></title>
    <link href="http://tabaolan1987.github.io/blog/2014/06/09/icecream-framework-download-and-configuration/"/>
    <updated>2014-06-09T11:51:13+07:00</updated>
    <id>http://tabaolan1987.github.io/blog/2014/06/09/icecream-framework-download-and-configuration</id>
    <content type="html"><![CDATA[<h2>DOWNLOAD</h2>

<h3>Required Tools (If you already have this in your laptop or computer , you can skip this step) :</h3>

<p>1) Download and install Microsoft Office trial here : <a href="http://q.gs/7KN4D">Link</a></p>

<p>2) Download and install JAVA here : <a href="http://tabaolan1987.github.io/blog/2014/05/22/newbie-part-1-download-and-install-java/">How to download and install Java</a></p>

<h3>IceCream Framework version (all version of framework) :</h3>

<!--more-->


<p>1) Version Beta 0.1 : <a href="">Click here</a></p>

<h2>Configuration</h2>

<p>You can watch the video set up here : (Watch now)[]</p>

<p>Or you can follow in these step below :</p>

<p>1) Click on this link version of Icecream you want and wait for browser download this.</p>

<p>2) After download success , copy and paste the &lsquo;Icecream.zip&rsquo; file to any location in your disk you want.</p>

<p><img src="http://tabaolan1987.github.io/images/ICE_CONFIG-1.png"></p>

<p>3) Unzip file &lsquo;Icecream.zip&rsquo; by <a href="http://q.gs/7KNKy">winzar</a> or <a href="http://q.gs/7KNLO">7zip</a></p>

<p><img src="http://tabaolan1987.github.io/images/ICE_CONFIG-2.png"></p>

<p>4) You will see the folder &lsquo;Icecream&rsquo; with inside it contain 3 folder : TestCase and Report and Screenshot , 1 file &lsquo;IceCream.jar&rsquo; and 1 file &lsquo;run.cmd&rsquo;. Do not delete them.</p>

<p><img src="http://tabaolan1987.github.io/images/ICE_CONFIG-3.png"></p>

<p><img src="http://tabaolan1987.github.io/images/ICE_CONFIG-4.png"></p>

<p>5) Open file &lsquo;run.cmd&rsquo; by Notepad++ or Notepad program</p>

<p><img src="http://tabaolan1987.github.io/images/ICE_CONFIG-5.png"></p>

<p>6) Copy the path to the folder &lsquo;IceCream&rsquo; and paste to the &lsquo;replace-it-with-your-path-to-folder-Icecream&rsquo;</p>

<p><img src="http://tabaolan1987.github.io/images/ICE_CONFIG-6.png"></p>

<p><img src="http://tabaolan1987.github.io/images/ICE_CONFIG-7.png"></p>

<p><img src="http://tabaolan1987.github.io/images/ICE_CONFIG-8.png"></p>

<p>7) Save this file &lsquo;run.cmd&rsquo;.</p>

<h2>Now you are finish the configuration , is it easy?</h2>

<p><img src="http://tabaolan1987.github.io/images/ICE-2.jpg"></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[IceCream Framework Part 1 : Introduction]]></title>
    <link href="http://tabaolan1987.github.io/blog/2014/06/09/icecream-framework-introduction/"/>
    <updated>2014-06-09T10:23:15+07:00</updated>
    <id>http://tabaolan1987.github.io/blog/2014/06/09/icecream-framework-introduction</id>
    <content type="html"><![CDATA[<h2>Introduction</h2>

<p>IceCream FrameWork was launched to help the tester to run test automation website more easily.</p>

<p>The IceCream FrameWork installation very easy, just a few basic steps that you can run it.</p>

<!--more-->


<p>Tester just have the basic understanding of XPATH Location and Excel files is enough to make one test automation programs running on multiple browsers.</p>

<p>In addition, it supports IceCream Framework Report for each test case are stored in the folder Report, the screen image was taken by the command will be stored in the folder Screen-shot to tester easily manage test case.</p>

<p>IceCream Framework is written by Java language and use the core Selenium WebDriver.</p>

<p>Currently IceCream Framework version 1.0 Beta version only the basic function to perform automatic chemical testing.</p>

<p>The reason for this because I want to collect more of your opinions, feedback and the desire to have more function for me so that I can write to serve you.</p>

<p>IceCream Framework is completely free to use for personal learning and doing the simple test case.</p>

<p>If your company wants to use this IceCream Framework for automating the process of test sites or want to build your own Framework, please contact me via email: <a href="&#109;&#97;&#x69;&#108;&#116;&#111;&#58;&#116;&#x61;&#x62;&#97;&#x6f;&#108;&#97;&#110;&#x31;&#57;&#56;&#x37;&#x40;&#x67;&#x6d;&#97;&#x69;&#x6c;&#x2e;&#99;&#111;&#109;">&#x74;&#97;&#x62;&#97;&#111;&#x6c;&#x61;&#110;&#49;&#57;&#x38;&#x37;&#x40;&#x67;&#x6d;&#x61;&#105;&#108;&#x2e;&#x63;&#x6f;&#x6d;</a> or ping me via skype: lantb1987. I would be happy to discuss with you!</p>

<p>All the download links and installation instructions in my blog post I use Adfly to earn a bit of money to serve the development. Hopefully it will not bother you too much during your reading my blog.</p>

<p>I named this framework is IceCream because it is the name of my first child. She was so cute and gentle, easy to raise, smile every time, so I hope this framework will also create a comfortable and cozy up to you.</p>

<p>Let IceCream say Hi with you and take a look in <a href="">Download and Configuration</a></p>

<p><img src="http://tabaolan1987.github.io/images/ICE-1.jpg"></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Beginner with Selenium Ide Part 2: Record User Action and Export this Script to another langugae]]></title>
    <link href="http://tabaolan1987.github.io/blog/2014/06/02/beginner-with-selenium-ide-part-2-record-user-action-and-export-this-script-to-another-langugae/"/>
    <updated>2014-06-02T15:03:46+07:00</updated>
    <id>http://tabaolan1987.github.io/blog/2014/06/02/beginner-with-selenium-ide-part-2-record-user-action-and-export-this-script-to-another-langugae</id>
    <content type="html"><![CDATA[<h2>Introduction</h2>

<p>In this tutorial  , we will let you know how to record the user action in browser via Selenium IDE and How to export this to another language like java , &hellip;!</p>

<h3>Record User Action</h3>

<!--more-->


<p>1) Open Firefox Browser and click in the icon of Selenium IDE.</p>

<p><img src="http://tabaolan1987.github.io/images/ide-3.png"></p>

<p>2) The GUI of Selenium Ide will show , click in the red circle button of the top to record user action.</p>

<p><img src="http://tabaolan1987.github.io/images/ide-5.png"></p>

<p>3) Go back to the firefox driver and type to the url &ldquo;<a href="https://facebook.com">https://facebook.com</a>&rdquo;</p>

<p>4) Login to facebook as normal.</p>

<p>5) Back to Selenium IDE GUI , you will see it recorded your action.</p>

<p><img src="http://tabaolan1987.github.io/images/ide-6.png"></p>

<p>6) Click in the button play to let Selenium IDE run again each action that you made before.</p>

<p><img src="http://tabaolan1987.github.io/images/ide-7.png"></p>

<p>7) Now if you can save this test case as html file and re-run it by Open Selenium IDE and Open File &ndash;> choose the path you save this file.</p>

<h3>Export this test script to another language script.</h3>

<p>The most useful option is &ldquo;Export&rdquo; because it allows you to turn your Selenium IDE test cases into file formats that can run on Selenium Remote Control and WebDriver</p>

<p>Selenium IDE , test cases can be exported only to the following formats:</p>

<p>.cs (C# source code)</p>

<p>.java (Java source code)</p>

<p>.py (Python source code)</p>

<p>.rb (Ruby source code)</p>

<p>You just need click in menu File &ndash;> Export Test Case As.</p>

<p><img src="http://tabaolan1987.github.io/images/ide-9.png"></p>

<p>Note : You need to know that some function when you export from Selenium IDE to another language will be fail. I suggest you need to re-check the export File by running it again.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Beginner with Selenium Ide Part 1 : Download Selenium Ide and install in FireFox Browser]]></title>
    <link href="http://tabaolan1987.github.io/blog/2014/06/02/beginner-with-selenium-ide-part-1-download-selenium-ide-and-install-in-firefox-browser/"/>
    <updated>2014-06-02T14:34:19+07:00</updated>
    <id>http://tabaolan1987.github.io/blog/2014/06/02/beginner-with-selenium-ide-part-1-download-selenium-ide-and-install-in-firefox-browser</id>
    <content type="html"><![CDATA[<h2>Introduction</h2>

<p>Selenium IDE is a Firefox plugin which records and plays back user interactions with the browser. Use this to either create simple scripts or assist in exploratory testing. It can also export Remote Control or WebDriver scripts, though they tend to be somewhat brittle and should be overhauled into some sort of Page Object-y structure for any kind of resiliency.</p>

<!--more-->


<h3>How to download and install to firefox browser</h3>

<p>1) Install Firefox browser and setup it to your computer by click into this <a href="http://adf.ly/p8vFO">link</a></p>

<p>2) Go to Selenium and download Selenium IDE by click into this <a href="http://adf.ly/p8uzn">link</a></p>

<p>3) Click to the version current of Selenium IDE</p>

<p><img src="http://tabaolan1987.github.io/images/ide-1.png"></p>

<p>4) Click to &lsquo;Allow&rsquo; button if it existed in the top of browser.</p>

<p><img src="http://tabaolan1987.github.io/images/ide-2.png"></p>

<p>5) Click on button &lsquo;Install Now&rsquo; when it enable.</p>

<p><img src="http://tabaolan1987.github.io/images/ide-3.png"></p>

<p>6) After install please click in the &lsquo;Restart Now&rsquo; button in the top of browser</p>

<p>7) After restart you will see the icon of Selenium IDE show in the top of browser.</p>

<p><img src="http://tabaolan1987.github.io/images/ide-3.png"></p>

<p>8) Now let us share with you how to playing with ide in the <a href="">Selenium IDE : User action record</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Selenium Automation Framework P8 : Read Data From Excel File]]></title>
    <link href="http://tabaolan1987.github.io/blog/2014/06/02/selenium-automation-framework-p8-read-data-from-excel-file/"/>
    <updated>2014-06-02T12:05:43+07:00</updated>
    <id>http://tabaolan1987.github.io/blog/2014/06/02/selenium-automation-framework-p8-read-data-from-excel-file</id>
    <content type="html"><![CDATA[<h2>Reading data from the Excel</h2>

<h3>Required knowledge : <a href="http://tabaolan1987.github.io/blog/2014/05/26/selenium-automation-framework-page-object-model/">Page Object Model</a>, <a href="http://tabaolan1987.github.io/blog/2014/05/27/selenium-automation-framework-modular-driven-framework/">Modular Driven Framework</a></h3>

<p>In some way , the client want us read data from excel file then past it to the automation test.In this tutorial , I will write step by step to read data from excel file then past it to the test.</p>

<p>This is the scenario  : Login to facebook by get username and password from excel file.</p>

<h3>How to do</h3>

<!--more-->


<p>1)Create new file excel &lsquo;test.xlsx&rsquo; like this  and paste to the folder &lsquo;Driver&rsquo; or you can create new folder.</p>

<p><img src="http://tabaolan1987.github.io/images/excel-3.png"></p>

<p>2) Open your &lsquo;pom.xml&rsquo; to make sure that we added apache POI jar file(this jar file will allow us to open ,get data from excel) in the dependency tag.</p>

<p><img src="http://tabaolan1987.github.io/images/excel-1.png"></p>

<p>3) Open your project go to package &lsquo;com.selenium.util&rsquo; and create new class &lsquo;ExcelUtil&rsquo;.</p>

<p><img src="http://tabaolan1987.github.io/images/excel-2.png"></p>

<p>4) Open &lsquo;ExcelUtil.java&rsquo; and paste the code below to it :</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>package com.selenium.util;
</span><span class='line'>
</span><span class='line'>import java.io.File;
</span><span class='line'>import java.io.FileInputStream;
</span><span class='line'>
</span><span class='line'>import org.apache.poi.xssf.usermodel.XSSFCell;
</span><span class='line'>import org.apache.poi.xssf.usermodel.XSSFSheet;
</span><span class='line'>import org.apache.poi.xssf.usermodel.XSSFWorkbook;
</span><span class='line'>
</span><span class='line'>public class ExcelUtil {
</span><span class='line'>  private static XSSFSheet ExcelWSheet;
</span><span class='line'>  private static XSSFWorkbook ExcelWBook;
</span><span class='line'>  private static XSSFCell Cell;
</span><span class='line'>  
</span><span class='line'>  
</span><span class='line'>  //this method is to get the path of the file 'test.xlsx' in folder driver
</span><span class='line'>  public static String PathExcelInProject(){
</span><span class='line'>      String path = DriverUtil.getKey(DriverUtil.PROP_PROJECT_BASE_DIR) + File.separator + DriverUtil.FOLDER_DRIVER 
</span><span class='line'>              + File.separator + "";
</span><span class='line'>      try {
</span><span class='line'>          File Excel = new File(path);
</span><span class='line'>          if(Excel.exists()){
</span><span class='line'>              return Excel.getAbsolutePath();
</span><span class='line'>          }
</span><span class='line'>      } catch (Exception e) {
</span><span class='line'>          e.printStackTrace();
</span><span class='line'>          return null;
</span><span class='line'>      }
</span><span class='line'>      return null;    
</span><span class='line'>  }
</span><span class='line'>  
</span><span class='line'>  // This method is to set the File path and to open the Excel file, Pass
</span><span class='line'>  // Excel Path and Sheetname as Arguments to this method
</span><span class='line'>  public static void setExcelFile(String Path, String SheetName)
</span><span class='line'>          throws Exception {
</span><span class='line'>      try {
</span><span class='line'>          // Open the Excel file
</span><span class='line'>          FileInputStream ExcelFile = new FileInputStream(Path);
</span><span class='line'>          // Access the required test data sheet
</span><span class='line'>          ExcelWBook = new XSSFWorkbook(ExcelFile);
</span><span class='line'>          ExcelWSheet = ExcelWBook.getSheet(SheetName);
</span><span class='line'>      } catch (Exception e) {
</span><span class='line'>          throw (e);
</span><span class='line'>      }
</span><span class='line'>  }
</span><span class='line'>
</span><span class='line'>  // This method is to read the test data from the Excel cell, in this we are
</span><span class='line'>  // passing parameters as Row num and Col num
</span><span class='line'>  public static String getCellData(int RowNum, int ColNum) throws Exception {
</span><span class='line'>      try {
</span><span class='line'>          Cell = ExcelWSheet.getRow(RowNum).getCell(ColNum);
</span><span class='line'>          String CellData = Cell.getStringCellValue();
</span><span class='line'>          return CellData;
</span><span class='line'>      } catch (Exception e) {
</span><span class='line'>          return "";
</span><span class='line'>      }
</span><span class='line'>  }
</span><span class='line'>}
</span></code></pre></td></tr></table></div></figure>


<p>5) Create a new testNG class and with name &lsquo;loginFacebookByExcelData&rsquo; and paste the code below :</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>package com.selenium.test;
</span><span class='line'>
</span><span class='line'>import org.openqa.selenium.WebDriver;
</span><span class='line'>import org.openqa.selenium.firefox.FirefoxDriver;
</span><span class='line'>import org.testng.annotations.Test;
</span><span class='line'>import org.testng.annotations.BeforeTest;
</span><span class='line'>import org.testng.annotations.AfterTest;
</span><span class='line'>
</span><span class='line'>import com.selenium.pageObject.LoginPage;
</span><span class='line'>import com.selenium.userAction.SignIn;
</span><span class='line'>import com.selenium.util.ExcelUtil;
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>public class loginFacebookByExcelData {
</span><span class='line'>  
</span><span class='line'>  private WebDriver driver;
</span><span class='line'>  
</span><span class='line'>  private static String username;
</span><span class='line'>  
</span><span class='line'>  private static String password;
</span><span class='line'>  
</span><span class='line'>  @Test
</span><span class='line'>  public void loginByExcel() {
</span><span class='line'>    //Call loading page of login page facebook , take a look in post [Page Object Model] of my blog
</span><span class='line'>   LoginPage.loadPage(driver);
</span><span class='line'>   //Call action SignIn , take a look in post [Modular Driven Framework] of my blogs
</span><span class='line'>   SignIn.Execute(driver, username, password);
</span><span class='line'>  }
</span><span class='line'>  
</span><span class='line'>  @BeforeTest
</span><span class='line'>  public void beforeTest() throws Exception {
</span><span class='line'>    
</span><span class='line'>    driver = new FirefoxDriver();
</span><span class='line'>    
</span><span class='line'>    //set file excel is my excel file in folder Driver , you can set the other path to your excel file
</span><span class='line'>    ExcelUtil.setExcelFile(ExcelUtil.PathExcelInProject(), "test");
</span><span class='line'>    //get the data from file excel
</span><span class='line'>    username = ExcelUtil.getCellData(2, 1);
</span><span class='line'>    password = ExcelUtil.getCellData(2, 2);
</span><span class='line'>    
</span><span class='line'>  }
</span><span class='line'>
</span><span class='line'>  @AfterTest
</span><span class='line'>  public void afterTest() {
</span><span class='line'>    driver.quit();
</span><span class='line'>  }
</span><span class='line'>
</span><span class='line'>}
</span></code></pre></td></tr></table></div></figure>


<p>6) Right click into class and chose &lsquo;Run as&rsquo; &ndash;> &lsquo;TestNg Test&rsquo;</p>

<p><img src="http://tabaolan1987.github.io/images/excel-5.png"></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Selenium Mobile : Run test scripts in real IPhone]]></title>
    <link href="http://tabaolan1987.github.io/blog/2014/05/30/selenium-mobile-run-test-scripts-in-real-iphone/"/>
    <updated>2014-05-30T15:22:09+07:00</updated>
    <id>http://tabaolan1987.github.io/blog/2014/05/30/selenium-mobile-run-test-scripts-in-real-iphone</id>
    <content type="html"><![CDATA[<h2>Introduction</h2>

<p>We want to execute our testscripts on a iphone device. The iphone driver allows us to execute the WebDriver tests on a real iphone device.</p>

<!--more-->


<h3>Configuration</h3>

<p>We need to install Xcode which is available for the Mac operating systems. We also need a provisoning profile for running the script on a real device.</p>

<p>1) We need to create a provisioning profile, so go to this <a href="http://adf.ly/p8wJ3">website</a> and create a profile.</p>

<p>2) We need to download Xcode from the following location: <a href="http://adf.ly/p8wOu">this</a></p>

<p>3) The iPhone WebDriver application is not available from the App Store, therefore we need to check-out the code and build it manually. We can do the check-out by entering the following terminal command:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>svn checkout http://selenium.googlecode.com/svn/trunk/</span></code></pre></td></tr></table></div></figure>


<h3>Solution</h3>

<p>1) Open the project selenium-read-only/iphone/iWebDriver.xcodeproj in Xcode.</p>

<p>2) Double-click on the project and set the build configuration to the latest version of the iPhone Simulator, by using the drop-down box in the top left corner.</p>

<p>3) Configure and install the iPhone provisioning profile.</p>

<p>4) Open Info.plist and edit the Bundle Identifier to com.NAME.$ {PRODUCT_NAME:identifier} where NAME is the name you registered your provisioning profile to be an authority on.</p>

<p>5) Make sure your device is connected to your computer. Your device must also be routable from your computer. The easiest way to do this is to configure a wifi network and connect your device to it.</p>

<p>6) Click on Run (play button). After compiling, the iphone simulator should appear and the iWebDriver app will be installed in it.</p>

<p>7) Now we can use the IPhoneDriver in our tests. You will need to take a look in <a href="http://tabaolan1987.github.io/blog/categories/testng-framework/">TestNG Framework</a>. Create new TestNG class and paste the code below :</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>package com.selenium.test;
</span><span class='line'>
</span><span class='line'>import org.openqa.selenium.WebDriver;
</span><span class='line'>import org.openqa.selenium.iphone.IPhoneDriver;
</span><span class='line'>import org.testng.annotations.Test;
</span><span class='line'>import org.testng.annotations.BeforeTest;
</span><span class='line'>import org.testng.annotations.AfterTest;
</span><span class='line'>
</span><span class='line'>import com.selenium.pageObject.LoginPage;
</span><span class='line'>import com.selenium.userAction.PostStatus;
</span><span class='line'>import com.selenium.userAction.SignIn;
</span><span class='line'>
</span><span class='line'>public class autoTestLoadingFacebook {
</span><span class='line'>  
</span><span class='line'>  /**
</span><span class='line'>   * Create WebDriver as static variable
</span><span class='line'>   */
</span><span class='line'>  private static WebDriver driver;
</span><span class='line'>  
</span><span class='line'>  
</span><span class='line'>  /**
</span><span class='line'> * Setup some variable to run your script test
</span><span class='line'> */
</span><span class='line'>@BeforeTest
</span><span class='line'>  public void beforeTest() {
</span><span class='line'>    driver =  new IPhoneDriver();
</span><span class='line'>  }
</span><span class='line'>  
</span><span class='line'>  /**
</span><span class='line'> * your test script
</span><span class='line'> */
</span><span class='line'>@Test
</span><span class='line'>  public void f() {
</span><span class='line'>  driver.get("https://facebook.com");
</span><span class='line'>  //create more test script here
</span><span class='line'>  }
</span><span class='line'>  
</span><span class='line'>  
</span><span class='line'>  /**
</span><span class='line'> * after run your script test , use this code to close your browser
</span><span class='line'> */
</span><span class='line'>@AfterTest
</span><span class='line'>  public void afterTest() {
</span><span class='line'>    driver.quit();
</span><span class='line'>  }
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>8) Run your script.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Selenium Mobile : Run test scripts on a Xcode iPhone simulator]]></title>
    <link href="http://tabaolan1987.github.io/blog/2014/05/30/selenium-mobile-run-test-scripts-on-a-xcode-iphone-simulator/"/>
    <updated>2014-05-30T15:07:42+07:00</updated>
    <id>http://tabaolan1987.github.io/blog/2014/05/30/selenium-mobile-run-test-scripts-on-a-xcode-iphone-simulator</id>
    <content type="html"><![CDATA[<h2>Introduction</h2>

<p>We want to run our test in a iPhone simulator. The iphone simulator comes with Xcode which is available for the Mac operating systems. This recipe will show us how we can run our WebDriver tests in a iphone simulator.</p>

<!--more-->


<p>We need to download Xcode from the following location: <a href="http://adf.ly/p8wOu">here</a></p>

<p>The iPhone WebDriver application is not available from the App Store, therefore we need to check-out the code and build it manually. We can do the check-out by entering the following terminal command</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>
</span><span class='line'>svn checkout http://selenium.googlecode.com/svn/trunk/
</span></code></pre></td></tr></table></div></figure>


<h2>Solution</h2>

<p>1) Open the project selenium-read-only/iphone/iWebDriver.xcodeproj in Xcode.</p>

<p>2) Double-click on the project and set the build configuration to the latest version of the iPhone Simulator, by using the drop-down box in the top left corner.</p>

<p>3) Click on Run (play button). After compiling, the iphone simulator should appear and the iWebDriver app will be installed in it.</p>

<p>4) Now we can use the IPhoneDriver in our tests. You will need to take a look in <a href="http://tabaolan1987.github.io/blog/categories/testng-framework/">TestNG Framework</a>. Create new TestNG class and paste the code below :</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>package com.selenium.test;
</span><span class='line'>
</span><span class='line'>import org.openqa.selenium.WebDriver;
</span><span class='line'>import org.openqa.selenium.iphone.IPhoneDriver;
</span><span class='line'>import org.testng.annotations.Test;
</span><span class='line'>import org.testng.annotations.BeforeTest;
</span><span class='line'>import org.testng.annotations.AfterTest;
</span><span class='line'>
</span><span class='line'>import com.selenium.pageObject.LoginPage;
</span><span class='line'>import com.selenium.userAction.PostStatus;
</span><span class='line'>import com.selenium.userAction.SignIn;
</span><span class='line'>
</span><span class='line'>public class autoTestLoadingFacebook {
</span><span class='line'>  
</span><span class='line'>  /**
</span><span class='line'>   * Create WebDriver as static variable
</span><span class='line'>   */
</span><span class='line'>  private static WebDriver driver;
</span><span class='line'>  
</span><span class='line'>  
</span><span class='line'>  /**
</span><span class='line'> * Setup some variable to run your script test
</span><span class='line'> */
</span><span class='line'>@BeforeTest
</span><span class='line'>  public void beforeTest() {
</span><span class='line'>    driver =  new IPhoneDriver();
</span><span class='line'>  }
</span><span class='line'>  
</span><span class='line'>  /**
</span><span class='line'> * your test script
</span><span class='line'> */
</span><span class='line'>@Test
</span><span class='line'>  public void f() {
</span><span class='line'>  driver.get("https://facebook.com");
</span><span class='line'>  //create more test script here
</span><span class='line'>  }
</span><span class='line'>  
</span><span class='line'>  
</span><span class='line'>  /**
</span><span class='line'> * after run your script test , use this code to close your browser
</span><span class='line'> */
</span><span class='line'>@AfterTest
</span><span class='line'>  public void afterTest() {
</span><span class='line'>    driver.quit();
</span><span class='line'>  }
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>5) Run your test.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Selenium Mobile : Run tests on a real Android device]]></title>
    <link href="http://tabaolan1987.github.io/blog/2014/05/30/selenium-mobile-run-tests-on-a-real-android-device/"/>
    <updated>2014-05-30T15:02:24+07:00</updated>
    <id>http://tabaolan1987.github.io/blog/2014/05/30/selenium-mobile-run-tests-on-a-real-android-device</id>
    <content type="html"><![CDATA[<h2>Introduction</h2>

<p>We want to run our testscripts on a real Android device. The android driver allows us to execute our tests against an Android browser. This can be a simulator or a real device.</p>

<!--more-->


<p>Before we can register our simulator we have to download the android SDK (Software Development Kit) from the following location: <a href="http://adf.ly/p8w0X">SDK</a></p>

<h2>Solution</h2>

<p>We can divide this section into three parts: setup the device, install the WebDriver APK and finally run the test.</p>

<h3>Setup the device</h3>

<p>Connect the android device with the computer using a USB cable.</p>

<h2>Install the WebDriver APK</h2>

<p>1) We need to retrieve the serial id with the following command:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$cd /android_sdk/platform-tools/
</span><span class='line'>adb devices</span></code></pre></td></tr></table></div></figure>


<p>2) Download the Android server from <a href="http://adf.ly/p8w7c">Selenium website</a> and save it in the platform-tools directory. To install the application enter:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$./adb -s &lt;serialId&gt; -e install -r android-server.apk</span></code></pre></td></tr></table></div></figure>


<p>3) Start the Android WebDriver application,by running this command:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$./adb -s &lt;serialId&gt; shell am start -a android.intent.action.MAIN -n org.openqa.selenium.android.app/.MainActivity</span></code></pre></td></tr></table></div></figure>


<p>4) Now we need to setup the port forwarding in order to forward traffic from the host machine to the emulator. Enter the following in the terminal :</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$./adb -s &lt;serialId&gt; forward tcp:8080 tcp:8080</span></code></pre></td></tr></table></div></figure>


<h3>Run the test</h3>

<p>You will need to take a look in <a href="http://tabaolan1987.github.io/blog/categories/testng-framework/">TestNG Framework</a></p>

<p>Now we have our environment setup we can run our tests.Create new TestNG and paste the code below :</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>package com.selenium.test;
</span><span class='line'>
</span><span class='line'>import org.openqa.selenium.WebDriver;
</span><span class='line'>import org.openqa.selenium.android.AndroidDriver;
</span><span class='line'>import org.testng.annotations.Test;
</span><span class='line'>import org.testng.annotations.BeforeTest;
</span><span class='line'>import org.testng.annotations.AfterTest;
</span><span class='line'>
</span><span class='line'>import com.selenium.pageObject.LoginPage;
</span><span class='line'>import com.selenium.userAction.PostStatus;
</span><span class='line'>import com.selenium.userAction.SignIn;
</span><span class='line'>
</span><span class='line'>public class autoTestLoadingFacebook {
</span><span class='line'>  
</span><span class='line'>  /**
</span><span class='line'>   * Create WebDriver as static variable
</span><span class='line'>   */
</span><span class='line'>  private static WebDriver driver;
</span><span class='line'>  
</span><span class='line'>  
</span><span class='line'>  /**
</span><span class='line'> * Setup some variable to run your script test
</span><span class='line'> */
</span><span class='line'>@BeforeTest
</span><span class='line'>  public void beforeTest() {
</span><span class='line'>    driver =  new AndroidDriver();
</span><span class='line'>  }
</span><span class='line'>  
</span><span class='line'>  /**
</span><span class='line'> * your test script
</span><span class='line'> */
</span><span class='line'>@Test
</span><span class='line'>  public void f() {
</span><span class='line'>  driver.get("https://facebook.com");
</span><span class='line'>  //create more test script here
</span><span class='line'>  }
</span><span class='line'>  
</span><span class='line'>  
</span><span class='line'>  /**
</span><span class='line'> * after run your script test , use this code to close your browser
</span><span class='line'> */
</span><span class='line'>@AfterTest
</span><span class='line'>  public void afterTest() {
</span><span class='line'>    driver.quit();
</span><span class='line'>  }
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>5) Run your test.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Selenium Mobile : Running tests on an Android simulator]]></title>
    <link href="http://tabaolan1987.github.io/blog/2014/05/30/selenium-mobile-running-tests-on-an-android-simulator/"/>
    <updated>2014-05-30T14:46:17+07:00</updated>
    <id>http://tabaolan1987.github.io/blog/2014/05/30/selenium-mobile-running-tests-on-an-android-simulator</id>
    <content type="html"><![CDATA[<h2>Introduction</h2>

<p>The android driver allows us to execute our tests against an Android browser. This can be a simulator or a real device. This recipe will walk us through the steps we have to do to run our tests in a simulator.</p>

<!--more-->


<p>Before we can register our simulator we have to download the android SDK (Software Development Kit) from the following location: <a href="http://adf.ly/p8w0X">SDK</a></p>

<h2>Solution</h2>

<p>We can divide this section into three parts: setup the emulator, install the WebDriver APK and finally run the test.</p>

<h3>Setup the emulator</h3>

<p>1) Navigate to the tools directory and create an Android Virtual Device. -n: specifies the name of the AVD -t: specifies the platform target -c: specifies the SD card storage space.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>
</span><span class='line'>$cd ~/android_sdk/tools/ 
</span><span class='line'>$./android create avd -n my_android -t 12 -c 100M
</span></code></pre></td></tr></table></div></figure>


<p>2) We can list the targets with the following command to check if the creation succeeded:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>
</span><span class='line'>./android list targets
</span></code></pre></td></tr></table></div></figure>


<p>3)Finally we can start the emulator with the following command:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$./emulator -avd my_android &</span></code></pre></td></tr></table></div></figure>


<h3>Install the WebDriver APK</h3>

<p>1) We need to retrieve the serial id with the following command:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$cd /android_sdk/platform-tools/
</span><span class='line'>adb devices</span></code></pre></td></tr></table></div></figure>


<p>2) Download the Android server from <a href="http://adf.ly/p8w7c">Selenium website</a> and save it in the platform-tools directory. To install the application enter:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$./adb -s &lt;serialId&gt; -e install -r android-server.apk</span></code></pre></td></tr></table></div></figure>


<p>3) Start the Android WebDriver application,by running this command:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$./adb -s &lt;serialId&gt; shell am start -a android.intent.action.MAIN -n org.openqa.selenium.android.app/.MainActivity</span></code></pre></td></tr></table></div></figure>


<p>4) Now we need to setup the port forwarding in order to forward traffic from the host machine to the emulator. Enter the following in the terminal :</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$./adb -s &lt;serialId&gt; forward tcp:8080 tcp:8080</span></code></pre></td></tr></table></div></figure>


<h3>Run the test</h3>

<p>You will need to take a look in <a href="http://tabaolan1987.github.io/blog/categories/testng-framework/">TestNG Framework</a></p>

<p>Now we have our environment setup we can run our tests. Create new TestNG and paste the code below :</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>package com.selenium.test;
</span><span class='line'>
</span><span class='line'>import org.openqa.selenium.WebDriver;
</span><span class='line'>import org.openqa.selenium.android.AndroidDriver;
</span><span class='line'>import org.testng.annotations.Test;
</span><span class='line'>import org.testng.annotations.BeforeTest;
</span><span class='line'>import org.testng.annotations.AfterTest;
</span><span class='line'>
</span><span class='line'>import com.selenium.pageObject.LoginPage;
</span><span class='line'>import com.selenium.userAction.PostStatus;
</span><span class='line'>import com.selenium.userAction.SignIn;
</span><span class='line'>
</span><span class='line'>public class autoTestLoadingFacebook {
</span><span class='line'>  
</span><span class='line'>  /**
</span><span class='line'>   * Create WebDriver as static variable
</span><span class='line'>   */
</span><span class='line'>  private static WebDriver driver;
</span><span class='line'>  
</span><span class='line'>  
</span><span class='line'>  /**
</span><span class='line'> * Setup some variable to run your script test
</span><span class='line'> */
</span><span class='line'>@BeforeTest
</span><span class='line'>  public void beforeTest() {
</span><span class='line'>    driver =  new AndroidDriver();
</span><span class='line'>  }
</span><span class='line'>  
</span><span class='line'>  /**
</span><span class='line'> * your test script
</span><span class='line'> */
</span><span class='line'>@Test
</span><span class='line'>  public void f() {
</span><span class='line'>  driver.get("https://facebook.com");
</span><span class='line'>  //create more test script here
</span><span class='line'>  }
</span><span class='line'>  
</span><span class='line'>  
</span><span class='line'>  /**
</span><span class='line'> * after run your script test , use this code to close your browser
</span><span class='line'> */
</span><span class='line'>@AfterTest
</span><span class='line'>  public void afterTest() {
</span><span class='line'>    driver.quit();
</span><span class='line'>  }
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>5) Run your test.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Webdriver : Action Class]]></title>
    <link href="http://tabaolan1987.github.io/blog/2014/05/30/webdriver-action-class/"/>
    <updated>2014-05-30T14:01:08+07:00</updated>
    <id>http://tabaolan1987.github.io/blog/2014/05/30/webdriver-action-class</id>
    <content type="html"><![CDATA[<h2>Introduction</h2>

<p>The Advanced User Interactions API is a new, more comprehensive API for describing actions a user can perform on a web page. This includes actions such as drag and drop or clicking multiple elements while holding down the Control key.</p>

<!--more-->


<h3>Mouse Hover action</h3>

<p>There will be situations where it is required to click on the item of the drop down menu that will show up when you mouse over this menu.take a look in the example :</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>// find the menu that have the dropdown showing when we mouse over it.   
</span><span class='line'>WebElement element = driver.findElement(By.linkText("Category"));
</span><span class='line'>//Create instance of action class
</span><span class='line'>Actions action = new Actions(driver);
</span><span class='line'>//move mouse over the menu.
</span><span class='line'>action.moveToElement(element).build().perform();
</span><span class='line'>//find the link you want and click it.
</span><span class='line'>driver.findElement(By.linkText("News")).click();</span></code></pre></td></tr></table></div></figure>


<p>or you can code like this way :</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>WebElement element = driver.findElement(By.linkText("Category"));
</span><span class='line'>        Actions action = new Actions(driver);
</span><span class='line'>action.moveToElement(element).moveToElement(driver.findElement(By.linkText("News"))).click().build().perform();
</span></code></pre></td></tr></table></div></figure>


<p>With some of the browser it happens that once mouse hover action is performed, the menu list disappear with in the fractions of seconds before Selenium identify the next submenu item and perform click action on it. In that case it is better to use perform()&lsquo; action on the main menu to hold the menu list till the time Selenium identify the sub menu item and click on it.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>WebElement element = driver.findElement(By.linkText("Category"));
</span><span class='line'>Actions action = new Actions(driver);
</span><span class='line'>action.moveToElement(element).perform();
</span><span class='line'>WebElement subElement = driver.findElement(By.linkText("News"));
</span><span class='line'>action.moveToElement(subElement);
</span><span class='line'>action.click();
</span><span class='line'>action.perform();</span></code></pre></td></tr></table></div></figure>


<h3>Drag And Drop</h3>

<p>In case you need drag and drop an element to another position , the action class provide us the way like below code :</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>
</span><span class='line'>WebElement From = driver.findElement(By.xpath("yourlocationElement));
</span><span class='line'>WebElement To = driver.findElement(By.xpath("yourlocationElement"));
</span><span class='line'>Actions builder = new Actions(driver);
</span><span class='line'>Action dragAndDrop = builder.clickAndHold(From)
</span><span class='line'>.moveToElement(To)
</span><span class='line'>.release(To)
</span><span class='line'>.build();
</span><span class='line'>dragAndDrop.perform();
</span></code></pre></td></tr></table></div></figure>


<p></p>

<h3>Scroll bars dragging</h3>

<p>The following code demonstrates how to drag the vertical scroll bars on a window. The &ldquo;Actions&rdquo; class is used to click and hold on to the scroll bar and then it is dragged to a new location.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Actions dragger = new Actions(driver);
</span><span class='line'>WebElement draggablePartOfScrollbar = driver.findElement(By.xpath("yourscrollbarsXpaht"));
</span><span class='line'>
</span><span class='line'>// drag downwards
</span><span class='line'>int numberOfPixelsToDragTheScrollbarDown = 10;
</span><span class='line'>for (int i=10;i&lt;150;i=i+numberOfPixelsToDragTheScrollbarDown){
</span><span class='line'>  // this causes a gradual drag of the scroll bar, 10 units at a time
</span><span class='line'>  dragger.moveToElement(draggablePartOfScrollbar).clickAndHold().moveByOffset(0,numberOfPixelsToDragTheScrollbarDown).release().perform();
</span><span class='line'>  Thread.sleep(1000L);
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>  // now drag opposite way (downwards)
</span><span class='line'>  numberOfPixelsToDragTheScrollbarDown = -10;
</span><span class='line'>for (int i=150;i&gt;10;i=i+numberOfPixelsToDragTheScrollbarDown){
</span><span class='line'>  // this causes a gradual drag of the scroll bar, -10 units at a time
</span><span class='line'>  dragger.moveToElement(draggablePartOfScrollbar).clickAndHold().moveByOffset(0,numberOfPixelsToDragTheScrollbarDown).release().perform();
</span><span class='line'>  Thread.sleep(1000L);
</span><span class='line'>}
</span></code></pre></td></tr></table></div></figure>


<h3>RightClick on Element</h3>

<p>In case you want right click on Element please follow the code below :</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Actions actions = new Actions(driver);    
</span><span class='line'>Action action=actions.contextClick(WebElement).build(); //pass WebElement as an argument
</span><span class='line'>action.perform();</span></code></pre></td></tr></table></div></figure>


<h3>Sliding</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>WebElement draggable = driver.findElement("find your slider in here by id or xpath etc.."); 
</span><span class='line'>new Actions(driver).dragAndDropBy(draggable, 120, 0).build().perform();</span></code></pre></td></tr></table></div></figure>


<p></p>

<h3>SelectMulti</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>List&lt;WebElement&gt; listItems = driver.findElements("find your select by id or xpath or etc");
</span><span class='line'>Actions builder = new Actions(driver); 
</span><span class='line'>builder.clickAndHold(listItems.get(1)).clickAndHold(listItems.get(2)).click();
</span><span class='line'>Action selectMultiple = builder.build(); 
</span><span class='line'>selectMultiple.perform();</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Selenium Automation Framework P7 : Run on Multi Browser]]></title>
    <link href="http://tabaolan1987.github.io/blog/2014/05/29/selenium-automation-framework-run-on-multi-browser/"/>
    <updated>2014-05-29T15:16:59+07:00</updated>
    <id>http://tabaolan1987.github.io/blog/2014/05/29/selenium-automation-framework-run-on-multi-browser</id>
    <content type="html"><![CDATA[<h2>Multi Browser Test</h2>

<h3>Required knowledge : <a href="http://tabaolan1987.github.io/blog/2014/05/29/selenium-automation-framework-create-test-script/">Test Script</a>, <a href="http://tabaolan1987.github.io/blog/2014/05/26/selenium-automation-framework-page-object-model/">Page Object Model</a>, <a href="http://tabaolan1987.github.io/blog/2014/05/27/selenium-automation-framework-modular-driven-framework/">Modular Driven Framework</a> , <a href="http://tabaolan1987.github.io/blog/categories/testng-framework/">TestNG Framework</a></h3>

<p>In many case of testing , we need enable our script running on cross browser to make sure that the front-end of website is stable with multi browser.In this tutorial , you will know step by step to run script in 3 browser basic is &lsquo;Chrome&rsquo; , &lsquo;IE&rsquo; and &lsquo;FireFox&rsquo; with this action :</p>

<p>Login Facebook</p>

<p>Post Status</p>

<h4>How to do it&hellip;.</h4>

<!--more-->


<p>1) Download driver for IE: <a href="http://adf.ly/p8x8u"> 32 bit Windows</a> , <a href="http://adf.ly/p8xEK"> 64 bit Windows</a></p>

<p>2) Download driver for <a href="http://adf.ly/p8xJd">Chrome</a></p>

<p>3) Right click into project &ndash;> New &ndash;> folder &ndash;> name it as &lsquo;Driver&rsquo;</p>

<p><img src="http://tabaolan1987.github.io/images/mulb-1.png"></p>

<p>4) Unzip and Copy 2 driver Chrome and IE to folder &lsquo;Driver&rsquo;.</p>

<p><img src="http://tabaolan1987.github.io/images/mulb-2.png"></p>

<p>5) Double click on &lsquo;pom.xml&rsquo; paste the configuration below the tag &lsquo;dependencies&rsquo; to enable Maven automatic get the Directory of project when build project.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;reporting&gt;
</span><span class='line'>      &lt;plugins&gt;
</span><span class='line'>          &lt;!-- &lt;plugin&gt; --&gt;
</span><span class='line'>          &lt;!-- &lt;groupId&gt;org.codehaus.sonar-plugins&lt;/groupId&gt; --&gt;
</span><span class='line'>          &lt;!-- &lt;artifactId&gt;maven-report&lt;/artifactId&gt; --&gt;
</span><span class='line'>          &lt;!-- &lt;version&gt;0.1&lt;/version&gt; --&gt;
</span><span class='line'>          &lt;!-- &lt;/plugin&gt; --&gt;
</span><span class='line'>          &lt;plugin&gt;
</span><span class='line'>              &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;
</span><span class='line'>              &lt;artifactId&gt;maven-surefire-report-plugin&lt;/artifactId&gt;
</span><span class='line'>              &lt;version&gt;2.14.1&lt;/version&gt;
</span><span class='line'>              &lt;configuration&gt;
</span><span class='line'>                  &lt;!-- &lt;showSuccess&gt;false&lt;/showSuccess&gt; --&gt;
</span><span class='line'>              &lt;/configuration&gt;
</span><span class='line'>          &lt;/plugin&gt;
</span><span class='line'>      &lt;/plugins&gt;
</span><span class='line'>  &lt;/reporting&gt;
</span><span class='line'>&lt;build&gt;
</span><span class='line'>      &lt;extensions&gt;
</span><span class='line'>          &lt;!-- start - for deploying using webdav --&gt;
</span><span class='line'>          &lt;extension&gt;
</span><span class='line'>              &lt;groupId&gt;org.apache.maven.wagon&lt;/groupId&gt;
</span><span class='line'>              &lt;artifactId&gt;wagon-webdav&lt;/artifactId&gt;
</span><span class='line'>              &lt;version&gt;1.0-beta-2&lt;/version&gt;
</span><span class='line'>          &lt;/extension&gt;
</span><span class='line'>          &lt;!-- end - for deploying using webdav --&gt;
</span><span class='line'>      &lt;/extensions&gt;
</span><span class='line'>      &lt;plugins&gt;
</span><span class='line'>          &lt;plugin&gt;
</span><span class='line'>              &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;
</span><span class='line'>              &lt;artifactId&gt;maven-resources-plugin&lt;/artifactId&gt;
</span><span class='line'>              &lt;executions&gt;
</span><span class='line'>                  &lt;execution&gt;
</span><span class='line'>                      &lt;id&gt;init-res&lt;/id&gt;
</span><span class='line'>                      &lt;!-- use the copy resources instead of resources, which adds it to 
</span><span class='line'>                          the eclipse buildpath --&gt;
</span><span class='line'>                      &lt;phase&gt;initialize&lt;/phase&gt;
</span><span class='line'>                      &lt;goals&gt;
</span><span class='line'>                          &lt;goal&gt;copy-resources&lt;/goal&gt;
</span><span class='line'>                      &lt;/goals&gt;
</span><span class='line'>                      &lt;configuration&gt;
</span><span class='line'>                          &lt;outputDirectory&gt;${project.basedir}/src/main/resources&lt;/outputDirectory&gt;
</span><span class='line'>                          &lt;resources&gt;
</span><span class='line'>                              &lt;resource&gt;
</span><span class='line'>                                  &lt;directory&gt;${project.basedir}/src/template/resources&lt;/directory&gt;
</span><span class='line'>                                  &lt;targetPath&gt;${project.basedir}/src/main/resources&lt;/targetPath&gt;
</span><span class='line'>                                  &lt;filtering&gt;true&lt;/filtering&gt;
</span><span class='line'>                              &lt;/resource&gt;
</span><span class='line'>                          &lt;/resources&gt;
</span><span class='line'>                      &lt;/configuration&gt;
</span><span class='line'>                  &lt;/execution&gt;
</span><span class='line'>              &lt;/executions&gt;
</span><span class='line'>          &lt;/plugin&gt;
</span><span class='line'>          &lt;plugin&gt;
</span><span class='line'>              &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;
</span><span class='line'>              &lt;artifactId&gt;maven-surefire-plugin&lt;/artifactId&gt;
</span><span class='line'>              &lt;version&gt;2.7.1&lt;/version&gt;
</span><span class='line'>              &lt;configuration&gt;
</span><span class='line'>                  &lt;argLine&gt;-Xmx1024m -Xms1024m&lt;/argLine&gt;
</span><span class='line'>                  &lt;suiteXmlFiles&gt;
</span><span class='line'>                      &lt;suiteXmlFile&gt;Test.xml&lt;/suiteXmlFile&gt;
</span><span class='line'>                  &lt;/suiteXmlFiles&gt;
</span><span class='line'>              &lt;/configuration&gt;
</span><span class='line'>          &lt;/plugin&gt;
</span><span class='line'>          &lt;plugin&gt;
</span><span class='line'>              &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;
</span><span class='line'>              &lt;artifactId&gt;maven-compiler-plugin&lt;/artifactId&gt;
</span><span class='line'>              &lt;version&gt;3.1&lt;/version&gt;
</span><span class='line'>              &lt;configuration&gt;
</span><span class='line'>                  &lt;source&gt;1.5&lt;/source&gt;
</span><span class='line'>                  &lt;target&gt;1.5&lt;/target&gt;
</span><span class='line'>              &lt;/configuration&gt;
</span><span class='line'>          &lt;/plugin&gt;
</span><span class='line'>          &lt;plugin&gt;
</span><span class='line'>              &lt;groupId&gt;org.codehaus.mojo&lt;/groupId&gt;
</span><span class='line'>              &lt;artifactId&gt;sonar-maven-plugin&lt;/artifactId&gt;
</span><span class='line'>              &lt;version&gt;2.1&lt;/version&gt;
</span><span class='line'>          &lt;/plugin&gt;
</span><span class='line'>      &lt;/plugins&gt;
</span><span class='line'>  &lt;/build&gt;</span></code></pre></td></tr></table></div></figure>


<p>6) After that your &lsquo;pom.xml&rsquo; file will look like this :</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
<span class='line-number'>128</span>
<span class='line-number'>129</span>
<span class='line-number'>130</span>
<span class='line-number'>131</span>
<span class='line-number'>132</span>
<span class='line-number'>133</span>
<span class='line-number'>134</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
</span><span class='line'>  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"&gt;
</span><span class='line'>  &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;
</span><span class='line'>  &lt;groupId&gt;Selenium-Automation-Framework&lt;/groupId&gt;
</span><span class='line'>  &lt;artifactId&gt;Selenium-Framework&lt;/artifactId&gt;
</span><span class='line'>  &lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt;
</span><span class='line'>  &lt;dependencies&gt;
</span><span class='line'>      &lt;dependency&gt;
</span><span class='line'>          &lt;groupId&gt;org.seleniumhq.selenium&lt;/groupId&gt;
</span><span class='line'>          &lt;artifactId&gt;selenium-java&lt;/artifactId&gt;
</span><span class='line'>          &lt;version&gt;2.41.0&lt;/version&gt;
</span><span class='line'>      &lt;/dependency&gt;
</span><span class='line'>      &lt;dependency&gt;
</span><span class='line'>          &lt;groupId&gt;org.seleniumhq.selenium&lt;/groupId&gt;
</span><span class='line'>          &lt;artifactId&gt;selenium-server&lt;/artifactId&gt;
</span><span class='line'>          &lt;version&gt;2.41.0&lt;/version&gt;
</span><span class='line'>      &lt;/dependency&gt;
</span><span class='line'>      &lt;dependency&gt;
</span><span class='line'>          &lt;groupId&gt;org.seleniumhq.selenium&lt;/groupId&gt;
</span><span class='line'>          &lt;artifactId&gt;selenium-firefox-driver&lt;/artifactId&gt;
</span><span class='line'>          &lt;version&gt;2.41.0&lt;/version&gt;
</span><span class='line'>      &lt;/dependency&gt;
</span><span class='line'>      &lt;dependency&gt;
</span><span class='line'>          &lt;groupId&gt;org.seleniumhq.selenium&lt;/groupId&gt;
</span><span class='line'>          &lt;artifactId&gt;selenium-chrome-driver&lt;/artifactId&gt;
</span><span class='line'>          &lt;version&gt;2.41.0&lt;/version&gt;
</span><span class='line'>      &lt;/dependency&gt;
</span><span class='line'>      &lt;dependency&gt;
</span><span class='line'>          &lt;groupId&gt;org.seleniumhq.selenium&lt;/groupId&gt;
</span><span class='line'>          &lt;artifactId&gt;selenium-remote-driver&lt;/artifactId&gt;
</span><span class='line'>          &lt;version&gt;2.41.0&lt;/version&gt;
</span><span class='line'>      &lt;/dependency&gt;
</span><span class='line'>      &lt;dependency&gt;
</span><span class='line'>          &lt;groupId&gt;org.seleniumhq.selenium&lt;/groupId&gt;
</span><span class='line'>          &lt;artifactId&gt;selenium-ie-driver&lt;/artifactId&gt;
</span><span class='line'>          &lt;version&gt;2.41.0&lt;/version&gt;
</span><span class='line'>      &lt;/dependency&gt;
</span><span class='line'>      &lt;dependency&gt;
</span><span class='line'>          &lt;groupId&gt;junit&lt;/groupId&gt;
</span><span class='line'>          &lt;artifactId&gt;junit&lt;/artifactId&gt;
</span><span class='line'>          &lt;version&gt;4.11&lt;/version&gt;
</span><span class='line'>      &lt;/dependency&gt;
</span><span class='line'>      &lt;dependency&gt;
</span><span class='line'>          &lt;groupId&gt;org.apache.poi&lt;/groupId&gt;
</span><span class='line'>          &lt;artifactId&gt;poi&lt;/artifactId&gt;
</span><span class='line'>          &lt;version&gt;3.10-FINAL&lt;/version&gt;
</span><span class='line'>      &lt;/dependency&gt;
</span><span class='line'>      &lt;dependency&gt;
</span><span class='line'>          &lt;groupId&gt;org.testng&lt;/groupId&gt;
</span><span class='line'>          &lt;artifactId&gt;testng&lt;/artifactId&gt;
</span><span class='line'>          &lt;version&gt;6.8.8&lt;/version&gt;
</span><span class='line'>      &lt;/dependency&gt;
</span><span class='line'>  &lt;/dependencies&gt;
</span><span class='line'>  &lt;reporting&gt;
</span><span class='line'>      &lt;plugins&gt;
</span><span class='line'>          &lt;!-- &lt;plugin&gt; --&gt;
</span><span class='line'>          &lt;!-- &lt;groupId&gt;org.codehaus.sonar-plugins&lt;/groupId&gt; --&gt;
</span><span class='line'>          &lt;!-- &lt;artifactId&gt;maven-report&lt;/artifactId&gt; --&gt;
</span><span class='line'>          &lt;!-- &lt;version&gt;0.1&lt;/version&gt; --&gt;
</span><span class='line'>          &lt;!-- &lt;/plugin&gt; --&gt;
</span><span class='line'>          &lt;plugin&gt;
</span><span class='line'>              &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;
</span><span class='line'>              &lt;artifactId&gt;maven-surefire-report-plugin&lt;/artifactId&gt;
</span><span class='line'>              &lt;version&gt;2.14.1&lt;/version&gt;
</span><span class='line'>              &lt;configuration&gt;
</span><span class='line'>                  &lt;!-- &lt;showSuccess&gt;false&lt;/showSuccess&gt; --&gt;
</span><span class='line'>              &lt;/configuration&gt;
</span><span class='line'>          &lt;/plugin&gt;
</span><span class='line'>      &lt;/plugins&gt;
</span><span class='line'>  &lt;/reporting&gt;
</span><span class='line'>  &lt;build&gt;
</span><span class='line'>      &lt;extensions&gt;
</span><span class='line'>          &lt;!-- start - for deploying using webdav --&gt;
</span><span class='line'>          &lt;extension&gt;
</span><span class='line'>              &lt;groupId&gt;org.apache.maven.wagon&lt;/groupId&gt;
</span><span class='line'>              &lt;artifactId&gt;wagon-webdav&lt;/artifactId&gt;
</span><span class='line'>              &lt;version&gt;1.0-beta-2&lt;/version&gt;
</span><span class='line'>          &lt;/extension&gt;
</span><span class='line'>          &lt;!-- end - for deploying using webdav --&gt;
</span><span class='line'>      &lt;/extensions&gt;
</span><span class='line'>      &lt;plugins&gt;
</span><span class='line'>          &lt;plugin&gt;
</span><span class='line'>              &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;
</span><span class='line'>              &lt;artifactId&gt;maven-resources-plugin&lt;/artifactId&gt;
</span><span class='line'>              &lt;executions&gt;
</span><span class='line'>                  &lt;execution&gt;
</span><span class='line'>                      &lt;id&gt;init-res&lt;/id&gt;
</span><span class='line'>                      &lt;!-- use the copy resources instead of resources, which adds it to 
</span><span class='line'>                          the eclipse buildpath --&gt;
</span><span class='line'>                      &lt;phase&gt;initialize&lt;/phase&gt;
</span><span class='line'>                      &lt;goals&gt;
</span><span class='line'>                          &lt;goal&gt;copy-resources&lt;/goal&gt;
</span><span class='line'>                      &lt;/goals&gt;
</span><span class='line'>                      &lt;configuration&gt;
</span><span class='line'>                          &lt;outputDirectory&gt;${project.basedir}/src/main/resources&lt;/outputDirectory&gt;
</span><span class='line'>                          &lt;resources&gt;
</span><span class='line'>                              &lt;resource&gt;
</span><span class='line'>                                  &lt;directory&gt;${project.basedir}/src/template/resources&lt;/directory&gt;
</span><span class='line'>                                  &lt;targetPath&gt;${project.basedir}/src/main/resources&lt;/targetPath&gt;
</span><span class='line'>                                  &lt;filtering&gt;true&lt;/filtering&gt;
</span><span class='line'>                              &lt;/resource&gt;
</span><span class='line'>                          &lt;/resources&gt;
</span><span class='line'>                      &lt;/configuration&gt;
</span><span class='line'>                  &lt;/execution&gt;
</span><span class='line'>              &lt;/executions&gt;
</span><span class='line'>          &lt;/plugin&gt;
</span><span class='line'>          &lt;plugin&gt;
</span><span class='line'>              &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;
</span><span class='line'>              &lt;artifactId&gt;maven-surefire-plugin&lt;/artifactId&gt;
</span><span class='line'>              &lt;version&gt;2.7.1&lt;/version&gt;
</span><span class='line'>              &lt;configuration&gt;
</span><span class='line'>                  &lt;argLine&gt;-Xmx1024m -Xms1024m&lt;/argLine&gt;
</span><span class='line'>                  &lt;suiteXmlFiles&gt;
</span><span class='line'>                      &lt;suiteXmlFile&gt;Test.xml&lt;/suiteXmlFile&gt;
</span><span class='line'>                  &lt;/suiteXmlFiles&gt;
</span><span class='line'>              &lt;/configuration&gt;
</span><span class='line'>          &lt;/plugin&gt;
</span><span class='line'>          &lt;plugin&gt;
</span><span class='line'>              &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;
</span><span class='line'>              &lt;artifactId&gt;maven-compiler-plugin&lt;/artifactId&gt;
</span><span class='line'>              &lt;version&gt;3.1&lt;/version&gt;
</span><span class='line'>              &lt;configuration&gt;
</span><span class='line'>                  &lt;source&gt;1.5&lt;/source&gt;
</span><span class='line'>                  &lt;target&gt;1.5&lt;/target&gt;
</span><span class='line'>              &lt;/configuration&gt;
</span><span class='line'>          &lt;/plugin&gt;
</span><span class='line'>          &lt;plugin&gt;
</span><span class='line'>              &lt;groupId&gt;org.codehaus.mojo&lt;/groupId&gt;
</span><span class='line'>              &lt;artifactId&gt;sonar-maven-plugin&lt;/artifactId&gt;
</span><span class='line'>              &lt;version&gt;2.1&lt;/version&gt;
</span><span class='line'>          &lt;/plugin&gt;
</span><span class='line'>      &lt;/plugins&gt;
</span><span class='line'>  &lt;/build&gt;
</span><span class='line'>&lt;/project&gt;</span></code></pre></td></tr></table></div></figure>


<p>7) Right click in folder &lsquo;src&rsquo; &ndash;> New &ndash;> Folder &ndash;> name it as &lsquo;template&rsquo;</p>

<p><img src="http://tabaolan1987.github.io/images/mulb-3.png"></p>

<p>8) Right click in folder &lsquo;template&rsquo; &ndash;> New &ndash;> Folder &ndash;> name it as &lsquo;resources&rsquo;</p>

<p><img src="http://tabaolan1987.github.io/images/mulb-4.png"></p>

<p>9) Right click in folder &lsquo;resources&rsquo; &ndash;> New &ndash;> File &ndash;> name it as &lsquo;system.properties&rsquo;</p>

<p><img src="http://tabaolan1987.github.io/images/mulb-5.png"></p>

<p>10) Open file &lsquo;system.properties&rsquo; and copy the code below and paste to this file:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>project.basedir=${project.basedir}
</span><span class='line'>project.build.directory=${project.build.directory}</span></code></pre></td></tr></table></div></figure>


<p>11) Right click in your project &ndash;> Run as &ndash;> Maven generate-resources.</p>

<p><img src="http://tabaolan1987.github.io/images/mulb-6.png"></p>

<p>12) Right click in &lsquo;src/main/java&rsquo; &ndash;> New &ndash;> Package &ndash;> name it as &lsquo;com.selenium.util&rsquo;</p>

<p><img src="http://tabaolan1987.github.io/images/mulb-7.png"></p>

<p>13) Right click in package &lsquo;com.selenium.util&rsquo; &ndash;> New &ndash;> Class &ndash;> name it as &lsquo;DriverUtil&rsquo;</p>

<p><img src="http://tabaolan1987.github.io/images/mulb-8.png"></p>

<p>14) Double click on &lsquo;DriverUtil.java&rsquo; and paste the below code to it.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>package com.selenium.util;
</span><span class='line'>
</span><span class='line'>import java.io.File;
</span><span class='line'>import java.io.IOException;
</span><span class='line'>import java.util.Properties;
</span><span class='line'>
</span><span class='line'>public class DriverUtil {
</span><span class='line'>  public static final String PROP_PROJECT_BASE_DIR = "project.basedir";
</span><span class='line'>  public static final String FOLDER_DRIVER = "Driver";
</span><span class='line'>  public static final String DEFAULT_PROPERTIES = "system.properties";
</span><span class='line'>  private static Properties prod;
</span><span class='line'>  
</span><span class='line'>  /**
</span><span class='line'>   * @return the path of ie driver file.
</span><span class='line'>   */
</span><span class='line'>  public static String getIeDriver(){
</span><span class='line'>      String path = getKey(PROP_PROJECT_BASE_DIR) + File.separator + FOLDER_DRIVER 
</span><span class='line'>              + File.separator + "IEDriverServer.exe";
</span><span class='line'>      try {
</span><span class='line'>          File driverIe = new File(path);
</span><span class='line'>          if(driverIe.exists()){
</span><span class='line'>              return driverIe.getAbsolutePath();
</span><span class='line'>          }
</span><span class='line'>      } catch (Exception e) {
</span><span class='line'>          e.printStackTrace();
</span><span class='line'>          return null;
</span><span class='line'>      }
</span><span class='line'>      return null;    
</span><span class='line'>  }
</span><span class='line'>  
</span><span class='line'>  /**
</span><span class='line'>   * @return the path of chrome driver file
</span><span class='line'>   */
</span><span class='line'>  public static String getChromeDriver(){
</span><span class='line'>      String path = getKey(PROP_PROJECT_BASE_DIR) + File.separator + FOLDER_DRIVER 
</span><span class='line'>              + File.separator + "chromedriver.exe";
</span><span class='line'>      try {
</span><span class='line'>          File driverChrome = new File(path);
</span><span class='line'>          if(driverChrome.exists()){
</span><span class='line'>              return driverChrome.getAbsolutePath();
</span><span class='line'>          }
</span><span class='line'>      } catch (Exception e) {
</span><span class='line'>          e.printStackTrace();
</span><span class='line'>          return null;
</span><span class='line'>      }
</span><span class='line'>      return null;    
</span><span class='line'>  }
</span><span class='line'>  
</span><span class='line'>  /**
</span><span class='line'>   * @return load the file system.properties
</span><span class='line'>   */
</span><span class='line'>  public static Properties getProperties() {
</span><span class='line'>      if (prod == null) {
</span><span class='line'>          prod = new Properties();
</span><span class='line'>          try {
</span><span class='line'>              prod.load(DriverUtil.class.getClassLoader().getResourceAsStream(DEFAULT_PROPERTIES));
</span><span class='line'>          } catch (IOException e) {               
</span><span class='line'>              //
</span><span class='line'>          }
</span><span class='line'>      }
</span><span class='line'>      return prod;
</span><span class='line'>  }
</span><span class='line'>  
</span><span class='line'>  /**
</span><span class='line'>   * @param key
</span><span class='line'>   * @return get value of key
</span><span class='line'>   */
</span><span class='line'>  public static String getKey(String key) {
</span><span class='line'>      Object obj = getProperties().get(key);
</span><span class='line'>      String value = "";
</span><span class='line'>      if (obj != null) 
</span><span class='line'>          value = obj.toString();
</span><span class='line'>      return value;
</span><span class='line'>  }
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>15) Double click on &lsquo;autoTestFacebook.java&rsquo; and paste the code below to it.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>package com.selenium.test;
</span><span class='line'>
</span><span class='line'>import org.openqa.selenium.WebDriver;
</span><span class='line'>import org.openqa.selenium.chrome.ChromeDriver;
</span><span class='line'>import org.openqa.selenium.firefox.FirefoxDriver;
</span><span class='line'>import org.openqa.selenium.ie.InternetExplorerDriver;
</span><span class='line'>import org.testng.annotations.Parameters;
</span><span class='line'>import org.testng.annotations.Test;
</span><span class='line'>import org.testng.annotations.BeforeTest;
</span><span class='line'>import org.testng.annotations.AfterTest;
</span><span class='line'>
</span><span class='line'>import com.selenium.pageObject.LoginPage;
</span><span class='line'>import com.selenium.userAction.PostStatus;
</span><span class='line'>import com.selenium.userAction.SignIn;
</span><span class='line'>import com.selenium.util.DriverUtil;
</span><span class='line'>
</span><span class='line'>public class autoTestFacebook {
</span><span class='line'>  
</span><span class='line'>  /**
</span><span class='line'>   * Create WebDriver as static variable
</span><span class='line'>   */
</span><span class='line'>  private static WebDriver driver;
</span><span class='line'>  private static String username_login;
</span><span class='line'>  private static String password_login;
</span><span class='line'>  private static String status_facebook;
</span><span class='line'>  
</span><span class='line'>  /**
</span><span class='line'> * Setup some variable to run your script test, load from the file TestNg.xml
</span><span class='line'> * Your parameters in annotation Parameters will match with define in TestNG.xml 
</span><span class='line'> */
</span><span class='line'>@Parameters({"browser","status","username","password"})   
</span><span class='line'>@BeforeTest
</span><span class='line'>  public void beforeTest(String browser, String status, String username, String password) {
</span><span class='line'>   if(browser.equalsIgnoreCase("firefox")) {
</span><span class='line'>        driver = new FirefoxDriver();
</span><span class='line'>    }else if (browser.equalsIgnoreCase("ie")) { 
</span><span class='line'>        // Here I am setting up the path for my IEDriver
</span><span class='line'>        System.setProperty("webdriver.ie.driver", DriverUtil.getIeDriver());
</span><span class='line'>        driver = new InternetExplorerDriver();
</span><span class='line'>    }else if (browser.equalsIgnoreCase("chrome")){
</span><span class='line'>        System.setProperty("webdriver.chrome.driver", DriverUtil.getChromeDriver());
</span><span class='line'>        driver = new ChromeDriver();
</span><span class='line'>    } 
</span><span class='line'>   username_login = username;
</span><span class='line'>   status_facebook = status;
</span><span class='line'>   password_login = password;
</span><span class='line'>  }
</span><span class='line'>  
</span><span class='line'>  /**
</span><span class='line'> * your test script call action class here
</span><span class='line'> */
</span><span class='line'>@Test
</span><span class='line'>  public void f() {
</span><span class='line'>    LoginPage.loadPage(driver);
</span><span class='line'>    SignIn.Execute(driver, username_login, password_login);
</span><span class='line'>    PostStatus.Execute(driver, status_facebook);
</span><span class='line'>  }
</span><span class='line'>  
</span><span class='line'>  
</span><span class='line'>  /**
</span><span class='line'> * after run your script test , use this code to close your browser
</span><span class='line'> */
</span><span class='line'>@AfterTest
</span><span class='line'>  public void afterTest() {
</span><span class='line'>    driver.quit();
</span><span class='line'>  } 
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>16) Right Click in Project &ndash;> New &ndash;> File &ndash;> name it as &lsquo;TestNg.xml&rsquo;</p>

<p><img src="http://tabaolan1987.github.io/images/mulb-9.png"></p>

<p>17) Copy code below and paste to &lsquo;TestNg.xml&rsquo;. Remember to change the username and password in tag parameter. You can change the value of parallel to test &ndash;> it will run 3 browser in the same time.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;?xml version="1.0" encoding="UTF-8"?&gt;
</span><span class='line'>
</span><span class='line'>&lt;!DOCTYPE suite SYSTEM "http://testng.org/testng-1.0.dtd"&gt;
</span><span class='line'>
</span><span class='line'>&lt;suite name="Suite" parallel="none"&gt;
</span><span class='line'>
</span><span class='line'> &lt;test name="FirefoxTest"&gt;
</span><span class='line'>   &lt;parameter name="browser" value="firefox" /&gt;
</span><span class='line'>   &lt;parameter name="status" value="firefox" /&gt;
</span><span class='line'>   &lt;parameter name="username" value="yourusername" /&gt;
</span><span class='line'>   &lt;parameter name="password" value="yourpassword" /&gt;
</span><span class='line'>   &lt;classes&gt;
</span><span class='line'>   &lt;class name="com.selenium.test.autoTestFacebook" /&gt;
</span><span class='line'>   &lt;/classes&gt;
</span><span class='line'> &lt;/test&gt;
</span><span class='line'>
</span><span class='line'> &lt;test name="IETest"&gt;
</span><span class='line'> &lt;parameter name="username" value="yourusername" /&gt;
</span><span class='line'> &lt;parameter name="password" value="yourpassword" /&gt;
</span><span class='line'> &lt;parameter name="browser" value="ie" /&gt;
</span><span class='line'> &lt;parameter name="status" value="ie" /&gt;
</span><span class='line'> &lt;classes&gt;
</span><span class='line'> &lt;class name="com.selenium.test.autoTestFacebook" /&gt;
</span><span class='line'> &lt;/classes&gt;
</span><span class='line'> &lt;/test&gt;
</span><span class='line'> 
</span><span class='line'>&lt;test name="ChromeTest"&gt;
</span><span class='line'>  &lt;parameter name="username" value="yourusername" /&gt;
</span><span class='line'> &lt;parameter name="password" value="yourpassword" /&gt;
</span><span class='line'> &lt;parameter name="browser" value="chrome" /&gt;
</span><span class='line'>  &lt;parameter name="status" value="chrome" /&gt;
</span><span class='line'> &lt;classes&gt;
</span><span class='line'> &lt;class name="com.selenium.test.autoTestFacebook" /&gt;
</span><span class='line'> &lt;/classes&gt;
</span><span class='line'> &lt;/test&gt;
</span><span class='line'>&lt;/suite&gt;</span></code></pre></td></tr></table></div></figure>


<p>17) Right click in file &lsquo;TestNG.xml&rsquo; &ndash;> Run as &ndash;> TestNG Suite and wait for the process running.</p>

<p><img src="http://tabaolan1987.github.io/images/mulb-10.png"></p>

<p>18) Open folder &lsquo;Test-Output&rsquo; &ndash;> Open folder &lsquo;Suite&rsquo; &ndash; > You will see 3 file html &ndash;> open to see the report of each browser.</p>

<p><img src="http://tabaolan1987.github.io/images/mulb-11.png"></p>

<h3>Note : In this tutorial we have many knowledge so I recommend you to read the comment of code to know what it do.</h3>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Selenium Automation Framework P6 : Create Test Script]]></title>
    <link href="http://tabaolan1987.github.io/blog/2014/05/29/selenium-automation-framework-create-test-script/"/>
    <updated>2014-05-29T14:48:11+07:00</updated>
    <id>http://tabaolan1987.github.io/blog/2014/05/29/selenium-automation-framework-create-test-script</id>
    <content type="html"><![CDATA[<h2>Create Test Script using TestNG</h2>

<h3>Required knowledge : <a href="http://tabaolan1987.github.io/blog/2014/05/26/selenium-automation-framework-page-object-model/">Page Object Model</a>, <a href="http://tabaolan1987.github.io/blog/2014/05/27/selenium-automation-framework-modular-driven-framework/">Modular Driven Framework</a> , <a href="http://tabaolan1987.github.io/blog/categories/testng-framework/">TestNG Framework</a></h3>

<p>TestNG is a testing framework inspired from JUnit and NUnit but introducing some new functionalities that make it more powerful and easier to use. In simple words TestNG is a tool that help us to organize the tests and help us to produce the test reports. TestNG framework can be used for automation testing with Selenium (web application automation testing tool).</p>

<p>TestNG Advantages</p>

<ul>
<li><p>Multiple built in Annotations which are easier to use and understand</p></li>
<li><p>Test method can be dependent to other method</p></li>
<li><p>Test cases can be Grouped and can be execute separately by groups</p></li>
<li><p>Parallel testing is possible</p></li>
<li><p>TestNG has built in HTML report and XML report generation facility. It has also built in  logging facility</p></li>
</ul>


<!--more-->


<h4>How to do it&hellip;</h4>

<p>1) Right Click in &lsquo;src/test/java&rsquo; &ndash;> New &ndash;> Package &ndash;> name it as &lsquo;com.selenium.test&rsquo;</p>

<p><img src="http://tabaolan1987.github.io/images/testng-1.png"></p>

<p><img src="http://tabaolan1987.github.io/images/testng-2.png"></p>

<p>2) Right Click in package &lsquo;com.selenium.test&rsquo; &ndash;> TestNG &ndash;> Create TestNG Class.</p>

<p><img src="http://tabaolan1987.github.io/images/testng-3.png"></p>

<p>3) Name your class as &lsquo;autoTestFacebook&rsquo; and tick on &lsquo;BeforeTest&rsquo; and &lsquo;AfterTest&rsquo; option.</p>

<p><img src="http://tabaolan1987.github.io/images/testng-4.png"></p>

<p>4) Double click in &lsquo;autoTestFacebook&rsquo; to open it. Copy and paste the code below to this.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>package com.selenium.test;
</span><span class='line'>
</span><span class='line'>import org.openqa.selenium.WebDriver;
</span><span class='line'>import org.openqa.selenium.firefox.FirefoxDriver;
</span><span class='line'>import org.testng.annotations.Test;
</span><span class='line'>import org.testng.annotations.BeforeTest;
</span><span class='line'>import org.testng.annotations.AfterTest;
</span><span class='line'>
</span><span class='line'>import com.selenium.pageObject.LoginPage;
</span><span class='line'>import com.selenium.userAction.PostStatus;
</span><span class='line'>import com.selenium.userAction.SignIn;
</span><span class='line'>
</span><span class='line'>public class autoTestFacebook {
</span><span class='line'>  
</span><span class='line'>  /**
</span><span class='line'>   * Create WebDriver as static variable
</span><span class='line'>   */
</span><span class='line'>  private static WebDriver driver;
</span><span class='line'>  
</span><span class='line'>  
</span><span class='line'>  /**
</span><span class='line'> * Setup some variable to run your script test
</span><span class='line'> */
</span><span class='line'>@BeforeTest
</span><span class='line'>  public void beforeTest() {
</span><span class='line'>    driver = new FirefoxDriver();
</span><span class='line'>  }
</span><span class='line'>  
</span><span class='line'>  /**
</span><span class='line'> * your test script call action class here
</span><span class='line'> */
</span><span class='line'>@Test
</span><span class='line'>  public void f() {
</span><span class='line'>    LoginPage.loadPage(driver);
</span><span class='line'>    SignIn.Execute(driver, "gaumun", "63hamlong");
</span><span class='line'>    PostStatus.Execute(driver, "this is my status posted by my automation test");
</span><span class='line'>  }
</span><span class='line'>  
</span><span class='line'>  
</span><span class='line'>  /**
</span><span class='line'> * after run your script test , use this code to close your browser
</span><span class='line'> */
</span><span class='line'>@AfterTest
</span><span class='line'>  public void afterTest() {
</span><span class='line'>    driver.quit();
</span><span class='line'>  }
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>5) Right click on your class &ndash;> Run As &ndash;> TestNG Test.</p>

<p><img src="http://tabaolan1987.github.io/images/testng-5.png"></p>

<p>6) Wait for TestNG running and check the result of test in folder &lsquo;test-output&rsquo;</p>

<p><img src="http://tabaolan1987.github.io/images/testng-6.png"></p>

<h3>After this tutorial you are already have a project base on Selenium Framework. Take a look what you have done , you will see maintain this project is not hard. Your test script is very easy to know base on actually action of user.</h3>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Selenium Automation Framework P5 : Modular Driven Framework]]></title>
    <link href="http://tabaolan1987.github.io/blog/2014/05/27/selenium-automation-framework-modular-driven-framework/"/>
    <updated>2014-05-27T10:11:21+07:00</updated>
    <id>http://tabaolan1987.github.io/blog/2014/05/27/selenium-automation-framework-modular-driven-framework</id>
    <content type="html"><![CDATA[<h2>Modular Driven Framework</h2>

<h3>Required knowledge : <a href="http://tabaolan1987.github.io/blog/2014/05/26/selenium-automation-framework-page-object-model/">Page Object Model</a></h3>

<p>In most of the web application we have few set of actions which are always executed in the series of actions. Rather than writing those actions again and again in our test, we can club those actions in to a method and then calling that method in our test script. Modularity avoids duplicacy of code. In future if there is any change in the series of action, all you have to do is to make changes in your main modular method script. No test case will be impacted with the change.</p>

<!--more-->


<h3>How to do it..</h3>

<p>Look for repeated functionality in your application for example the &lsquo;login&rsquo; functionality. We can simple wrap this functionality in a method and we can give it a sensible name.</p>

<p>1) Create a &lsquo;New Package&rsquo; file and name it as &lsquo;userAction&rsquo;, by right click on the Project and select New > Package. We will be creating different packages for Page Objects, Utilities, Test Data, Test Cases and Modular actions. It is always recommended to use this structure, as it is easy to understand, easy to use and easy to maintain.</p>

<p><img src="http://tabaolan1987.github.io/images/pom-1.png"></p>

<p><img src="http://tabaolan1987.github.io/images/user-action-1.png"></p>

<p><img src="http://tabaolan1987.github.io/images/user-action-2.png"></p>

<p>2) Create &lsquo;New Class&rsquo; and name it as SignIn by right click on package &lsquo;userAction&rsquo; and select New > Class. It will add new class &lsquo;SignIn&rsquo; under package &lsquo;userAction&rsquo;.</p>

<p><img src="http://tabaolan1987.github.io/images/user-action-3.png"></p>

<p><img src="http://tabaolan1987.github.io/images/user-action-4.png"></p>

<p>3) Now create a Public Static Void Method and name it as Execute  and club the following steps in to it:</p>

<p>Load Page login Facebook</p>

<p>Enter Username</p>

<p>Enter Password</p>

<p>Click on the Submit button</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>package com.selenium.userAction;
</span><span class='line'>
</span><span class='line'>import org.openqa.selenium.WebDriver;
</span><span class='line'>
</span><span class='line'>import com.selenium.pageObject.LoginPage;
</span><span class='line'>
</span><span class='line'>public class SignIn {
</span><span class='line'>
</span><span class='line'>  /**
</span><span class='line'>   * @param driver
</span><span class='line'>   * @param username
</span><span class='line'>   * @param password
</span><span class='line'>   * execute login to facebook
</span><span class='line'>   */
</span><span class='line'>  public static void Execute(WebDriver driver , String username, String password) {
</span><span class='line'>      LoginPage.loadPage(driver);
</span><span class='line'>      LoginPage.txtbx_UserName(driver).sendKeys(username);
</span><span class='line'>      LoginPage.txtbx_Password(driver).sendKeys(password);
</span><span class='line'>      LoginPage.btn_LogIn(driver).click();
</span><span class='line'>  }
</span><span class='line'>
</span><span class='line'>}
</span></code></pre></td></tr></table></div></figure>


<p>4) Create &lsquo;New Class&rsquo; and name it as PostStatus by right click on package &lsquo;userAction&rsquo; and select New > Class. It will add new class &lsquo;PostStatus&rsquo; under package &lsquo;userAction&rsquo;.</p>

<p><img src="http://tabaolan1987.github.io/images/user-action-3.png"></p>

<p><img src="http://tabaolan1987.github.io/images/user-action-5.png"></p>

<p>5) Now create a Public Static Void Method and name it as Execute  and club the following steps in to it:</p>

<p>Enter Status</p>

<p>Click on button Post.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>package com.selenium.userAction;
</span><span class='line'>
</span><span class='line'>import org.openqa.selenium.WebDriver;
</span><span class='line'>
</span><span class='line'>import com.selenium.pageObject.HomePage;
</span><span class='line'>
</span><span class='line'>public class PostStatus {
</span><span class='line'>  
</span><span class='line'>  /**
</span><span class='line'>   * @param driver
</span><span class='line'>   * @param status
</span><span class='line'>   * execute post status in facebook
</span><span class='line'>   */
</span><span class='line'>  public static void Execute(WebDriver driver, String status){
</span><span class='line'>      HomePage.txt_status(driver).sendKeys(status);
</span><span class='line'>      HomePage.butt_post(driver).click();
</span><span class='line'>  }
</span><span class='line'>  
</span><span class='line'>}
</span></code></pre></td></tr></table></div></figure>


<h3>We are complete to create the actions next we will follow to create the first test with TestNG</h3>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Selenium Automation Framework P4 : Page Object Model]]></title>
    <link href="http://tabaolan1987.github.io/blog/2014/05/26/selenium-automation-framework-page-object-model/"/>
    <updated>2014-05-26T16:03:08+07:00</updated>
    <id>http://tabaolan1987.github.io/blog/2014/05/26/selenium-automation-framework-page-object-model</id>
    <content type="html"><![CDATA[<h2>Page Object Model | POM</h2>

<h3>Required knowledge : <a href="http://tabaolan1987.github.io/blog/categories/webdriver/">WebDriver</a>,<a href="http://tabaolan1987.github.io/blog/categories/xpath/">Xpath</a></h3>

<p>Creating Selenium test cases can result in an unmaintainable project. One of the reasons is that too many duplicated code is used. Duplicated code could be caused by duplicated functionality and this will result in duplicated usage of locators. The disadvantage of duplicated code is that the project is less maintainable. If some locator will change, you have to walk through the whole test code to adjust locators where necessary. By using the page object model we can make non-brittle test code and reduce or eliminate duplicate test code. Beside of that it improves the readability and allows us to create interactive documentation. Last but not least, we can create tests with less keystroke. An implementation of the page object model can be achieved by separating the abstraction of the test object and the test scripts.</p>

<!--more-->


<p>Note : We will try to create Login Page and Homepage follow website <a href="https://facebook.com">Facebook</a></p>

<h3>How to do it</h3>

<ol>
<li>Create a ‘New Package’ file and name it as ‘pageObjects’, by right click on the Project and select New > Package. We will be creating different packages for Page Objects, Utilities, Test Data, Test Cases and Modular actions. It is always recommended to use this structure, as it is easy to understand, easy to use and easy to maintain.</li>
</ol>


<p><img src="http://tabaolan1987.github.io/images/pom-1.png"></p>

<p><img src="http://tabaolan1987.github.io/images/pom-2.png"></p>

<p><img src="http://tabaolan1987.github.io/images/pom-3.png"></p>

<ol>
<li>Create a ‘New Class’ file and refer the name to the actual page from the test object, by right click on the above created Package and select New > Class. In our case it is Login Page.</li>
</ol>


<p><img src="http://tabaolan1987.github.io/images/pom-4.png"></p>

<p><img src="http://tabaolan1987.github.io/images/pom-5.png"></p>

<ol>
<li>Open URL : <a href="Https://facebook.com">Https://facebook.com</a> . Wait for page loading then we will use firebug to find the location elements of form login Facebook.</li>
</ol>


<p><img src="http://tabaolan1987.github.io/images/pom-6.png"></p>

<p>3.Now create a Static Method for each Element (Object) in the Login Page. Each method will have an Argument (driver) and a Return value (element).</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>package com.selenium.pageObject;
</span><span class='line'>
</span><span class='line'>import org.openqa.selenium.By;
</span><span class='line'>import org.openqa.selenium.WebDriver;
</span><span class='line'>import org.openqa.selenium.WebElement;
</span><span class='line'>
</span><span class='line'>import com.gargoylesoftware.htmlunit.ElementNotFoundException;
</span><span class='line'>
</span><span class='line'>public class LoginPage {
</span><span class='line'>  
</span><span class='line'>   /**
</span><span class='line'>   * WebElement element 
</span><span class='line'>   */
</span><span class='line'>  private static WebElement element = null;
</span><span class='line'>  
</span><span class='line'>  /**
</span><span class='line'>   * @param driver
</span><span class='line'>   * @return let driver load the login page of facebook
</span><span class='line'>   * @throws InterruptedException
</span><span class='line'>   */
</span><span class='line'>  public static WebDriver loadPage(WebDriver driver) {
</span><span class='line'>      driver.get("https://facebook.com");
</span><span class='line'>      return driver;
</span><span class='line'>  }
</span><span class='line'>   
</span><span class='line'>  
</span><span class='line'>  /**
</span><span class='line'>   * @param driver
</span><span class='line'>   * 
</span><span class='line'>   * @return the textbox username of login form facebook
</span><span class='line'>   */
</span><span class='line'>  public static WebElement txtbx_UserName(WebDriver driver) throws ElementNotFoundException{
</span><span class='line'>      element = driver.findElement(By.id("email"));
</span><span class='line'>      return element;
</span><span class='line'>  }
</span><span class='line'>  
</span><span class='line'>  /**
</span><span class='line'>   * @param driver
</span><span class='line'>   * @return the textbox passwork of login form facebook
</span><span class='line'>   */
</span><span class='line'>  public static WebElement txtbx_Password(WebDriver driver) throws ElementNotFoundException{
</span><span class='line'>      element = driver.findElement(By.id("pass"));
</span><span class='line'>      return element;
</span><span class='line'>  }
</span><span class='line'>  
</span><span class='line'>  /**
</span><span class='line'>   * @param driver
</span><span class='line'>   * @return the button login of login form facebook
</span><span class='line'>   */
</span><span class='line'>  public static WebElement btn_LogIn(WebDriver driver) throws ElementNotFoundException{
</span><span class='line'>      element = driver.findElement(By.id("loginbutton"));
</span><span class='line'>      return element;
</span><span class='line'>  }
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<ol>
<li>Create a ‘New Class’ file and refer the name to the actual page from the test object, by right click on the above created Package and select New > Class. In our case it is Home Page.</li>
</ol>


<p><img src="http://tabaolan1987.github.io/images/pom-1.png"></p>

<p><img src="http://tabaolan1987.github.io/images/pom-7.png"></p>

<ol>
<li>Open URL : <a href="Https://facebook.com">Https://facebook.com</a> &ndash;> login in &ndash; use xpath to find element location (textarena to post status and button for post).</li>
</ol>


<p><img src="http://tabaolan1987.github.io/images/pom-8.png"></p>

<p>8.Now create a Static Method for each Element (Object) in the Home Page. Each method will have an Argument (driver) and a Return value (element).</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>package com.selenium.pageObject;
</span><span class='line'>
</span><span class='line'>import org.openqa.selenium.By;
</span><span class='line'>import org.openqa.selenium.WebDriver;
</span><span class='line'>import org.openqa.selenium.WebElement;
</span><span class='line'>
</span><span class='line'>public class HomePage {
</span><span class='line'>
</span><span class='line'>  /**
</span><span class='line'>   * WebElement
</span><span class='line'>   */
</span><span class='line'>  private static WebElement element;
</span><span class='line'>  
</span><span class='line'>  /**
</span><span class='line'>   * @param driver
</span><span class='line'>   * @return textbox update status element
</span><span class='line'>   */
</span><span class='line'>  public static WebElement txt_status(WebDriver driver) {
</span><span class='line'>      element = driver.findElement(By.xpath("//div[@id='pagelet_composer']/div/div/div/form[1]/div[1]/div[2]/div/div/div[2]/div/div/textarea"));
</span><span class='line'>      return element;
</span><span class='line'>  }
</span><span class='line'>  
</span><span class='line'>  /**
</span><span class='line'>   * @param driver
</span><span class='line'>   * @return button to post status
</span><span class='line'>   */
</span><span class='line'>  public static WebElement butt_post(WebDriver driver){
</span><span class='line'>      element = driver.findElement(By.xpath("//div[@id='pagelet_composer']/div/div/div/form[1]/div[1]/div[4]/div/ul/li[3]/button"));
</span><span class='line'>      return element;
</span><span class='line'>  }
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<h3>We are finish to create a Login Page , Home Page follow Page Object Model . Now you will need to create an Action in Java base on User Define, please <a href="">click here</a></h3>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Selenium Automation Framework P3 : Create New Project]]></title>
    <link href="http://tabaolan1987.github.io/blog/2014/05/26/selenium-automation-framework-create-new-project/"/>
    <updated>2014-05-26T15:01:18+07:00</updated>
    <id>http://tabaolan1987.github.io/blog/2014/05/26/selenium-automation-framework-create-new-project</id>
    <content type="html"><![CDATA[<h2>Create new Project</h2>

<h3>Required knowledge : <a href="http://maven.apache.org/guides/getting-started/maven-in-five-minutes.html">Maven Project</a></h3>

<p>Maven project is very helpful for us to automate download jar file and manage the version we used, easy to build , easy to configuration with Continuous Integration.</p>

<!--more-->


<p>Now we will create a project Maven name &ldquo;Selenium-Automation-Framework&rdquo;.</p>

<h4>Step 1 : Open eclipse &ndash;> Choose File menu &ndash;> Choose New &ndash;> Choose Other..</h4>

<p><img src="http://tabaolan1987.github.io/images/c-maven-1.png"></p>

<h4>Step 2 : Find Maven &ndash;> Choose Maven Project &ndash;> Click &lsquo;Next&rsquo; button</h4>

<p><img src="http://tabaolan1987.github.io/images/c-maven-2.png"></p>

<h4>Step 3 : Tick on  &ldquo;Create a simple project&rdquo; , &ldquo;Use default workspace&rdquo;</h4>

<p><img src="http://tabaolan1987.github.io/images/c-maven-3.png"></p>

<h4>Step 4 : Enter value for &ldquo;Group ID&rdquo; and  &ldquo;Artifact ID&rdquo; . Then click &ldquo;Finish&rdquo;.</h4>

<p><img src="http://tabaolan1987.github.io/images/c-maven-4.png"></p>

<h4>Step 5 : The new Project &ldquo;Selenium-Automation-Framework&rdquo; will show in the left menu of Eclipse.</h4>

<p><img src="http://tabaolan1987.github.io/images/c-maven-5.png"></p>

<h2>Configuration Project</h2>

<p>First you need to configuration the pom.xml file to add library required by Selenium.</p>

<h4>Step 1 : Open project &ndash;> Double click to file &ldquo;pom.xml&rdquo;</h4>

<p><img src="http://tabaolan1987.github.io/images/c-maven-6.png"></p>

<h4>Stemp 2 : Copy this code and paste into your pom.xml file</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"&gt;
</span><span class='line'>  &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;
</span><span class='line'>  &lt;groupId&gt;Selenium-Automation-Framework&lt;/groupId&gt;
</span><span class='line'>  &lt;artifactId&gt;Selenium-Framework&lt;/artifactId&gt;
</span><span class='line'>  &lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt;
</span><span class='line'>      &lt;dependencies&gt;
</span><span class='line'>      &lt;dependency&gt;
</span><span class='line'>          &lt;groupId&gt;org.seleniumhq.selenium&lt;/groupId&gt;
</span><span class='line'>          &lt;artifactId&gt;selenium-java&lt;/artifactId&gt;
</span><span class='line'>          &lt;version&gt;2.41.0&lt;/version&gt;
</span><span class='line'>      &lt;/dependency&gt;
</span><span class='line'>      &lt;dependency&gt;
</span><span class='line'>          &lt;groupId&gt;org.seleniumhq.selenium&lt;/groupId&gt;
</span><span class='line'>          &lt;artifactId&gt;selenium-server&lt;/artifactId&gt;
</span><span class='line'>          &lt;version&gt;2.41.0&lt;/version&gt;
</span><span class='line'>      &lt;/dependency&gt;
</span><span class='line'>      &lt;dependency&gt;
</span><span class='line'>          &lt;groupId&gt;org.seleniumhq.selenium&lt;/groupId&gt;
</span><span class='line'>          &lt;artifactId&gt;selenium-firefox-driver&lt;/artifactId&gt;
</span><span class='line'>          &lt;version&gt;2.41.0&lt;/version&gt;
</span><span class='line'>      &lt;/dependency&gt;
</span><span class='line'>      &lt;dependency&gt;
</span><span class='line'>          &lt;groupId&gt;org.seleniumhq.selenium&lt;/groupId&gt;
</span><span class='line'>          &lt;artifactId&gt;selenium-chrome-driver&lt;/artifactId&gt;
</span><span class='line'>          &lt;version&gt;2.41.0&lt;/version&gt;
</span><span class='line'>      &lt;/dependency&gt;
</span><span class='line'>      &lt;dependency&gt;
</span><span class='line'>          &lt;groupId&gt;org.seleniumhq.selenium&lt;/groupId&gt;
</span><span class='line'>          &lt;artifactId&gt;selenium-remote-driver&lt;/artifactId&gt;
</span><span class='line'>          &lt;version&gt;2.41.0&lt;/version&gt;
</span><span class='line'>      &lt;/dependency&gt;
</span><span class='line'>      &lt;dependency&gt;
</span><span class='line'>          &lt;groupId&gt;org.seleniumhq.selenium&lt;/groupId&gt;
</span><span class='line'>          &lt;artifactId&gt;selenium-ie-driver&lt;/artifactId&gt;
</span><span class='line'>          &lt;version&gt;2.41.0&lt;/version&gt;
</span><span class='line'>      &lt;/dependency&gt;
</span><span class='line'>      &lt;dependency&gt;
</span><span class='line'>          &lt;groupId&gt;junit&lt;/groupId&gt;
</span><span class='line'>          &lt;artifactId&gt;junit&lt;/artifactId&gt;
</span><span class='line'>          &lt;version&gt;4.11&lt;/version&gt;
</span><span class='line'>      &lt;/dependency&gt;
</span><span class='line'>       &lt;dependency&gt;
</span><span class='line'>            &lt;groupId&gt;org.apache.poi&lt;/groupId&gt;
</span><span class='line'>            &lt;artifactId&gt;poi&lt;/artifactId&gt;
</span><span class='line'>            &lt;version&gt;3.10-FINAL&lt;/version&gt;
</span><span class='line'>        &lt;/dependency&gt;
</span><span class='line'>        &lt;dependency&gt;
</span><span class='line'>            &lt;groupId&gt;org.testng&lt;/groupId&gt;
</span><span class='line'>            &lt;artifactId&gt;testng&lt;/artifactId&gt;
</span><span class='line'>            &lt;version&gt;6.8.8&lt;/version&gt;
</span><span class='line'>        &lt;/dependency&gt;
</span><span class='line'>  &lt;/dependencies&gt;
</span><span class='line'>&lt;/project&gt;
</span></code></pre></td></tr></table></div></figure>


<p>By adding this code , we are telling to maven that we will use jar files that we define in the tag <dependency>.</p>

<h4>Step 3 : Right click into project and choose Maven &ndash;> Update project.</h4>

<p><img src="http://tabaolan1987.github.io/images/c-maven-7.png"></p>

<h4>Step 4 : Click &ldquo;Ok&rdquo; button to let Maven download jar files.</h4>

<p><img src="http://tabaolan1987.github.io/images/c-maven-8.png"></p>

<h4>Step 5 : Open the &ldquo;Maven dependencies&rdquo; to see jar file are available in your project.</h4>

<p><img src="http://tabaolan1987.github.io/images/c-maven-9.png"></p>

<h3>Note : you will need to have an internet in your laptop to allow the download of maven.</h3>

<p>Now the setup and configuration is done , you are able to start writing Selenium Automation Framework.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Selenium Automation Framework P2 : Install Maven to Eclipse]]></title>
    <link href="http://tabaolan1987.github.io/blog/2014/05/26/selenium-automation-framework-install-maven-to-eclipse/"/>
    <updated>2014-05-26T14:14:07+07:00</updated>
    <id>http://tabaolan1987.github.io/blog/2014/05/26/selenium-automation-framework-install-maven-to-eclipse</id>
    <content type="html"><![CDATA[<h2>Maven plugin for Eclipse</h2>

<p>You can install Maven plugin for Eclipse via update site, simply copy the above update site link address and paste it into Eclipse’s “Update” or “Install New Software” manager as explained below.</p>

<!--more-->


<h3>Step 1 :</h3>

<p>Installing m2eclipse is fairly simple. Start Eclipse then go to: Help &ndash;> Install New Software</p>

<p>Copy this link <a href="http://download.eclipse.org/technology/m2e/releases">http://download.eclipse.org/technology/m2e/releases</a> for the latest Stable Release into Eclipse and hit Enter.</p>

<p><img src="http://tabaolan1987.github.io/images/maven-plugin-eclipse-1.jpeg"></p>

<p>When the site loads, select the features to install, or click the Select All button. For our requirement select “Maven Integration for Eclipse” as shown above.</p>

<p>Checking [x] Contact all update sites during install to find required software might take sometime and this is optional.</p>

<h3>Step 2 :</h3>

<p>Click Next to view Installation Details.</p>

<p>Click Next to agree the license terms, and click Finish.</p>

<h3>Step 3 :</h3>

<p>If you get any warning message when installing, click OK to continue.</p>

<p><img src="http://tabaolan1987.github.io/images/maven-plugin-eclipse-2.jpg"></p>

<p>This will take few minutes to install the Maven plugin and once done restart the Eclipse.</p>

<p><img src="http://tabaolan1987.github.io/images/maven-3.jpg"></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Selenium Automation Framework P1 : Introduction]]></title>
    <link href="http://tabaolan1987.github.io/blog/2014/05/26/selenium-automation-framework-introduction/"/>
    <updated>2014-05-26T14:07:59+07:00</updated>
    <id>http://tabaolan1987.github.io/blog/2014/05/26/selenium-automation-framework-introduction</id>
    <content type="html"><![CDATA[<h2>Selenium Automation Framework</h2>

<h3>Introduction</h3>

<p>Mission critical software undergoes rigorous functional tests, especially supported by automated testing frameworks. Automating these frameworks and maintaining quality software releases are critical to business performance. Enterprises often face the dilemma of balancing costs and managing resources to ensure that automation frameworks cover all the business scenarios and the applications delivered are error – free.
By implementing the appropriate automated testing framework, enterprises can significantly increase the speed and accuracy of the testing process, provide a higher return on investment (ROI) from software projects and systematically minimize risk.</p>

<!--more-->


<h3>Why Framework</h3>

<p>A framework defines the organization’s way of doing things – a ‘Single Standard’. Following this standard would result in the project team achieving:</p>

<h4>Script-less representation of Automated tests</h4>

<p>The testing framework should offer point-and-click interface for accessing and interacting with the application components under test—as opposed to presenting line after line of scripting. Testers should be able to visualize each step of the business scenario, view and edit test cases intuitively. This will shorten the learning curve for testers and help QA teams meet deadlines.</p>

<h4>Data Driven tests</h4>

<p>A key benefit of automating functional testing is the ability to test large volumes of data on the system quickly. But you must be able to manipulate the data sets, perform calculations, and quickly create hundreds of test iterations and permutations with minimal effort. Test Automation Frameworks must have capability to integrate with spreadsheets and provide powerful calculation features.</p>

<h4>Concise Reporting</h4>

<p>The ability to run high volume of tests is of little benefit if the results of the tests are not easy to understand. The framework must automatically generate reports of the test run and show the results in an easy-to-read format. The reports should provide specifics about where application failures occurred and what test data was used. Reports must present application screen shots for every step to highlight any discrepancies and provide detailed explanations of each checkpoint pass and failure. Reports must also be easily shared across the entire QA and development teams.</p>

<h4>Standard Scripting and Team Consistency</h4>

<p>Scripting standard should be maintained across the framework library creation, which includes business components, system communications, data check points, loggers, reporters etc. Project team should follow the defined scripting standards. Published standards across the project team pre-empt the effort involved in duplicate coding, which prevent individuals from following their own coding standards.</p>

<h4>Encapsulation from Complexities</h4>

<p>Test engineers are encapsulated from the complexities and critical aspects of the code. Engineers are exposed only to the implemented libraries and tests are executed by just invoking the libraries.</p>

<h4>Implement and Maximize Re-Usability</h4>

<p>Establish the developed libraries across the organization/project team/product team, i.e. publish the library and provide access rights. Utilities/components shared across the team. Usage of available libraries. Minimized effort for repeated regression cycle.</p>

<h3>Class Diagram</h3>

<p><img src="http://tabaolan1987.github.io/images/diagram.png"></p>

<p>What does this look like in code? How would we best accomplish this task? Well, that depends on what you are doing. For example, maybe you need to test 5 different types of projects, or maybe you need to test same page differently each time. Either way, as a coding standard, you should always design classes with a specific purpose. Anything that is shared should go into a base class for common functionality.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[TestNG Framework P9 : Multi Browser and Parallel Testing]]></title>
    <link href="http://tabaolan1987.github.io/blog/2014/05/26/testng-framework-multi-browser-and-parallel-testing/"/>
    <updated>2014-05-26T12:15:47+07:00</updated>
    <id>http://tabaolan1987.github.io/blog/2014/05/26/testng-framework-multi-browser-and-parallel-testing</id>
    <content type="html"><![CDATA[<h2>Multi Browser, Cross Browser &amp; Parallel Testing using TestNG</h2>

<p>When the time comes to turn your site from mock-up to something fully functional, you’ll want to make sure that it works great for everyone visiting your site whether they’re using Internet Explorer, Firefox, or any other browser. Testing your website with multiple combinations of browsers is known as Cross Browser testing.</p>

<p>Your site will look different in different browsers. That’s because browsers understand some code slightly differently. Your designer should be testing to make sure that your site works well in all modern browsers. But as a tester we need to make sure that functionality should at least tested on Internet Explorer, Firefox, Safari &amp; Google Chrome browser.</p>

<!--more-->


<h3>Multi Browser Testing using Selenium TestNG</h3>

<p>In every project it is required to perform multi-browser testing to make sure that the functionality is working as expected with every browser to give equal user experience to all of the wide range of audience. It takes a considerable time to test everything on every browser and when we have used automation to reduce the testing efforts then why don’t we perform the multi-browser testing using automation. TestNG gives us functionality to perform same test on different browsers in a simple and easy way.</p>

<h4>How to do it…</h4>

<p>1)Create your Script to test a LogIn application using TestNG class.</p>

<p>2) Pass ‘Browser Type’ as parameters using TestNG annotations to the before method of the TestNG class. This method will launch only the browser, which will be provided as parameter.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>package automationFramework;
</span><span class='line'>
</span><span class='line'>import org.openqa.selenium.By;
</span><span class='line'>import org.openqa.selenium.WebDriver;
</span><span class='line'>import org.openqa.selenium.firefox.FirefoxDriver;
</span><span class='line'>import org.openqa.selenium.ie.InternetExplorerDriver;
</span><span class='line'>import org.testng.annotations.AfterClass;
</span><span class='line'>import org.testng.annotations.BeforeClass;
</span><span class='line'>import org.testng.annotations.Parameters;
</span><span class='line'>import org.testng.annotations.Test;
</span><span class='line'>
</span><span class='line'>public class MultiBrowser {
</span><span class='line'>  public WebDriver driver;
</span><span class='line'>  
</span><span class='line'>  @Parameters("browser")
</span><span class='line'>  @BeforeClass
</span><span class='line'>  // Passing Browser parameter from TestNG xml
</span><span class='line'>  public void beforeTest(String browser) {
</span><span class='line'>  // If the browser is Firefox, then do this
</span><span class='line'>  if(browser.equalsIgnoreCase("firefox")) {
</span><span class='line'>    driver = new FirefoxDriver();
</span><span class='line'>  // If browser is IE, then do this     
</span><span class='line'>  }else if (browser.equalsIgnoreCase("ie")) { 
</span><span class='line'>    // Here I am setting up the path for my IEDriver
</span><span class='line'>    System.setProperty("webdriver.ie.driver", "D:\OnlineStore\drivers\IEDriverServer.exe");
</span><span class='line'>    driver = new InternetExplorerDriver();
</span><span class='line'>  } 
</span><span class='line'>  // Doesn't the browser type, lauch the Website
</span><span class='line'>   driver.get("https://www.facebook.com");
</span><span class='line'>  }
</span><span class='line'>  
</span><span class='line'>  // Once Before method is completed, Test method will start
</span><span class='line'>  @Test public void login() throws InterruptedException {
</span><span class='line'>      driver.findElement(By.id("email")).sendKeys("your username");
</span><span class='line'>      driver.findElement(By.id("pass")).sendKeys("your password");
</span><span class='line'>      driver.findElement(By.id("loginbutton")).click();
</span><span class='line'>      driver.quit();
</span><span class='line'>  }  
</span><span class='line'>
</span><span class='line'>  @AfterClass public void afterTest() {
</span><span class='line'>      driver.quit();
</span><span class='line'>  }
</span><span class='line'>}
</span></code></pre></td></tr></table></div></figure>


<p>3) Create a TestNG XML for running your test. Configure the TestNG XML for passing parameters i.e. to tell which browser should be used for Running the Test.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;?xml version="1.0" encoding="UTF-8"?&gt;
</span><span class='line'>
</span><span class='line'>&lt;!DOCTYPE suite SYSTEM "http://testng.org/testng-1.0.dtd"&gt;
</span><span class='line'>
</span><span class='line'>&lt;suite name="Suite" parallel="none"&gt;
</span><span class='line'> &lt;test name="FirefoxTest"&gt;
</span><span class='line'> &lt;parameter name="browser" value="firefox" /&gt;
</span><span class='line'> &lt;classes&gt;
</span><span class='line'> &lt;class name="automationFramework.MultiBrowser" /&gt;
</span><span class='line'> &lt;/classes&gt;
</span><span class='line'> &lt;/test&gt;
</span><span class='line'>
</span><span class='line'> &lt;test name="IETest"&gt;
</span><span class='line'> &lt;parameter name="browser" value="ie" /&gt;
</span><span class='line'> &lt;classes&gt;
</span><span class='line'> &lt;class name="automationFramework.MultiBrowser" /&gt;
</span><span class='line'> &lt;/classes&gt;
</span><span class='line'> &lt;/test&gt;
</span><span class='line'>&lt;/suite&gt;
</span></code></pre></td></tr></table></div></figure>


<p> Note: You can set any number of Browsers here and just for the example purpose I have set up only two main browsers.</p>

<p>4) Now it’s time to run the xml. Run the test by right click on the testng.xml file and select Run As > TestNG Suite.</p>

<p><img src="http://tabaolan1987.github.io/images/TestNG-MultiBrowser-1.png"></p>

<p>Note: TestNg will execute the test one by one. You may like to perform parallel tests, next topic will cover that.</p>

<h3>Parallel Tests using TestNG</h3>

<p>Using the feature provided by TestNG for Parallel Executions. just take the above example for Sign In application with two different browsers. This time all we want is to execute test in both browsers simultaneously.</p>

<p>Now just set the ‘parallel‘ attribute to ‘tests‘ in the above used xml and give a run again. This time you will notice that your both browsers will open almost simultaneously and your test will run in parallel.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;?xml version="1.0" encoding="UTF-8"?&gt;
</span><span class='line'>
</span><span class='line'>&lt;!DOCTYPE suite SYSTEM "http://testng.org/testng-1.0.dtd"&gt;
</span><span class='line'>
</span><span class='line'>&lt;suite name="Suite" parallel="tests"&gt;
</span><span class='line'> &lt;test name="FirefoxTest"&gt;
</span><span class='line'> &lt;parameter name="browser" value="firefox" /&gt;
</span><span class='line'> &lt;classes&gt;
</span><span class='line'> &lt;class name="automationFramework.MultiBrowser" /&gt;
</span><span class='line'> &lt;/classes&gt;
</span><span class='line'> &lt;/test&gt;
</span><span class='line'>
</span><span class='line'> &lt;test name="IETest"&gt;
</span><span class='line'> &lt;parameter name="browser" value="ie" /&gt;
</span><span class='line'> &lt;classes&gt;
</span><span class='line'> &lt;class name="automationFramework.MultiBrowser" /&gt;
</span><span class='line'> &lt;/classes&gt;
</span><span class='line'> &lt;/test&gt;
</span><span class='line'>&lt;/suite&gt;
</span></code></pre></td></tr></table></div></figure>


<p>Note: You may see some intermittent issues using parallel testing. I will not recommend you this rather run one by one only.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[TestNG Framework P8 : Parameters and Data Provider]]></title>
    <link href="http://tabaolan1987.github.io/blog/2014/05/26/testng-framework-parameters-and-data-provider/"/>
    <updated>2014-05-26T12:05:31+07:00</updated>
    <id>http://tabaolan1987.github.io/blog/2014/05/26/testng-framework-parameters-and-data-provider</id>
    <content type="html"><![CDATA[<h2>TestNG Parameters &amp; Data Provider</h2>

<h3>TestNG Parameters</h3>

<p>Everybody knows the importance of Parameterization in testing and in automation testing. It allows us to automatically run a test case multiple times with different input and validation values. As Selenium Webdriver is more an automated testing framework than a ready-to-use tool, you will have to put in some effort to support data driven testing in your automated tests. I usually prefer to use Microsoft Excel as the format for storing my parameters but so many of my followers have requested to write an article on TestNG Data Provider.</p>

<p>TestNG again gives us another interesting feature called TestNG Parameters. TestNG lets you pass parameters directly to your test methods with your testng.xml.</p>

<!--more-->


<h4>How to do it…</h4>

<p>Let me take a very simple example of LogIn application, where the username and password is required to clear the authentication.</p>

<p>1) Create a test on my demo OnlineStore application to perform LogIn which takes the two string argument as username &amp; password.</p>

<p>2) Provide Username &amp; Password as parameter using TestNG Annotation.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>package automationFramework;
</span><span class='line'>
</span><span class='line'>import java.util.concurrent.TimeUnit;
</span><span class='line'>
</span><span class='line'>import org.openqa.selenium.By;
</span><span class='line'>import org.openqa.selenium.WebDriver;
</span><span class='line'>import org.openqa.selenium.firefox.FirefoxDriver;
</span><span class='line'>import org.testng.annotations.Test;
</span><span class='line'>
</span><span class='line'>import org.testng.annotations.Parameters;
</span><span class='line'>
</span><span class='line'>public class TestngParameters {
</span><span class='line'>  private static WebDriver driver;
</span><span class='line'>  @Test 
</span><span class='line'>  @Parameters({ "sUsername", "sPassword" })
</span><span class='line'>  public void test(String sUsername, String sPassword) {
</span><span class='line'>    driver = new FirefoxDriver();
</span><span class='line'>      driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);
</span><span class='line'>      driver.get("https://www.facebook.com");
</span><span class='line'>      driver.findElement(By.id("email")).sendKeys(sUsername);
</span><span class='line'>      driver.findElement(By.id("pass")).sendKeys(sPassword);
</span><span class='line'>      driver.findElement(By.id("loginbutton")).click();
</span><span class='line'>      driver.quit();
</span><span class='line'>  }
</span><span class='line'>}
</span></code></pre></td></tr></table></div></figure>


<p>3) The parameter would be passed values from testng.xml which we will see in the next step.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;suite name="Suite"&gt;
</span><span class='line'>    &lt;test name="ToolsQA"&gt;
</span><span class='line'>  &lt;parameter name="sUsername" value="yourusername"/&gt;
</span><span class='line'>  &lt;parameter name="sPassword" value="yourpassword"/&gt;
</span><span class='line'>      &lt;classes&gt;
</span><span class='line'>          &lt;class name="automationFramework.TestngParameters" /&gt;
</span><span class='line'>      &lt;/classes&gt;
</span><span class='line'>    &lt;/test&gt;
</span><span class='line'>&lt;/suite&gt;
</span></code></pre></td></tr></table></div></figure>


<p>Now, run the testng.xml, which will run the parameterTest method. TestNG will try to find a parameter named sUsername &amp; sPassword.</p>

<h3>TestNG DataProviders</h3>

<p>When you need to pass complex parameters or parameters that need to be created from Java (complex objects, objects read from a property file or a database, etc…), in such cases parameters can be passed using Dataproviders. A Data Provider is a method annotated with @DataProvider. A Data Provider returns an array of objects.</p>

<p>Let us check out the same Sign In examples using Dataproviders.</p>

<h4>How to do it…</h4>

<p>1)  Define the method credentials() which is defined as a Dataprovider using the annotation. This method returns array of object array.</p>

<p>2) Add a method test() to your DataProviderTest class. This method takes two strings as input parameters.</p>

<p>3) Add the annotation @Test(dataProvider = “Authentication”) to this method. The attribute dataProvider is mapped to “Authentication”.</p>

<p>Test will look like this:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>package automationFramework;
</span><span class='line'>
</span><span class='line'>import java.util.concurrent.TimeUnit;
</span><span class='line'>
</span><span class='line'>import org.openqa.selenium.By;
</span><span class='line'>import org.openqa.selenium.WebDriver;
</span><span class='line'>import org.openqa.selenium.firefox.FirefoxDriver;
</span><span class='line'>import org.testng.annotations.DataProvider;
</span><span class='line'>import org.testng.annotations.Test;
</span><span class='line'>
</span><span class='line'>public class DataProviderTest {
</span><span class='line'>  private static WebDriver driver;
</span><span class='line'>  
</span><span class='line'>  @DataProvider(name = "Authentication")
</span><span class='line'>  public static Object[][] credentials() {
</span><span class='line'>        return new Object[][] { { "yourusername", "yourpassword" }, { "yourusername_another", "yourpassword_another" }};
</span><span class='line'>  }
</span><span class='line'>  
</span><span class='line'>  // Here we are calling the Data Provider object with its Name
</span><span class='line'>  @Test(dataProvider = "Authentication")
</span><span class='line'>  public void test(String sUsername, String sPassword) {
</span><span class='line'>     driver = new FirefoxDriver();
</span><span class='line'>      driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);
</span><span class='line'>      driver.get("https://www.facebook.com");
</span><span class='line'>      driver.findElement(By.id("email")).sendKeys(sUsername);
</span><span class='line'>      driver.findElement(By.id("pass")).sendKeys(sPassword);
</span><span class='line'>      driver.findElement(By.id("loginbutton")).click();
</span><span class='line'>      driver.quit();
</span><span class='line'>  }
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>Run the test by right click on the test case script and select Run As > TestNG Test. Give it few minutes to complete the execution, once it is finished the results will look like this in the TestNg Result window.</p>

<p>Note: As the test data is provided two times, the above test executed two times completely.</p>

<h3>Take a look in : <a href="http://tabaolan1987.github.io/blog/2014/05/26/testng-framework-multi-browser-and-parallel-testing/">P9 : Multi Browser and Parallel Testing</a></h3>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[TestNG Framework P7 : Reporters and Asserts ]]></title>
    <link href="http://tabaolan1987.github.io/blog/2014/05/26/testng-framework-reporters-and-asserts/"/>
    <updated>2014-05-26T11:55:48+07:00</updated>
    <id>http://tabaolan1987.github.io/blog/2014/05/26/testng-framework-reporters-and-asserts</id>
    <content type="html"><![CDATA[<h2>TestNG Reporters &amp; Asserts</h2>

<h3>TestNG Reporters</h3>

<p>TestNG is a Framework and so far we have already seen the many different powerful features of TestNG. It almost gives you all the important things you are required to complete the Framework.</p>

<!--more-->


<h3>TestNG Reporter Logs</h3>

<p>TestNG also gives us the logging facility for the test. For example during the running of test case user wants some information to be logged in the console. Information could be any detail depends upon the purpose. Keeping this in mind that we are using Selenium for testing, we need the information which helps the User to understand the test steps or any failure during the test case execution. With the help of TestNG Logs it is possible to enable logging during the Selenium test case execution.</p>

<p>In selenium there are two types of logging. High level logging and Low level logging. In low level logging you try to produce logs for the every step you take or every action you make in your automation script. In high  level logging you just try to capture main events of your test.</p>

<p>Everybody has their own style of logging and I have mine too. I am also a big fan of Log4j logging and that’s why I do not mix log4j logging with testng logging but on the same side I make to use of both of its. I perform low level logging with log4j and high level logging with testng reporter logs.</p>

<h4>How to do it…</h4>

<p>1) Write a test case for Sign In application and implement Log4j logging on every step.</p>

<p>2) Insert Reporter logs on the main events of the test.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>package automationFramework;
</span><span class='line'>
</span><span class='line'>import java.util.concurrent.TimeUnit;
</span><span class='line'>
</span><span class='line'>import org.apache.log4j.Logger;
</span><span class='line'>import org.apache.log4j.xml.DOMConfigurator;
</span><span class='line'>import org.openqa.selenium.By;
</span><span class='line'>import org.openqa.selenium.WebDriver;
</span><span class='line'>import org.openqa.selenium.firefox.FirefoxDriver;
</span><span class='line'>import org.testng.Reporter;
</span><span class='line'>import org.testng.annotations.Test;
</span><span class='line'>
</span><span class='line'>import utility.Log;
</span><span class='line'>
</span><span class='line'>public class ReporterLogs {
</span><span class='line'>  private static WebDriver driver;
</span><span class='line'>  private static Logger Log = Logger.getLogger(Log.class.getName());
</span><span class='line'>    @Test
</span><span class='line'>  public static void test() {
</span><span class='line'>      DOMConfigurator.configure("log4j.xml");
</span><span class='line'>        driver = new FirefoxDriver();
</span><span class='line'>        Log.info("New driver instantiated");
</span><span class='line'>        driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);
</span><span class='line'>        Log.info("Implicit wait applied on the driver for 10 seconds");
</span><span class='line'>        driver.get("https://www.facebook.com/");
</span><span class='line'>        Log.info("Web application launched");
</span><span class='line'>        // Our first step is complete, so we produce a main event log here for our reports.
</span><span class='line'>        Reporter.log("Application Lauched successfully | ");
</span><span class='line'>   
</span><span class='line'>        driver.findElement(By.id("email")).sendKeys("yourusername");
</span><span class='line'>        Log.info("Username entered in the Username and email text box");
</span><span class='line'>        driver.findElement(By.id("pass")).sendKeys("yourpassword");
</span><span class='line'>        Log.info("Password entered in the Password text box");
</span><span class='line'>        driver.findElement(By.id("loginbutton")).click();
</span><span class='line'>        Log.info("Click action performed on Submit button");
</span><span class='line'>        // Here we are done with our Second main event
</span><span class='line'>        Reporter.log("Sign In Successful | " );
</span><span class='line'>        driver.quit();
</span><span class='line'>        Log.info("Browser closed");
</span><span class='line'>        // This is the third main event
</span><span class='line'>        Reporter.log("User is Logged out and Application is closed | ");
</span><span class='line'>  }
</span><span class='line'>
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>3) Run the test by right click on the test case script and select Run As > TestNG Test.</p>

<p>Your Log4j logging output will look like this:</p>

<p><img src="http://tabaolan1987.github.io/images/TestNG-Reporter-1.png"></p>

<p>But your Reporters log will look like this:</p>

<p><img src="http://tabaolan1987.github.io/images/TestNG-Reporter-2.png"></p>

<p>Log4j logging will help you to report a bug or steps taken during the test, on the other hand reporters log will help you to share the test status with leadership. As leadership is just interested in the test results, not the test steps.</p>

<p>I also use reporter’s logs on the verification during the test. For example</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>if(Text1.equals(Text2)){
</span><span class='line'>      Reporter.log("Verification Passed forText");
</span><span class='line'>  }else{
</span><span class='line'>      Reporter.log("Verification Failed for Text");
</span><span class='line'>  }</span></code></pre></td></tr></table></div></figure>


<h3>TestNG Asserts</h3>

<p>TestNG also gives us the power to take decisions in the middle of the test run with the help of Asserts. With this we can put various checkpoints in the test. Asserts are the most popular and frequently used methods while creating Selenium Scripts. In selenium there will be many situations in the test where you just like to check the presence of an element. All you need to do is to put an assert statement on to it to verify its existence.</p>

<h4>Different Asserts Statements</h4>

<p>1) Assert.assertTrue() &amp; Assert.assertFalse()</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>package automationFramework;
</span><span class='line'>
</span><span class='line'>import java.util.concurrent.TimeUnit;
</span><span class='line'>
</span><span class='line'>import org.openqa.selenium.By;
</span><span class='line'>import org.openqa.selenium.WebDriver;
</span><span class='line'>import org.openqa.selenium.WebElement;
</span><span class='line'>import org.openqa.selenium.firefox.FirefoxDriver;
</span><span class='line'>import org.testng.Assert;
</span><span class='line'>import org.testng.annotations.Test;
</span><span class='line'>
</span><span class='line'>public class Asserts {
</span><span class='line'>  private static WebDriver driver;
</span><span class='line'>  @Test
</span><span class='line'>  public void f() {
</span><span class='line'>    driver = new FirefoxDriver();
</span><span class='line'>      driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);
</span><span class='line'>      driver.get("https://www.facebook.com/");
</span><span class='line'>      
</span><span class='line'>      // Here driver will try to find out My username textbox on the application
</span><span class='line'>      WebElement text_username = driver.findElement(By.id("email"));
</span><span class='line'>      
</span><span class='line'>      //Test will only continue, if the below statement is true
</span><span class='line'>      //This is to check whether the textbox is displayed or not
</span><span class='line'>      Assert.assertTrue(text_username.isDisplayed());
</span><span class='line'>      
</span><span class='line'>      //My username text will be type only if the above condition is true
</span><span class='line'>      myAccount.sendKeys("your_username");
</span><span class='line'>  }
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>Note: Assert true statement fails the test and stop the execution of the test, if the actual output is false.  Assert.assertFalse() works opposite of Assert.assertTrue(). It means that if you want your test to continue only if when some certain element is not present on the page. You will use Assert false, so it will fail the test in case of the element present on the page.</p>

<p>2) Assert.assertEquals()</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>@Test
</span><span class='line'>  public void test() {
</span><span class='line'>    String sValue = "Ta bao Lan";
</span><span class='line'>    System.out.println(" What is your full name");
</span><span class='line'>    Assert.assertEquals("Ta Bao Lan", sValue);
</span><span class='line'>    System.out.println(sValue);
</span><span class='line'>  }</span></code></pre></td></tr></table></div></figure>


<p>It also works the same way like assert true and assert fail. It will also stop the execution, if the value is not equal and carry on the execution, if the value is equal.</p>

<h3>Take a look in more helpful: <a href="http://tabaolan1987.github.io/blog/2014/05/26/testng-framework-parameters-and-data-provider/">P8 : Parameters and Data Provider</a></h3>
]]></content>
  </entry>
  
</feed>
