<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Selenium Tutorial]]></title>
  <link href="http://www.tabaolan.com/atom.xml" rel="self"/>
  <link href="http://www.tabaolan.com/"/>
  <updated>2014-08-19T11:08:48+07:00</updated>
  <id>http://www.tabaolan.com/</id>
  <author>
    <name><![CDATA[Ta Bao Lan]]></name>
    <email><![CDATA[tabaolan1987@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Jmeter : Introduction]]></title>
    <link href="http://www.tabaolan.com/blog/2014/08/15/jmeter-introduction/"/>
    <updated>2014-08-15T14:30:28+07:00</updated>
    <id>http://www.tabaolan.com/blog/2014/08/15/jmeter-introduction</id>
    <content type="html"><![CDATA[<h2>Introduction to JMeter</h2>

<p>Have you ever tested a web server to know how efficiently it works? How many concurrent users can a web server handle?</p>

<p>Let say that one day, your boss asks you to do performance testing of www.google.com for 100 users. What would you do?</p>

<!--more-->


<p><img src="http://www.tabaolan.com/images/jmeter1.png"></p>

<p>Maybe your boss, who is a beginner, will ask you</p>

<p><img src="http://www.tabaolan.com/images/jmeter2.png"></p>

<p>This tutorial will help you to answer his question and complete your task.</p>

<script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle" style="display:block" data-ad-client="ca-pub-5798698216356388" data-ad-slot="7145934352" data-ad-format="auto"></ins><script>(adsbygoogle = window.adsbygoogle || []).push({});</script></p>

<h3>What is JMeter ?</h3>

<p><img src="http://www.tabaolan.com/images/jmeter3.png"></p>

<p>The Apache JMeterTM is pure Java open source software, which was first developed by Stefano Mazzocchi of the Apache Software Foundation, designed to load test functional behavior and measure performance. You can use JMeter to analyze and measure the performance of web application or variety of services.</p>

<p>Performance testing means testing a web application against heavy load, multiple and concurrent user traffic. JMeter originally is used for testing Web Application or FTP application.</p>

<p>Nowadays, it is used for functional test, database server test etc.</p>

<script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle" style="display:block" data-ad-client="ca-pub-5798698216356388" data-ad-slot="9425076351" data-ad-format="auto"></ins><script>(adsbygoogle = window.adsbygoogle || []).push({});</script></p>

<h3>Why JMeter ?</h3>

<p><img src="http://www.tabaolan.com/images/jmeter4.png"></p>

<p>JMeter advantages are described as figure below</p>

<p><img src="http://www.tabaolan.com/images/jmeter5.png"></p>

<p>Open source license: JMeter is totally free,  allows developer use the source code for the development.</p>

<p>Friendly GUI: JMeter is extremely easy to use and doesn&rsquo;t take time to get familiar with it.</p>

<p>Platform independent: JMeter is 100% pure Java desktop application. So it can run on multiple platforms.</p>

<p>Full multi-threading framework. JMeter allows concurrent and simultaneous sampling of different functions by a separate thread group.</p>

<p>Visualize Test Result: Test result can be display in a different format such as chart, table, tree and log file.</p>

<p>Easy installation: You just copy and run the *.bat file to run JMeter. No installation needed.</p>

<p>Highly Extensible: You can write your own tests. JMeter also supports visualization plugins allow you extend your testing.</p>

<p>Multiple testing strategy: JMeter supports many testing strategies such as Load Testing, Distributed Testing, and Functional Testing.</p>

<p>Simulation: JMeter can simulate multiple users with concurrent threads, create a heavy load against web application under test.</p>

<p>Support multi-protocol: JMeter does not only support web application testing, but also evaluate database server performance. All basic protocols such as HTTP, JDBC, LDAP, SOAP, JMS, and FTP are supported by JMeter.</p>

<p>Record &amp; Playback &ndash; Record the user activity on the browser and simulate them in  web application using JMeter.</p>

<p>Script Test: Jmeter can be integrated with Bean Shell &amp; Selenium for automated testing.</p>

<script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle" style="display:block" data-ad-client="ca-pub-5798698216356388" data-ad-slot="3378542759" data-ad-format="auto"></ins><script>(adsbygoogle = window.adsbygoogle || []).push({});</script></p>

<h3>How does JMeter work ?</h3>

<p>Basic workflow of JMeter as shown in the figures below</p>

<p>JMeter simulates a group of users sending requests to a target server, and return statistics information of target server through graphical diagrams</p>

<p><img src="http://www.tabaolan.com/images/jmeter6.png"></p>

<p>The completed workflow of JMeter as show in figure below</p>

<p><img src="http://www.tabaolan.com/images/jmeter7.png"></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Jmeter : Install Jmeter]]></title>
    <link href="http://www.tabaolan.com/blog/2014/08/15/jmeter-install-jmeter/"/>
    <updated>2014-08-15T14:20:03+07:00</updated>
    <id>http://www.tabaolan.com/blog/2014/08/15/jmeter-install-jmeter</id>
    <content type="html"><![CDATA[<h2>How to install Jmeter in easy steps</h2>

<h3>Operating system Support for JMeter</h3>

<p>JMeter is a pure Java application and should run correctly on any system that has a compatible Java implementation.</p>

<!--more-->


<p>Here is the list of operating system compatible with JMeter</p>

<p><img src="http://www.tabaolan.com/images/jmeter8.png"></p>

<p>In this tutorial, we run JMeter on Window operating system</p>

<h3>Steps to Install JMeter</h3>

<h4>Step 1) Install Java : <a href="http://www.tabaolan.com/blog/2014/08/07/newbie-part-1-download-and-install-java/">Click here</a></h4>

<h4>Step 2) Download Jmeter</h4>

<p>As of this writing, the latest version of JMeter is Apache JMeter 2.9.You can download it <a href="http://jmeter.apache.org/download_jmeter.cgi">here</a></p>

<p>Choose the Binaries file (either zip or tgz) to download as shown in figure below</p>

<p><img src="http://www.tabaolan.com/images/jmeter9.png"></p>

<h4>Step 3) Installation</h4>

<p>Installation of JMeter is extremely easy and simple. You simply unzip the zip/tar file into the directory where you want JMeter to be installed. There is no tedious installation screen to deal with! Simple unzip and you are done!</p>

<p>Once the unzipping is done installation directory structure should look like as figure below</p>

<p><img src="http://www.tabaolan.com/images/jmeter10.png"></p>

<p>Given below is the description of the JMeter directories and its importance JMeter directory contains many files and directory</p>

<p>/bin: Contains JMeter script file for starting JMeter</p>

<p>/docs: JMeter documentation files</p>

<p>/extras: ant related extra files</p>

<p>/lib/: Contains the required Java library for JMeter</p>

<p>/lib/ext: contains the core jar files for JMeter and the protocols</p>

<p>/lib/junit: JUnit library used for JMeter</p>

<script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle" style="display:block" data-ad-client="ca-pub-5798698216356388" data-ad-slot="7145934352" data-ad-format="auto"></ins><script>(adsbygoogle = window.adsbygoogle || []).push({});</script></p>

<h4>Step 4) Launch JMeter</h4>

<p>You can start JMeter in 3 modes</p>

<p>GUI Mode</p>

<p>Server Mode</p>

<p>Command Line Mode</p>

<h3>Start JMeter in GUI Mode</h3>

<p>If you are using Window, just run the file /bin/jmeter.bat to start JMeter in GUI mode as shown below</p>

<p><img src="http://www.tabaolan.com/images/jmeter11.gif"></p>

<p>Following figure annotates the various components in the JMeter GUI</p>

<p><img src="http://www.tabaolan.com/images/jmeter12.gif"></p>

<h3>Start JMeter in Server Mode</h3>

<script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle" style="display:block" data-ad-client="ca-pub-5798698216356388" data-ad-slot="3378542759" data-ad-format="auto"></ins><script>(adsbygoogle = window.adsbygoogle || []).push({});</script></p>

<p>Server mode is used for distributed testing. This testing works as client-server model. In this model, JMeter runs on server computer in server mode. On client computer, JMeter runs in GUI mode.</p>

<p>To start the server mode, you run the bat file bin\jmeter-server.bat as below figure</p>

<p><img src="http://www.tabaolan.com/images/jmeter13.png"></p>

<h3>Start JMeter in command line mode</h3>

<p>JMeter in GUI mode consumes much computer memory. For saving resource, you may choose to run JMeter without the GUI. To do so, use the following command options</p>

<p><img src="http://www.tabaolan.com/images/jmeter14.png"></p>

<p>This is a command line example</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$jmeter -n -t testPlan.jmx - l log.jtl -H 127.0.0.1 -P 8000</span></code></pre></td></tr></table></div></figure>


<script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle" style="display:block" data-ad-client="ca-pub-5798698216356388" data-ad-slot="9425076351" data-ad-format="auto"></ins><script>(adsbygoogle = window.adsbygoogle || []).push({});</script></p>

<p><img src="http://www.tabaolan.com/images/jmeter15.gif"></p>

<h3>Additional Packages</h3>

<h5>Java Compiler</h5>

<pre><code>    Java Compiler allows developers to build JMeter source code and other JMeter plugins
</code></pre>

<h5>SAX XML parser</h5>

<pre><code>    SAX is the Simple API for XML, originally a Java-only API. You can use SAX XML parser as an alternative to XML parser in JMeter
</code></pre>

<h5>Email Support</h5>

<pre><code>    JMeter has extensive Email capabilities. It can send email based on test results and has a POP3(S)/IMAP(S) sampler. It also has an SMTP sampler.
</code></pre>

<h5>JDBC driver</h5>

<pre><code>    If you want to test database server, you have to install JDBC driver
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Jmeter : Complete Element reference]]></title>
    <link href="http://www.tabaolan.com/blog/2014/08/15/jmeter-complete-element-reference/"/>
    <updated>2014-08-15T13:10:01+07:00</updated>
    <id>http://www.tabaolan.com/blog/2014/08/15/jmeter-complete-element-reference</id>
    <content type="html"><![CDATA[<h2>Complete Element reference for Jmeter</h2>

<p>The different components of JMeter are called Elements. Each Element is designed for a specific purpose.</p>

<p>The figure below gives the some common elements in JMeter.</p>

<p><img src="http://www.tabaolan.com/images/jmeter16.png"></p>

<p>Studying all the componens at one go is an invitation to confusion and boredome. Here, we will discuss the must-know components before you can start testing in JMeter.</p>

<p>Remaining components will be discussed as when they are used in the succeeding tutorials. The elements discussed in this tutorial are</p>

<h3>Thread Group</h3>

<script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle" style="display:block" data-ad-client="ca-pub-5798698216356388" data-ad-slot="9425076351" data-ad-format="auto"></ins><script>(adsbygoogle = window.adsbygoogle || []).push({});</script></p>

<p>Thread Groups is a collection of Threads. Each thread represents one user using the application under test. Basically each Thread simulates one real user request to the server.</p>

<p>The controls for a thread group allow you to Set the number of threads for each group.</p>

<p>For example, if you set the number of threads as 100; JMeter will create and simulate 100 user requests to the server under test</p>

<p><img src="http://www.tabaolan.com/images/jmeter17.png"></p>

<h3>Samplers</h3>

<script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle" style="display:block" data-ad-client="ca-pub-5798698216356388" data-ad-slot="7145934352" data-ad-format="auto"></ins><script>(adsbygoogle = window.adsbygoogle || []).push({});</script></p>

<p>As we know already that JMeter supports testing HTTP, FTP , JDBC and many other protocols.</p>

<p>We already know that Thread Groups simulate user request to the server</p>

<p>But how does a Thread Group know which type of requests (HTTP, FTP etc.) it needs to make ?</p>

<p>The answer is Samplers</p>

<p>The user request could be FTP Request, HTTP Request, JDBC Request&hellip;Etc.</p>

<p><img src="http://www.tabaolan.com/images/jmeter18.png"></p>

<h3>FTP request:</h3>

<p>Let imagine you want to performance test an FTP server. You can use FTP request sampler in JMeter to do this task. This controller lets you send an FTP &ldquo;download file&rdquo; or &ldquo;upload file&rdquo; request to an FTP server.</p>

<p><img src="http://www.tabaolan.com/images/jmeter19.png"></p>

<p>For example, if you want to download a file &ldquo;Test.txt&rdquo; from a FTP server under test, you need to configure some parameters in JMeter as figure below</p>

<p><img src="http://www.tabaolan.com/images/jmeter20.png"></p>

<p>JMeter will send FTP command to FTP server ftp.example.com, and then download a file Test.txt from that server.</p>

<h3>HTTP request:</h3>

<script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle" style="display:block" data-ad-client="ca-pub-5798698216356388" data-ad-slot="3378542759" data-ad-format="auto"></ins><script>(adsbygoogle = window.adsbygoogle || []).push({});</script></p>

<p>This sampler lets you send an HTTP/HTTPS request to a web server.</p>

<p>Consider the example below. JMeter send a HTTP request to Google website and retrieve HTML files or image from this website.</p>

<p><img src="http://www.tabaolan.com/images/jmeter21.png"></p>

<h3>JDBC request:</h3>

<p>This sampler lets you execute Database Performance Testing. It sends a JDBC Request (an SQL query) to a database.</p>

<p><img src="http://www.tabaolan.com/images/jmeter22.png"></p>

<p>For example, a database server has a field test_result stored in a table name test_tbl. You want to query this data from the database server; you can configure JMeter to send a SQL query to this server to retrieve data.</p>

<p><img src="http://www.tabaolan.com/images/jmeter23.png"></p>

<h3>BSF Sampler:</h3>

<p>This sampler allows you to write a sampler using a BSF scripting language.</p>

<p>Here is an example of BSF  Sampler in JMeter</p>

<p><img src="http://www.tabaolan.com/images/jmeter24.png"></p>

<h3>Access Log Sampler:</h3>

<p>This sampler allows you to read access logs and generate http requests. The log could be  image, html, css&hellip;.</p>

<p><img src="http://www.tabaolan.com/images/jmeter25.png"></p>

<h3>SMTP Sampler:</h3>

<p>If you want to test a mail server, you can use SMTP sampler. This sampler is used to send email messages using SMTP protocol.</p>

<p><img src="http://www.tabaolan.com/images/jmeter26.png"></p>

<h3>Listeners</h3>

<p>Listeners: shows the results of the test execution. They can show results in different format such as tree, table, graph or log file</p>

<p><img src="http://www.tabaolan.com/images/jmeter27.png"></p>

<h4>Graph result listeners display the server response times on a Graph</h4>

<p><img src="http://www.tabaolan.com/images/jmeter28.png"></p>

<h4>View Result Tree show results of user request in basic HTML format</h4>

<p><img src="http://www.tabaolan.com/images/jmeter29.png"></p>

<h4>Table Result show summary of test result in table format</h4>

<p><img src="http://www.tabaolan.com/images/jmeter30.png"></p>

<h4>Log show summary of test result in the text file</h4>

<p><img src="http://www.tabaolan.com/images/jmeter31.png"></p>

<h3>Configuration Elements</h3>

<p>set up defaults and variables for later use by samplers.</p>

<p>The figure below shows some commonly used configuration elements in JMeter</p>

<p><img src="http://www.tabaolan.com/images/jmeter33.png"></p>

<h4>CSV Data Set Config:</h4>

<p>Suppose you want to test a website for 100 users signing-in with different credentials. You do not need to record the script 100 times! You can parameterization the script to enter different login credentials. This login information (e.g. Username, password) could be stored in a text file. JMeter has an element that allows you to read different parameters from that text file. It is &ldquo;CSV Data Set Config&rdquo;, which is used to read lines from a file, and split them into variables.</p>

<p><img src="http://www.tabaolan.com/images/jmeter32.png"></p>

<p>This is an example of CSV Data. It&rsquo;s a text file which contains user and password to login your target website</p>

<p><img src="http://www.tabaolan.com/images/jmeter34.png"></p>

<h4>HTTP Cookie Manager</h4>

<p>Let&rsquo;s understand this with an example &ndash;</p>

<p>You used your browser (Firefox, IE&hellip;Etc) to browse www.google.com</p>

<p>You login with your user and password.</p>

<p>Your username and password will be stored in your computer as cookies.</p>

<p>Next time, when you visit www.google.com, you don&rsquo;t need to do login again because your browser will use your cookies as user data to login.</p>

<p>HTTP Cookie Manager also has the same feature like a web browser. If you have an HTTP Request and the response contains a cookie, the Cookie Manager automatically stores that cookie and will use it for all future requests to that particular web site.</p>

<h4>HTTP request default</h4>

<p>This element lets you set default values that your HTTP Request controllers use.</p>

<p>For example,</p>

<p>You are sending 100 HTTP requests to the server google.com</p>

<p>You would have to manually enter server name = google.com for all these 100 requests</p>

<p>Instead, you could add a single HTTP request defaults with the &ldquo;Server Name or IP&rdquo; field = google.com</p>

<p>No need to type 100 times!</p>

<p><img src="http://www.tabaolan.com/images/jmeter35.png"></p>

<h4>Login Config Element</h4>

<p>The Login Config Element lets you add or override username and password settings in samplers.</p>

<p>For example, you want to simulate one user login to website www.facebook.com with user and password. You can use Login Config Element to add these user and password setting in user request</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Jmeter : Hands on with Jmeter GUI]]></title>
    <link href="http://www.tabaolan.com/blog/2014/08/15/jmeter-hands-on-with-jmeter-gui/"/>
    <updated>2014-08-15T12:35:26+07:00</updated>
    <id>http://www.tabaolan.com/blog/2014/08/15/jmeter-hands-on-with-jmeter-gui</id>
    <content type="html"><![CDATA[<h2>Hands on with JMeter GUI</h2>

<p>As soon as you launch JMeter , you will see 2 elements : Test Plan and Workbench</p>

<h3>Test Plan</h3>

<script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle" style="display:block" data-ad-client="ca-pub-5798698216356388" data-ad-slot="9425076351" data-ad-format="auto"></ins><script>(adsbygoogle = window.adsbygoogle || []).push({});</script></p>

<p>Test Plan is where you add elements required for your JMeter Test.</p>

<p>It stores all the elements (like ThreadGroup, Timers etc) and their corresponding settings required to run your desired Tests.</p>

<p>Following figure shows an example of Test Plan</p>

<p><img src="http://www.tabaolan.com/images/jmeter36.png"></p>

<h3>WorkBench</h3>

<p>The WorkBench simply provides a place to store test elements temporarily. WorkBench has no relation with Test Plan. JMeter will not save the contents of the WorkBench. It only saves the contents of the Test Plan branch</p>

<p><img src="http://www.tabaolan.com/images/jmeter37.png"></p>

<h2>Adding Elements</h2>

<p>Adding Elements is the essential step to build a Test Plan because without adding elements, JMeter cannot execute your Test Plan</p>

<p>A Test Plan includes many Elements such as Listener, Controller, and Timer</p>

<p>You can add an element to test plan by right-clicking on a Test Plan, and choose new elements from &ldquo;Add&rdquo; list.</p>

<p>Suppose, you want to add 2 elements to Test Plan BeanShell Assertion and Java Request Default.</p>

<p>1)Right click Test Plan &ndash;> Add &ndash;> Assertion-> Bean Shell Assertion</p>

<p>2)Right click Test Plan &ndash;> Add &ndash;> Config Element &ndash;> Java Request Default</p>

<p><img src="http://www.tabaolan.com/images/jmeter38.gif"></p>

<p>You can also remove unused element</p>

<p>Let&rsquo;s say, you want to remove element &ldquo;HTTP Request Defaults&rdquo;, select &ldquo;HTTP Request Default&rdquo; &ndash;> Right click-> choose Remove from the context menu &ndash;> Click Yes to confirm delete this element on message box</p>

<h2>Loading and Saving Elements</h2>

<h3>Saving Elements</h3>

<p>Suppose you have already added an element name &ldquo;BeanShell Assertion&rdquo;.  Now you want to save it.</p>

<p>Right click BeanShell Assertion &ndash;> select Save Selection As</p>

<p><img src="http://www.tabaolan.com/images/jmeter39.png"></p>

<p>A dialog box display, click Save button to save your elements under default name BeanShell Assertion.jmx. You can choose other name if you want</p>

<p><img src="http://www.tabaolan.com/images/jmeter40.png"></p>

<p>JMeter Test Elements and Test plan are stored in *.JMX format. JMX is standing for Java Management Extensions.</p>

<h3>Loading Elements</h3>

<script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle" style="display:block" data-ad-client="ca-pub-5798698216356388" data-ad-slot="7145934352" data-ad-format="auto"></ins><script>(adsbygoogle = window.adsbygoogle || []).push({});</script></p>

<p>Loading exist element helps you save your time required to create &amp; configure new elements</p>

<p>Let&rsquo;s say,  that you have an existing element in Test Plan: Java Request Default</p>

<p>Right click Java Request Defaults-> select Merge</p>

<p><img src="http://www.tabaolan.com/images/jmeter41.gif"></p>

<p>Choose the Elements (BeanShell Assertion.jmx.) file in the directory. This element will be added to your current test plan.</p>

<p><img src="http://www.tabaolan.com/images/jmeter42.png"></p>

<h2>Configuring Elements</h2>

<p>In order to configure any Element</p>

<p>1.Select the element in the Tree on Left Pane</p>

<p>2.Enter configuration settings on the Right Pane</p>

<p><img src="http://www.tabaolan.com/images/jmeter43.png"></p>

<h3>Running and Stopping a Test Plan</h3>

<script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle" style="display:block" data-ad-client="ca-pub-5798698216356388" data-ad-slot="3378542759" data-ad-format="auto"></ins><script>(adsbygoogle = window.adsbygoogle || []).push({});</script></p>

<p>Before running a test, you should save your Test Plan first. Saving your Test Plan helps you avoid unexpected error when running the test plan. Steps to save Test plan &ndash;</p>

<p>1.File &ndash;> Save Test Plan as-> a Dialog box display</p>

<p>2.Enter a filename of Test Plan &ndash;>click Save</p>

<p><img src="http://www.tabaolan.com/images/jmeter44.gif"></p>

<h3>Create Combo Test Plan</h3>

<p>You can merge one or many Test Plans to create a combo Test Plan as shown in below figure</p>

<p><img src="http://www.tabaolan.com/images/jmeter45.png"></p>

<p>Suppose you already have an existing Test Plan name Test_Fragment.jmx on your computer (This article includes this file).You can merge this test plan to current Test Plan on JMeter to create a new Test Plan.</p>

<p><img src="http://www.tabaolan.com/images/jmeter46.gif"></p>

<p>Now all the test elements in file Test_Fragment.jmx are added to your current test plan as shown in the figure below</p>

<p><img src="http://www.tabaolan.com/images/jmeter47.png"></p>

<h3>Run Test Plan</h3>

<p>To run your single or multiple test plans, choose Start (Control + R) from the Run menu item.</p>

<p><img src="http://www.tabaolan.com/images/jmeter48.png"></p>

<p>When JMeter is running, it shows a small green box at the right hand end of the menu bar.</p>

<p><img src="http://www.tabaolan.com/images/jmeter49.png"></p>

<p>The numbers to the left of the green box are the number of active threads / total number of threads.</p>

<p>To Stop the Test, press Stop button or use short key Ctrl + &lsquo;.&rsquo;</p>

<p><img src="http://www.tabaolan.com/images/jmeter50.png"></p>

<h3>Test Report</h3>

<p>When test execution is done, you can get the test report. The test report includes the error log file, which is saved in jmeter.log, and the test result summary.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Jmeter : Performance testing]]></title>
    <link href="http://www.tabaolan.com/blog/2014/08/15/jmeter-performance-testing/"/>
    <updated>2014-08-15T11:58:52+07:00</updated>
    <id>http://www.tabaolan.com/blog/2014/08/15/jmeter-performance-testing</id>
    <content type="html"><![CDATA[<h2>Performance Testing using Jmeter</h2>

<p>Performance testing is crucial to determine that the web application under test will satisfy high load requirements. It can be used to analyze overall server performance under heavy load.</p>

<p><img src="http://www.tabaolan.com/images/jmeter51.png"></p>

<p>JMeter offers following benefit in Performance testing</p>

<p>JMeter can be  used to test performance of both static resources such as JavaScript and HTML, as well as dynamic resources, such as JSP, Servlets, and AJAX.</p>

<p>JMeter can discover maximum number of concurrent users that your website can handle</p>

<p>JMeter provides a variety of graphical analyses of performance reports.</p>

<p>JMeter Performance Testing includes:</p>

<p><img src="http://www.tabaolan.com/images/jmeter52.png"></p>

<p>Load Testing: Modelling the expected usage by simulating multiple user access the web services concurrently.</p>

<script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle" style="display:block" data-ad-client="ca-pub-5798698216356388" data-ad-slot="9425076351" data-ad-format="auto"></ins><script>(adsbygoogle = window.adsbygoogle || []).push({});</script></p>

<p>Stress Testing: Every web server has a maximum load capacity. When the load goes beyond the limit, the web server start responding slowly and produce errors. The purpose of the stress testing is to find the maximum load the web server can handle.</p>

<p>The figure below shows how JMeter simulates the heavy load :</p>

<p><img src="http://www.tabaolan.com/images/jmeter53.png"></p>

<h3>Create a Performance Test Plan in Jmeter</h3>

<p>In this tutorial, we are doing a performance analysis of Google.com for 1000 users</p>

<p>Before testing the performance of target web application, we should determine-</p>

<p>Normal Load: Average number of users visit your website</p>

<p>Heavy Load: The maximum number of users visit your website</p>

<p>What is your target in this test?</p>

<p>Here is the roadmap of this practical example</p>

<p><img src="http://www.tabaolan.com/images/jmeter54.png"></p>

<h3>Step 1) Add Thread Group</h3>

<p>1.Start JMeter</p>

<p>2.Select Test Plan on the tree</p>

<p>3.Add Thread Group</p>

<p>Right click on the Test Plan and add a new thread group: Add &ndash;> Threads (Users) &ndash;> Thread Group</p>

<p><img src="http://www.tabaolan.com/images/jmeter55.png"></p>

<p>In Thread Group control panel, enter Thread Properties as following:</p>

<p><img src="http://www.tabaolan.com/images/jmeter56.png"></p>

<p>Number of Threads: 100 (Number of users connects to target website: 100)</p>

<p>Loop Count: 10 (Number of time to execute testing)</p>

<p>Ramp-Up Period: 100</p>

<script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle" style="display:block" data-ad-client="ca-pub-5798698216356388" data-ad-slot="3378542759" data-ad-format="auto"></ins><script>(adsbygoogle = window.adsbygoogle || []).push({});</script></p>

<p>The Thread Count and The Loop Counts are different.</p>

<p><img src="http://www.tabaolan.com/images/jmeter57.png"></p>

<p>Ramp-Up Period tells JMeter how long to delay before starting next user. For example, if we have 100 users and a 100 second Ramp-Up period, then the delay between starting users would be 1 second (100 users /100 seconds)</p>

<p><img src="http://www.tabaolan.com/images/jmeter58.png"></p>

<h3>Step 2) Adding JMeter elements</h3>

<p>Now we determine what JMeter elements in this test. The elements are</p>

<h4>HTTP request Default</h4>

<p>This element can be added by right-clicking on the Thread Group and selecting: Add &ndash;> Config Element &ndash;> HTTP Request Defaults.</p>

<p><img src="http://www.tabaolan.com/images/jmeter59.png"></p>

<p>In the HTTP Request Defaults control panel, enter the Website name under test (<a href="http://www.google.com">http://www.google.com</a>)</p>

<p><img src="http://www.tabaolan.com/images/jmeter60.png"></p>

<h4>HTTP Request</h4>

<script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle" style="display:block" data-ad-client="ca-pub-5798698216356388" data-ad-slot="7145934352" data-ad-format="auto"></ins><script>(adsbygoogle = window.adsbygoogle || []).push({});</script></p>

<p>Right-click on Thread Group and select: Add &ndash;> Sampler &ndash;> HTTP Request.</p>

<p><img src="http://www.tabaolan.com/images/jmeter61.png"></p>

<p>In HTTP Request Control Panel, the Path field indicates which URL request you want to send to Google server.</p>

<p><img src="http://www.tabaolan.com/images/jmeter62.png"></p>

<p>For example, if you enter &ldquo;calendar&rdquo; in Path field. JMeter will create the URL request <a href="http://www.google.com/calendar">http://www.google.com/calendar</a>  to Google server</p>

<p><img src="http://www.tabaolan.com/images/jmeter63.png"></p>

<p>If you keep  the Path field blank  JMeter will create the URL request <a href="http://www.google.com">http://www.google.com</a> to Google server.</p>

<p>In this test, you keep the Path field blank to make JMeter create the URL request <a href="http://www.google.com">http://www.google.com</a> to Google server.</p>

<h3>Step 3) Adding Graph result</h3>

<p>JMeter can show the test result in Graph format.</p>

<p>Right click Test Plan, Add &ndash;> Listener &ndash;> Graph Results</p>

<p><img src="http://www.tabaolan.com/images/jmeter64.png"></p>

<h3>Step 4) Run Test and get the test result</h3>

<p>Press Run button (Ctrl + R) on Toolbar to start the testing process. You will see the test result display on Graph at the real time.</p>

<p>The picture below presents a graph of a test plan, where we simulated 100 users who accessed on website www.google.com.</p>

<p><img src="http://www.tabaolan.com/images/jmeter65.png"></p>

<p>At the bottom of the picture, there are the following statistics, represented in colors:</p>

<p>Black: The total number of current samples sent.</p>

<p>Blue: The current average of all samples sent.</p>

<p>Red: The current standard deviation.</p>

<p>Green: Throughput rate that represents the number of requests per minute the server handled.</p>

<p>Let analyze the performance of Google server in below figure.</p>

<p><img src="http://www.tabaolan.com/images/jmeter66.png"></p>

<p>To analyse the performance of the web server under test, you should focus on 2 parameters Throughput and Deviation</p>

<p>The Throughput is the most important parameter. It represents the ability of the server to handle heavy load.  The higher the Throughput is, the better is the server performance.</p>

<p>In this test, the throughput of Google server is 1,491.193/minute. It means Google server can handle 1,491.193 requests per minute. This value is quiet high so we can conclude that Google server has good performance</p>

<p>The deviation is shown in red &ndash; it indicates the deviation from the average. The smaller the better.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Jmeter : How to use Timers]]></title>
    <link href="http://www.tabaolan.com/blog/2014/08/15/jmeter-how-to-use-timers/"/>
    <updated>2014-08-15T10:26:51+07:00</updated>
    <id>http://www.tabaolan.com/blog/2014/08/15/jmeter-how-to-use-timers</id>
    <content type="html"><![CDATA[<h2>How to use Timers in Jmeter</h2>

<p>By default, JMeter sends the request without pausing between each request. In that case, JMeter could overwhelm your test server by making too many requests in a short amount of times.</p>

<p>Let imagine that you send thousands request to a web server under test in a few seconds. This is what happens!</p>

<p><img src="http://www.tabaolan.com/images/jmeter67.png"></p>

<p>Timers allow JMeter to delay between each request which a thread makes. Timer can solve the server overload problem.</p>

<p>Also, in real life visitors do not arrive at a website all at the same time, but at different time intervals. So Timer will help mimic the real time behavior.</p>

<p>Following are some common types of timer in JMeter</p>

<script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle" style="display:block" data-ad-client="ca-pub-5798698216356388" data-ad-slot="9425076351" data-ad-format="auto"></ins><script>(adsbygoogle = window.adsbygoogle || []).push({});</script></p>

<h3>Constant Timer:</h3>

<p>Constant timer delays each user request for the same amount of time.</p>

<p><img src="http://www.tabaolan.com/images/jmeter68.png"></p>

<h3>Gaussian Random Timer:</h3>

<p>Gaussian random timer delays each user request for a random amount of time.</p>

<p><img src="http://www.tabaolan.com/images/jmeter69.png"></p>

<p>So the total delay is described as below figure:</p>

<p><img src="http://www.tabaolan.com/images/jmeter70.png"></p>

<script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle" style="display:block" data-ad-client="ca-pub-5798698216356388" data-ad-slot="3378542759" data-ad-format="auto"></ins><script>(adsbygoogle = window.adsbygoogle || []).push({});</script></p>

<h3>Uniform Random Timer:</h3>

<p>Uniform random timer delays each user request for a random amount of time.</p>

<p><img src="http://www.tabaolan.com/images/jmeter71.png"></p>

<h3>BeanShell Timer</h3>

<p>The BeanShell Timer can be used to generate a delay time between each user request.</p>

<h3>BSF Timer</h3>

<p>The BSF Timer can be used to generate a delay between each user request using a BSF scripting language.</p>

<h3>JSR223 Timer</h3>

<p>The JSR223 Timer can be used to generate a delay between each user request using a JSR223 scripting language.</p>

<script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle" style="display:block" data-ad-client="ca-pub-5798698216356388" data-ad-slot="7145934352" data-ad-format="auto"></ins><script>(adsbygoogle = window.adsbygoogle || []).push({});</script></p>

<h2>Practical Demonstration of Timer Settings</h2>

<p>In this example, you will use Constant Timer to set fixed delay between user requests to google.com.</p>

<p>Let start with a simple test script</p>

<p>1.JMeter creates one user request to <a href="http://www.google.com">http://www.google.com</a> 100 times</p>

<p>2.Delay between each user request is 5000 ms</p>

<p>Here is the roadmap of this practical example:</p>

<p><img src="http://www.tabaolan.com/images/jmeter72.png"></p>

<h3>Pre-condition:</h3>

<p>We re-use the Step 1 and Step 2 in tutorial (JMeter Performance Testing)[/blog/2014/08/15/jmeter-performance-testing/].</p>

<h3>Step 1) Add Thread Group</h3>

<p>Right click on the Test Plan and add a new thread group: Add-> Threads (Users) &ndash;>Thread Group</p>

<p>In Thread Group control panel, enter Thread Properties as following</p>

<p><img src="http://www.tabaolan.com/images/jmeter73.png"></p>

<p>This setting lets JMeter create one user request to <a href="http://www.google.com">http://www.google.com</a> in 100 times</p>

<h3>Step 2) Add JMeter elements</h3>

<p>1.Add HTTP request default</p>

<p>2.Add HTTP request</p>

<h3>Step 3) Add Constant Timer</h3>

<p>Right click Thread Group &ndash;> Timer &ndash;> Constant Timer</p>

<p><img src="http://www.tabaolan.com/images/jmeter74.png"></p>

<p>Configuring Thread Delay of 5000 milliseconds</p>

<p><img src="http://www.tabaolan.com/images/jmeter75.png"></p>

<h3>Step 4) Add View Results in Table</h3>

<p>View Results in Table displays the test result in table format.</p>

<p>Right click Add &ndash;> Listener &ndash;> View Result in Table.</p>

<p><img src="http://www.tabaolan.com/images/jmeter76.png"></p>

<p>View Results in Table displays as below figure</p>

<p><img src="http://www.tabaolan.com/images/jmeter77.png"></p>

<h3>Step 5) Run your test</h3>

<p>When you ready to run test, click Run button on the menu bar, or short key Ctrl+R</p>

<p>This is the result of this test</p>

<p><img src="http://www.tabaolan.com/images/jmeter78.png"></p>

<p>You can analyze the result as following:</p>

<p>The End Time of one sample is calculated as following:</p>

<p><img src="http://www.tabaolan.com/images/jmeter79.png"></p>

<p>For example, in the above figure, let analyze the Sample 2</p>

<p>Start time is 22:05:01.866</p>

<p>Sample Time of Sample 2 is 172 ms</p>

<p>Constant Timer : 5000 ms (as configured)</p>

<p>End Time of this sample is = 22:05:01.866 + 172 + 5000 = 22:05:07.038</p>

<p>So the Sample 3 should start at  the time is 22:05:07.039 ( As shown in the above figure)</p>

<p>The delay of each sample is 5000 ms</p>

<p>If you change the Constant Timer is zero, you will see the result is changed</p>

<p><img src="http://www.tabaolan.com/images/jmeter80.png"></p>

<p>Let analyze the Sample 1</p>

<p>Start time is 22:17:39.141</p>

<p>Sample Time of Sample 2 is 370 ms</p>

<p>Constant Timer : 0 ms (as configured)</p>

<p>End Time of this sample is = 22:17:39.141+ 370 + 0 = 22:17:39.511</p>

<p>So the Sample 2 should start at  the time is 22:17:39.512 (Shown in the above figure)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Jmeter : How to use Assertions]]></title>
    <link href="http://www.tabaolan.com/blog/2014/08/15/jmeter-how-to-use-assertions/"/>
    <updated>2014-08-15T10:20:51+07:00</updated>
    <id>http://www.tabaolan.com/blog/2014/08/15/jmeter-how-to-use-assertions</id>
    <content type="html"><![CDATA[<h2>How to use Assertions in JMeter</h2>

<p>Assertion help verify that your server under test returns the expected results.</p>

<p>Following are some commonly used Assertion in JMeter:</p>

<p>1.Response Assertion</p>

<p>2.Duration Assertion</p>

<p>3.Size Assertion</p>

<p>4.XML Assertion</p>

<p>5.HTML Assertion</p>

<h3>Response Assertion</h3>

<p><img src="http://www.tabaolan.com/images/jmeter81.png"></p>

<p>The response assertion lets you add pattern strings to be compared against various fields of the server response.</p>

<p>For example, you send a user request to the website <a href="http://www.google.com">http://www.google.com</a> and get the server response. You can use Response Assertion to verify if the server response contains expected pattern string (e.g. &ldquo;OK&rdquo;).</p>

<script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle" style="display:block" data-ad-client="ca-pub-5798698216356388" data-ad-slot="9425076351" data-ad-format="auto"></ins><script>(adsbygoogle = window.adsbygoogle || []).push({});</script></p>

<h3>Duration Assertion</h3>

<p>The Duration Assertion tests that each server response was received within a given amount of time. Any response that takes longer than the given number of milliseconds (specified by the user) is marked as a failed response.</p>

<p>For example, a user request is sent to www.google.com by JMeter and get a response within expected time 5 ms then test case pass, else, test case failed.</p>

<p><img src="http://www.tabaolan.com/images/jmeter82.png"></p>

<h2>Size Assertion</h2>

<p>The Size Assertion tests that each server response contains the expected number of byte in it. You can specify that the size be equal to, greater than, less than, or not equal to a given number of bytes.</p>

<p>JMeter sends a user request to www.google.com and gets response packet with size less than expected byte 5000 bytes àtest case pass. If else, test case failed.</p>

<script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle" style="display:block" data-ad-client="ca-pub-5798698216356388" data-ad-slot="3378542759" data-ad-format="auto"></ins><script>(adsbygoogle = window.adsbygoogle || []).push({});</script></p>

<h2>XML Assertion</h2>

<p>The XML Assertion tests that the response data consists of a formally correct XML document.</p>

<p><img src="http://www.tabaolan.com/images/jmeter83.png"></p>

<h3>HTML Assertion</h3>

<p>The HTML Assertion allows the user to check the HTML syntax of the response data. It means the response data must be met the HTML syntax.</p>

<p><img src="http://www.tabaolan.com/images/jmeter84.png"></p>

<h3>Handson &ndash; Assertion</h3>

<script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle" style="display:block" data-ad-client="ca-pub-5798698216356388" data-ad-slot="7145934352" data-ad-format="auto"></ins><script>(adsbygoogle = window.adsbygoogle || []).push({});</script></p>

<p>In this test, we are using Response Assertion to compare the response packet from www.google.com matches your expected string.</p>

<p>Here is the roadmap of this test:</p>

<p><img src="http://www.tabaolan.com/images/jmeter85.png"></p>

<p>The response assertion control panel lets you add pattern strings to be compared against various fields of the response.</p>

<h4>Step 1) Add Response Assertion</h4>

<p>Right-Click Thread Group &ndash;> Add &ndash;> Assertions &ndash;> Response Assertion</p>

<p><img src="http://www.tabaolan.com/images/jmeter86.png"></p>

<p>Response Assertion Pane displays as below figure:</p>

<p><img src="http://www.tabaolan.com/images/jmeter87.png"></p>

<h4>Step 2) Add Pattern to test</h4>

<p>When you send a request to Google server, it may return some response code as below:</p>

<p>*404: Server error</p>

<p>*200: Server OK</p>

<p>*302: Web server redirect to other page.This usually happens when you access google.com from outside USA. Google re-directs to country specific website. As shown below, google.com redirects to google.com.vn for Vietnamese Users.</p>

<p>Assume that you want to verify that the web server google.com responses code contains pattern 302,</p>

<p>On Response Field To Test, choose Response Code,</p>

<p>On Response Assertion Panel, click Add &ndash;> a new blank entry display &ndash;> enter 302 in Pattern to Test.</p>

<p><img src="http://www.tabaolan.com/images/jmeter88.png"></p>

<h4>Step 3) Add Assertion Results</h4>

<p>Right click Thread Group, Add &ndash;> Listener &ndash;> Assertion Results</p>

<p><img src="http://www.tabaolan.com/images/jmeter89.png"></p>

<p><img src="http://www.tabaolan.com/images/jmeter90.png"></p>

<h4>Step 4) Run your test</h4>

<p>Click on Thread Group &ndash;> Assertion Result</p>

<p>When you ready to run test, click Run button on the menu bar, or short key Ctrl+R.</p>

<p>The test result will display on Assertion Results pane. If Google server response code contains the pattern 302, the test case is passed. You will see the message displayed as follows:</p>

<p><img src="http://www.tabaolan.com/images/jmeter91.png"></p>

<p>Now back to Response Assertion Panel, you change the Pattern to test to from 302 to 500.</p>

<p><img src="http://www.tabaolan.com/images/jmeter92.png"></p>

<p>Because Google server response code doesn&rsquo;t contain this pattern, you will see the test case Failed as following:</p>

<p><img src="http://www.tabaolan.com/images/jmeter93.png"></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Jmeter : How to use Controllers]]></title>
    <link href="http://www.tabaolan.com/blog/2014/08/15/jmeter-how-to-use-controllers/"/>
    <updated>2014-08-15T10:15:51+07:00</updated>
    <id>http://www.tabaolan.com/blog/2014/08/15/jmeter-how-to-use-controllers</id>
    <content type="html"><![CDATA[<h2>How to use Controllers in JMeter</h2>

<p>If you want to control &ldquo;when&rdquo; to send a user request to a web server under test, what would you do?</p>

<p>JMeter gives us a feature to do that. It&rsquo;s Logic Controllers.</p>

<p><img src="http://www.tabaolan.com/images/jmeter94.png"></p>

<h3>Logic Controllers</h3>

<script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle" style="display:block" data-ad-client="ca-pub-5798698216356388" data-ad-slot="9425076351" data-ad-format="auto"></ins><script>(adsbygoogle = window.adsbygoogle || []).push({});</script></p>

<p>Logic Controllers let you define the order of processing request in a Thread. For example, you can use Random Controllers to send HTTP requests to the server randomly.</p>

<p>Logic Controllers determine the order in which user request are executed.</p>

<p>Some commonly used Logic controllers are below:</p>

<p><img src="http://www.tabaolan.com/images/jmeter95.png"></p>

<h3>Recording Controller</h3>

<script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle" style="display:block" data-ad-client="ca-pub-5798698216356388" data-ad-slot="7145934352" data-ad-format="auto"></ins><script>(adsbygoogle = window.adsbygoogle || []).push({});</script></p>

<p>JMeter can record your testing steps; recording controller is a place holder to store these recording steps.</p>

<p><img src="http://www.tabaolan.com/images/jmeter96.png"></p>

<h3>Simple Controller</h3>

<p>Simple Controller is just a container for user request.</p>

<p><img src="http://www.tabaolan.com/images/jmeter97.png"></p>

<h3>Loop Controller</h3>

<p>Loop Controller makes the user request run specified number of times or run forever as shown in figure:</p>

<p><img src="http://www.tabaolan.com/images/jmeter98.png"></p>

<h3>Random Controller</h3>

<script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle" style="display:block" data-ad-client="ca-pub-5798698216356388" data-ad-slot="3378542759" data-ad-format="auto"></ins><script>(adsbygoogle = window.adsbygoogle || []).push({});</script></p>

<p>Random Controller makes all the user requests run in random order in each loop period.</p>

<p>For example, you have 3 user requests to website <a href="http://www.google.com">http://www.google.com</a> in following order:</p>

<p>HTTP request</p>

<p>FTP request</p>

<p>JDBC request</p>

<p>These 3 requests should run 5 times; Total 15 (5*3) user requests will be sent to Google server by JMeter.</p>

<p>In sequential order, requests are sent sequentially in following order:</p>

<p>HTTP request &ndash;>FTP request->JDBC request</p>

<p>for each loop.</p>

<p><img src="http://www.tabaolan.com/images/jmeter99.png"></p>

<p>vs</p>

<p><img src="http://www.tabaolan.com/images/jmeter100.png"></p>

<p>In random order, requests are sent as randomly,</p>

<p>FTP request &ndash;>HTTP request->JDBC request</p>

<p>Or</p>

<p>JDBC request &ndash;>FTP request->HTTP request</p>

<p>For each loop.</p>

<h3>Module Controller</h3>

<p>he goal of Module Controller is to add modularity to JMeter.</p>

<p>The general idea is that web applications consist of small units of functionality (i.e. Logon, Create Account, Logoff&hellip;). This functionality can be stored in Simple Controller as &ldquo;modules&rdquo;.  Module Controller will choose which module needs to run.</p>

<p><img src="http://www.tabaolan.com/images/jmeter101.png"></p>

<p>Consider the following scenario &ndash;</p>

<p>You want to simulate:</p>

<p>50 users logging out,</p>

<p>100 users logging in</p>

<p>30 users  search www.google.com</p>

<p>You can use JMeter to create 3 modules. Each module simulates each user activity: Login, Logout, and Search.</p>

<p><img src="http://www.tabaolan.com/images/jmeter102.png"></p>

<p>The Module controller chooses which module needs to run.</p>

<p><img src="http://www.tabaolan.com/images/jmeter103.png"></p>

<h3>Other Important Controllers</h3>

<h4>Interleave Controller:  picks up and makes one of user request run in each loop of the thread.</h4>

<h4>Runtime Controller: controls how long its children are allowed to run.</h4>

<p>For example, if you specified Runtime Controller 10 seconds, JMeter will run your test for 10 seconds.</p>

<p><img src="http://www.tabaolan.com/images/jmeter104.png"></p>

<h4>Transaction Controller: measures the overall time taken to finish a test execution</h4>

<h4>Include Controller: is designed to use an external test plan. This controller allows you to use multiple test plans in JMeter.</h4>

<h2>Handons with Loop Controller</h2>

<p>This section shows you step-by-steps instruction to add Loop Controller setting to your current performance test plan.</p>

<p>The Loop Controller makes the samplers run as a certain number of times, in addition to the loop value you specified for the Thread Group. For example, if you</p>

<p>Add one HTTP Request to a Loop Controller with a loop count 50</p>

<p>Configure the Thread Group loop count to 2</p>

<p>Then, JMeter will send a total of 50 * 2 = 100 HTTP Requests.</p>

<p>This is the roadmap of this example:</p>

<p><img src="http://www.tabaolan.com/images/jmeter105.png"></p>

<h3>Step 1) Configuring Thread Group</h3>

<p>Right click on the Test Plan and add a new thread group: Add-> Threads (Users) &ndash;>Thread Group</p>

<p>But in Thread Group control panel, enter Thread Properties as following:</p>

<p><img src="http://www.tabaolan.com/images/jmeter106.png"></p>

<p>It will make one user request to the web server google.com and  run it 2 times.</p>

<p>Add HTTP request default to www.google.com.</p>

<p>Right Click Thread Group &ndash;> Logic Controller &ndash;> Loop Controller</p>

<p><img src="http://www.tabaolan.com/images/jmeter107.png"></p>

<h3>Step 2) Configuring Loop Controller</h3>

<p>Add value 50 to Loop Count field as below figure. It will make one user request to the web server google.com run it 50 times, in addition to the loop value =2 , you specified for the Thread Group above.So JMeter will send a total of 2 * 50 = 100 HTTP Requests.</p>

<p><img src="http://www.tabaolan.com/images/jmeter108.png"></p>

<p>Right click Loop Controller, Add &ndash;> Sampler &ndash;> HTTP request</p>

<p><img src="http://www.tabaolan.com/images/jmeter109.png"></p>

<h3>Step 3) Add View Results in Table</h3>

<p>We re-use Step 2 in Timer to add View Results in Table</p>

<p>So the test plan is shown in below figure</p>

<p><img src="http://www.tabaolan.com/images/jmeter110.png"></p>

<h3>Step 4) Run your test</h3>

<p>Now return View Results in Table, click Start button on Menu bar (Ctrl+R) to run test</p>

<p>As shown in the figure below, JMeter simulates one user request, which is sent 100 times, to the web server <a href="http://www.google.com/.">http://www.google.com/.</a> The Test is stopped after user request was sent in 100 times.</p>

<p><img src="http://www.tabaolan.com/images/jmeter111.png"></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Jmeter : How to use Processor]]></title>
    <link href="http://www.tabaolan.com/blog/2014/08/15/jmeter-how-to-use-processor/"/>
    <updated>2014-08-15T10:10:51+07:00</updated>
    <id>http://www.tabaolan.com/blog/2014/08/15/jmeter-how-to-use-processor</id>
    <content type="html"><![CDATA[<h2>How to use Processor in JMeter</h2>

<p>Processor is used to modify the Samplers in their scope.</p>

<p>There are 2 Types of processors:</p>

<p>1.Pre-processor</p>

<p>2.Post-processor</p>

<h3>Pre-processor</h3>

<script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle" style="display:block" data-ad-client="ca-pub-5798698216356388" data-ad-slot="9425076351" data-ad-format="auto"></ins><script>(adsbygoogle = window.adsbygoogle || []).push({});</script></p>

<p>Pre-processor executes some action before making Sampler Request.</p>

<p>onsider a simple example: let&rsquo;s say you wanted JMeter to &ldquo;spider&rdquo; through website under test, parse link(check all links on the page) and return the HTML. You would add some action such as &ldquo;HTML link parser&rdquo; to your controller before creating an HTTP request.</p>

<p><img src="http://www.tabaolan.com/images/jmeter112.png"></p>

<h3>Post-processor</h3>

<script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle" style="display:block" data-ad-client="ca-pub-5798698216356388" data-ad-slot="7145934352" data-ad-format="auto"></ins><script>(adsbygoogle = window.adsbygoogle || []).push({});</script></p>

<p>Post-processor executes some action after making a Sampler Request.</p>

<p>Consider a simple example: JMeter send HTTP request to the web server under test (etc www.google.com) and get the response. You want JMeter to stop the testif the server response is error. You can use the post-processor to do above task as following:</p>

<p><img src="http://www.tabaolan.com/images/jmeter113.png"></p>

<h3>Processor-Hands on</h3>

<script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle" style="display:block" data-ad-client="ca-pub-5798698216356388" data-ad-slot="3378542759" data-ad-format="auto"></ins><script>(adsbygoogle = window.adsbygoogle || []).push({});</script></p>

<p>This tutorial will show you step-by-step instructions how to use Post-processor in JMeter. Let start with simple test script.</p>

<p>1.JMeter sends HTTP request to the web server under test www.google.com.</p>

<ol>
<li><p>JMeter gets response from the Google server.</p></li>
<li><p>If server response is error, JMeter will stop the test.</p></li>
<li><p>If server response OK (no error), JMeter will continue the test.</p></li>
</ol>


<p>Here is the roadmap of this example:</p>

<p><img src="http://www.tabaolan.com/images/jmeter114.png"></p>

<h4>Step 1) Add Thread Group</h4>

<p>Right click on the Test Plan and add a new thread group: Add &ndash;> Threads (Users) &ndash;> Thread Group</p>

<p>But in Thread Group control panel, enter Thread Properties as following:</p>

<p><img src="http://www.tabaolan.com/images/jmeter115.png"></p>

<p>This setting lets JMeter create 10 user request to <a href="http://www.google.com">http://www.google.com</a>  10 times.</p>

<h4>Step 2) Add JMeter elements</h4>

<p>Add HTTP request default</p>

<p>Add HTTP request</p>

<p>We still make JMeter send request <a href="http://www.google.com">http://www.google.com</a> to Google server.</p>

<h4>Step 3) Add Post-Processor Element</h4>

<p>Right Click Thread Group &ndash;> Add &ndash;> Post Processor &ndash;> Result Status Action Handler</p>

<p>Result Status Action Handler allows the user to stop the thread or the whole test if the user request failed.</p>

<p><img src="http://www.tabaolan.com/images/jmeter116.png"></p>

<p>In Result Status Action Handle Pane, choose Stop Test Now. This selection will stop the test if JMeter get the error from server response.</p>

<p><img src="http://www.tabaolan.com/images/jmeter117.png"></p>

<h4>Step 4) Config the HTTP Request</h4>

<p>Open the HTTP Request Panel. Enter &ldquo;abc&rdquo; to the Path field.</p>

<p><img src="http://www.tabaolan.com/images/jmeter118.png"></p>

<p>When you enter &ldquo;abc&rdquo; to the path, JMeter will create URL request to Google server: <a href="http://www.google.com/abc.">http://www.google.com/abc.</a> This URL doesn&rsquo;t exist on Google server. It is wrong URL request so Google server will return error.</p>

<h4>Step 5) Add View Result Tree</h4>

<p>Right Click Thread Group  &ndash;> Add  &ndash;> Listener  &ndash;> View Result Tree</p>

<p><img src="http://www.tabaolan.com/images/jmeter119.png"></p>

<h4>Step 6) Run Test</h4>

<p>Select View Result Tree, press Run button on Menu bar. You will see the error response from Google server and the test will stop with out completing 100 threads.</p>

<p><img src="http://www.tabaolan.com/images/jmeter120.gif"></p>

<p>Now return to step 4, open the HTTP Request pane, enter &ldquo;calendar&rdquo; to the pane. It makes JMeter create URL request <a href="http://www.google.com/calendar">http://www.google.com/calendar</a> to the Google server. This is correct URL request so Google server will return OK (no error).</p>

<p><img src="http://www.tabaolan.com/images/jmeter121.png"></p>

<p>Select View Result Tree, press Run button on Menu bar. You will see the OK response from Google server and the test will continue until all 100 threads are complete.</p>

<p><img src="http://www.tabaolan.com/images/jmeter122.gif"></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Jmeter : How to perform Distributed Testing]]></title>
    <link href="http://www.tabaolan.com/blog/2014/08/15/jmeter-how-to-perform-distributed-testing/"/>
    <updated>2014-08-15T10:10:00+07:00</updated>
    <id>http://www.tabaolan.com/blog/2014/08/15/jmeter-how-to-perform-distributed-testing</id>
    <content type="html"><![CDATA[<h2>How to perform Distributed Testing in JMeter</h2>

<h3>Overview</h3>

<p>Distributed testing is a kind of testing which use multiple systems to perform stress testing. Distributed testing is applied for testing web sites and server applications when they are working with multiple clients simultaneously.</p>

<p>Distributes testing uses client-server model as figure below:</p>

<p><img src="http://www.tabaolan.com/images/jmeter123.png"></p>

<p>Master: the system running JMeter GUI, control each slave.</p>

<p>Slave: the system running jmeter-server, receive command from the master and send a request to server under test.</p>

<p>Target: the web server under test, get request from slaves.</p>

<h3>Start your test</h3>

<script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle" style="display:block" data-ad-client="ca-pub-5798698216356388" data-ad-slot="9425076351" data-ad-format="auto"></ins><script>(adsbygoogle = window.adsbygoogle || []).push({});</script></p>

<h4>Precondition:</h4>

<p>*The firewalls on the systems are turned off. In some cases, the firewall may still be blocking the traffic. You should disable the Window firewall or Linux firewall.</p>

<p>*All the machines should be on same subnet. If machines are not on same subnet, maybe they will not recognize each other in the network.</p>

<p>*Use the same version of JMeter to avoid unanticipated errors/issues.</p>

<p>Here is the roadmap of this testing:</p>

<p><img src="http://www.tabaolan.com/images/jmeter124.png"></p>

<h3>Step 1) System configuration</h3>

<script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle" style="display:block" data-ad-client="ca-pub-5798698216356388" data-ad-slot="3378542759" data-ad-format="auto"></ins><script>(adsbygoogle = window.adsbygoogle || []).push({});</script></p>

<p>On the slave systems, go to jmeter/bin directory and execute file &ldquo;jmeter-server.bat&rdquo;.</p>

<p>Assume that a slave machine has IP address: 192.168.0.10. On windows, you should see a window appear like following figure:</p>

<p><img src="http://www.tabaolan.com/images/jmeter125.png"></p>

<p>On the master systems, go to /bin directory and edit file jmeter.properites, add IP slave machine as below</p>

<p><img src="http://www.tabaolan.com/images/jmeter126.png"></p>

<h3>Step 2) Run the test</h3>

<script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle" style="display:block" data-ad-client="ca-pub-5798698216356388" data-ad-slot="7145934352" data-ad-format="auto"></ins><script>(adsbygoogle = window.adsbygoogle || []).push({});</script></p>

<p>On the master machine, run JMeter GUI and open the test plan.</p>

<p>Click Run on the menu bar; select Remote start &ndash;> select the IP address of slave machine</p>

<p><img src="http://www.tabaolan.com/images/jmeter127.png"></p>

<h3>Step 3) Troubleshooting</h3>

<p>If you are unable to run test form the above machine and see below error, simply ask owner of slave machine to run the jmeter-server.bat File.</p>

<p><img src="http://www.tabaolan.com/images/jmeter128.png"></p>

<h3>Limitation</h3>

<p>There are some basic limitations for distributed testing. Here&rsquo;s list of the known items:</p>

<p>1.Server and all clients must be on the same subnet.</p>

<p>2.Distributed testing required target server to have large processing power. The target Server could be easily overloaded in case it gets too many requests by distributed JMeter tests.</p>

<p>3.A single JMeter can only handle a limited number of threads (100- 300 threads).</p>

<p>4.The distributed JMeter tests are complex, difficult for beginner to build.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Beginner with Selenium 2 WebDriver Part 1 :Download and Install Java ]]></title>
    <link href="http://www.tabaolan.com/blog/2014/08/07/newbie-part-1-download-and-install-java/"/>
    <updated>2014-08-07T16:55:35+07:00</updated>
    <id>http://www.tabaolan.com/blog/2014/08/07/newbie-part-1-download-and-install-java</id>
    <content type="html"><![CDATA[<h2>Beginner with Selenium 2 WebDriver : Download and Install Java</h2>

<h3>Download and Install Java</h3>

<p>First of all you need to install JDK (Java development kit) in your system. So your next question will be “how can I download java”. <a href="http://adf.ly/p8uJ7">Click here</a> to download Java and install it in your system as per given installation guide over there or follow the below mentioned steps.</p>

<!--more-->


<p>1) Visit the <a href="http://adf.ly/p8uJ7">Java downloads page</a> on Oracle’s website to find the JDK environment download. Scroll down until you find Java SE Latest Version and download JDK.</p>

<script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle" style="display:block" data-ad-client="ca-pub-5798698216356388" data-ad-slot="7145934352" data-ad-format="auto"></ins><script>(adsbygoogle = window.adsbygoogle || []).push({});</script>
<img src="http://www.tabaolan.com/images/Download-And-Install-Java-1.png"></p>

<p>2) Once you have selected download, accept the terms of service and choose the correct OS corresponding for the specific JDK. (Windows, Mac, Linux, etc.)</p>

<p><img src="http://www.tabaolan.com/images/Download-And-Install-Java-2.png"></p>

<p>3) Save the .exe file to your disk.</p>

<p><img src="http://www.tabaolan.com/images/Download-And-Install-Java-3.png"></p>

<p>4) Once the download is complete, double click the file to begin the installation of JDK.</p>

<p><img src="http://www.tabaolan.com/images/Download-And-Install-Java-4.png"></p>

<p>5) To run the installer, click Run.</p>

<p><img src="http://www.tabaolan.com/images/Download-And-Install-Java-5.png"></p>

<p>6) The installation process starts. Click the Next button to continue the installation.</p>

<p><img src="http://www.tabaolan.com/images/Download-And-Install-Java-6.png"></p>

<p>7) On the next screen you will encounter some options. Just leave these alone and click Next unless you know what you are doing.</p>

<script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle" style="display:block" data-ad-client="ca-pub-5798698216356388" data-ad-slot="3378542759" data-ad-format="auto"></ins><script>(adsbygoogle = window.adsbygoogle || []).push({});</script>
<img src="http://www.tabaolan.com/images/Download-And-Install-Java-7.png"></p>

<p>8) After the initial installation is done, a pop up asking you where your source java files will be. You can choose to change where you want to keep your folder but it’s best to stick with what you were given first. Click Next to continue.</p>

<p><img src="http://www.tabaolan.com/images/Download-And-Install-Java-8.png"></p>

<p>9) Let the installation finish.</p>

<p><img src="http://www.tabaolan.com/images/Download-And-Install-Java-9.png"></p>

<p>10) A few brief dialogs confirm the last steps of the installation process; click Close on the last dialog. This will complete Java installation process.</p>

<p><img src="http://www.tabaolan.com/images/Download-And-Install-Java-10.png"></p>

<p>11 ) You have finish download and install Java , take a look in <a href="http://www.tabaolan.com/blog/2014/08/07/newbie-part-2-download-and-start-eclipse/">Part 2 : Download and Start Eclipse</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Beginner with WebDriver Part 2 : Download and Start Eclipse]]></title>
    <link href="http://www.tabaolan.com/blog/2014/08/07/newbie-part-2-download-and-start-eclipse/"/>
    <updated>2014-08-07T15:55:35+07:00</updated>
    <id>http://www.tabaolan.com/blog/2014/08/07/newbie-part-2-download-and-start-eclipse</id>
    <content type="html"><![CDATA[<h2>Beginner with Selenium WebDriver : Download and Start Eclipse</h2>

<h3>Download and Start Eclipse IDE</h3>

<p>Eclipse free download for Java Developers, extract and save it in any drive. It is totally free. You can run ‘eclipse.exe’ directly so you do not need to install Eclipse in your system.</p>

<!--more-->


<p>1) Go to <a href="http://adf.ly/p8uot">|Eclipse download page</a></p>

<p><img src="http://www.tabaolan.com/images/Download-and-Install-Eclipse-1.png"></p>

<p>2) For Windows users, you will have to know what type of version of your OS you have. If your computer is a 64 bit Windows , select Windows 64 and if you have a 32 bit Windows, select Windows 32 bit.</p>

<p><img src="http://www.tabaolan.com/images/Download-and-Install-Eclipse-2.png"></p>

<p>3) Save the .zip file to your disk.</p>

<p><img src="http://www.tabaolan.com/images/Download-and-Install-Eclipse-3.png"></p>

<script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle" style="display:block" data-ad-client="ca-pub-5798698216356388" data-ad-slot="9425076351" data-ad-format="auto"></ins><script>(adsbygoogle = window.adsbygoogle || []).push({});</script></p>

<p>4) Once you have downloaded the Eclipse archive you will need to Extract the zip file, which will create the unzipped Eclipse folder.</p>

<p><img src="http://www.tabaolan.com/images/Download-and-Install-Eclipse-4.png"></p>

<p>5) You may want to Extract the archive to the root of C: drive, thus creating the folder “C:eclipse”, or just moved the extracted eclipse folder to the root of C: drive if you extracted it already. I prefer to leave it as it is.</p>

<p><img src="http://www.tabaolan.com/images/Download-and-Install-Eclipse-5.png"></p>

<p>6) Let the extraction process finished.</p>

<p><img src="http://www.tabaolan.com/images/Download-and-Install-Eclipse-6.png"></p>

<p>7) Open the eclipse folder.</p>

<p><img src="http://www.tabaolan.com/images/Download-and-Install-Eclipse-7.png"></p>

<script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle" style="display:block" data-ad-client="ca-pub-5798698216356388" data-ad-slot="7145934352" data-ad-format="auto"></ins><script>(adsbygoogle = window.adsbygoogle || []).push({});</script></p>

<p>8) Since Eclipse IDE does not have any installer, there will be a file inside the Eclipse folder named eclipse.exe. You can double click on the file to run Eclipse.</p>

<p>Note:(This step is not required, but it’s strongly recommended.) Right-click the Eclipse Icon and press “Send To” &ndash;> “Desktop (Create Shortcut).” Now you will be able to launch Eclipse from your desktop.</p>

<p><img src="http://www.tabaolan.com/images/Download-and-Install-Eclipse-8.png"></p>

<p><img src="http://www.tabaolan.com/images/Download-and-Install-Eclipse-9.png"></p>

<p>9) Create a workspace folder where you will contain all the program files you create.  You can choose whatever place you want for your workspace, but it’s easiest to just use the default you’re given. I like to choose my own workplace location and will place all my Toolsqa tutorial projects under it.</p>

<p><img src="http://www.tabaolan.com/images/Start-Eclipse-2.png"></p>

<script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle" style="display:block" data-ad-client="ca-pub-5798698216356388" data-ad-slot="9425076351" data-ad-format="auto"></ins><script>(adsbygoogle = window.adsbygoogle || []).push({});</script></p>

<p>10) You may see the window like this, this is the Welcome window for Eclipse.</p>

<script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle" style="display:block" data-ad-client="ca-pub-5798698216356388" data-ad-slot="3378542759" data-ad-format="auto"></ins><script>(adsbygoogle = window.adsbygoogle || []).push({});</script>
<img src="http://www.tabaolan.com/images/Download-and-Install-Eclipse-11.png"></p>

<p>11) Now that you have finished installing eclipse restart your computer. By restarting your computer it refreshes system memory and allows changes made by installers and uninstallers to take effect.</p>

<p>12) Take a look in the next part <a href="http://www.tabaolan.com/blog/2014/08/07/newbie-part-3-download-webdriver-java-client/">Part 3 : Download Webdriver Java client</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Webdriver : Introduction]]></title>
    <link href="http://www.tabaolan.com/blog/2014/08/07/webdriver-introduction/"/>
    <updated>2014-08-07T15:26:35+07:00</updated>
    <id>http://www.tabaolan.com/blog/2014/08/07/webdriver-introduction</id>
    <content type="html"><![CDATA[<h2>Selenium Introduction</h2>

<h3>About Selenium</h3>

<p>Selenium is a software testing framework for the web that facilitates the automation of browsers. The Selenium project produces various tools for automation testing such as Selenium IDE, Selenium Remote Control (RC), Selenium Grid and Selenium 2.0 &amp; WebDriver. Learning all the tools will give you many different options for approaching different automation problems. The entire suits of tools result in a rich set of testing functions specially geared to the needs of testing of web application of all types.</p>

<!--more-->


<h3>Why Selenium</h3>

<ul>
<li>Selenium is an open source tool with Corporate backing.</li>
<li>The tests can then be run against most modern web browsers.</li>
<li>Selenium deploys on Windows, Linux, and Macintosh platforms.</li>
<li>It allows recording, editing, and debugging tests.</li>
<li>Recorded tests can be exported in most language e.g. html, Java, .net, perl, ruby etc.</li>
<li>Selenium has the support of some of the largest browser vendors who have taken (or are taking) steps to make Selenium a native part of their browser.</li>
</ul>


<h3>Selenium WebDriver</h3>

<p>The primary new feature in Selenium 2.0 is the integration of the WebDriver API. WebDriver is designed to provide a simpler, more concise programming interface in addition to addressing some limitations in the Selenium-RC API. It enables you to use a programming language to write test scripts in different programming languages like html, Java, .net , perl, ruby and which enables you to use conditional operations, looping and other programming concepts which makes you test script robust. Selenium-WebDriver was developed to better support dynamic web pages where elements of a page may change without the page itself being reloaded. WebDriver’s goal is to supply a well-designed object-oriented API that provides improved support for modern advanced web-app testing problems.</p>

<h3>WebDriver Vs Selenium RC</h3>

<p>1) Architecture</p>

<h4>WebDriver&rsquo;s architecture is simpler than Selenium RC&rsquo;s.</h4>

<p>It controls the browser from the OS level</p>

<p>All you need are your programming language&rsquo;s IDE (which contains your Selenium commands) and a browser.</p>

<p><img src="http://www.tabaolan.com/images/compare-1.jpg"></p>

<script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle" style="display:block" data-ad-client="ca-pub-5798698216356388" data-ad-slot="3378542759" data-ad-format="auto"></ins><script>(adsbygoogle = window.adsbygoogle || []).push({});</script></p>

<h4>Selenium RC&rsquo;s architecture is way more complicated.</h4>

<p>You first need to launch a separate application called Selenium Remote Control (RC) Server before you can start testing</p>

<p>The Selenium RC Server acts as a &ldquo;middleman&rdquo; between your Selenium commands and your browser</p>

<p>When you begin testing, Selenium RC Server &ldquo;injects&rdquo; a Javascript program called Selenium Core into the browser.</p>

<p>Once injected, Selenium Core will start receiving instructions relayed by the RC Server from your test program.</p>

<p>When the instructions are received, Selenium Core will execute them as Javascript commands.</p>

<p>The browser will obey the instructions of Selenium Core, and will relay its response to the RC Server.</p>

<p>The RC Server will receive the response of the browser and then display the results to you.</p>

<p>RC Server will fetch the next instruction from your test script to repeat the whole cycle.</p>

<p><img src="http://www.tabaolan.com/images/compare-2.jpg"></p>

<script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle" style="display:block" data-ad-client="ca-pub-5798698216356388" data-ad-slot="9425076351" data-ad-format="auto"></ins><script>(adsbygoogle = window.adsbygoogle || []).push({});</script></p>

<p>2) Speed</p>

<p>WebDriver is faster than Selenium RC since it  speaks directly to the browser uses the browser&rsquo;s own engine to control it.</p>

<p>Selenium RC is slower  sinceit uses a Javascript program called Selenium Core.This Selenium Core is the one that directly controls the browser, not you.</p>

<p>3) Real-life Interaction</p>

<p>WebDriver interacts with page elements in a more realistic way. For example, if you have a disabled text box on a page you were testing, WebDriver really cannot enter any value in it just as how a real person cannot.</p>

<p>Selenium Core, just like other Javascript codes, can access disabled elements .In the past, Selenium testers complain that Selenium Core was able to enter values to a disabled text box in their tests.Differences in API.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Webdriver : Element Commands]]></title>
    <link href="http://www.tabaolan.com/blog/2014/08/07/webdriver-element-commands/"/>
    <updated>2014-08-07T15:20:35+07:00</updated>
    <id>http://www.tabaolan.com/blog/2014/08/07/webdriver-element-commands</id>
    <content type="html"><![CDATA[<h2>Selenium WebDriver WebElement Commands</h2>

<p>The next thing you like to do is to interact with a web page. You need to locate an element first on the web page before interacting with it and locating elements can be done on the WebDriver instance itself or on a WebElement. Webdriver gives us “Find Element” and “Find Elements” method to locate elements on the web page.</p>

<!--more-->


<h3>Find Element &amp; Find Elements Method</h3>

<p>The difference between “Find Element” and “Find Elements” method is the first returns a WebElement object otherwise it throws an exception and the latter returns a list of WebElements, it can return an empty list if no DOM elements match the query. The “Find” methods take a locator or query object called “By”. “By” strategies are listed below.</p>

<h4>By ID</h4>

<p>With this strategy, the first element with the id attribute value matching the location will be returned. If no element has a matching id attribute, a NoSuchElementException will be raised. This is the most efficient and preferred way to locate an element, as most of the times IDs are unique. But in some cases UI developers make it having non-unique ids on a page or auto-generating the id, in both cases it should be avoided.</p>

<p>Example: If an element is given like this:</p>

<script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle" style="display:block" data-ad-client="ca-pub-5798698216356388" data-ad-slot="3378542759" data-ad-format="auto"></ins><script>(adsbygoogle = window.adsbygoogle || []).push({});</script></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>
</span><span class='line'>&lt;!-- html code
</span><span class='line'>&lt;input id="Username"&gt;&lt;/input&gt;
</span><span class='line'>--!&gt;
</span><span class='line'>//java code to find the input with id is "Username"
</span><span class='line'>WebElement element = driver.findElement(By.id("Username"));
</span></code></pre></td></tr></table></div></figure>


<h4>By Name</h4>

<p>This is also an efficient way to locate an element but again the problem is same as with ID that UI developer make it having non-unique names on a page or auto-generating the names. With this strategy, the first element with the name attribute value matching the location will be returned. If no element has a matching name attribute, a NoSuchElementException will be raised.</p>

<p>Example: If an element is given like this:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;!-- html code
</span><span class='line'>&lt;input name="Username"&gt;&lt;/input&gt;
</span><span class='line'>--!&gt;
</span><span class='line'>//java code to find the input with name is "Username"
</span><span class='line'>WebElement element = driver.findElement(By.name("Username"));
</span></code></pre></td></tr></table></div></figure>


<h4>By Class Name</h4>

<p>With this you can find elements based on the value of the “class” attribute. If an element has many classes then this will match against each of them. A class can contain many elements.</p>

<p>Example: If an element is given like this:</p>

<script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle" style="display:block" data-ad-client="ca-pub-5798698216356388" data-ad-slot="9425076351" data-ad-format="auto"></ins><script>(adsbygoogle = window.adsbygoogle || []).push({});</script></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;!-- html code
</span><span class='line'>&lt;input class="Username"&gt;&lt;/input&gt;
</span><span class='line'>--!&gt;
</span><span class='line'>//java code to find the input with className is "Username"
</span><span class='line'>WebElement element = driver.findElement(By.className("Username"));
</span></code></pre></td></tr></table></div></figure>


<h4>By Tag Name</h4>

<p>With this you can find elements by their tag names.</p>

<p>Example: If an element is given like this:</p>

<script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle" style="display:block" data-ad-client="ca-pub-5798698216356388" data-ad-slot="3378542759" data-ad-format="auto"></ins><script>(adsbygoogle = window.adsbygoogle || []).push({});</script></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>//html code
</span><span class='line'>&lt;a href="link.html"&gt;Name of the Link&lt;/a&gt;
</span><span class='line'>
</span><span class='line'>// java code to find
</span><span class='line'>WebElement element=driver.findElement(By.linkText("Name of the Link"));
</span></code></pre></td></tr></table></div></figure>


<p>By Partial Link Text</p>

<p>With this you can find elements of “a” tags(Link) with the partial link names. Use this when you know link text used within an anchor tag.</p>

<p>Example: If an element is given like this</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>//html code
</span><span class='line'>&lt;a href="link.html"&gt;Name of the Link&lt;/a&gt;
</span><span class='line'>// java code to find
</span><span class='line'>WebElement element=driver.findElement(By.linkText("Name of"));</span></code></pre></td></tr></table></div></figure>


<p>or</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>WebElement element=driver.findElement(By.linkText("the Link"));</span></code></pre></td></tr></table></div></figure>


<h3>Practice Exercise 1</h3>

<p>1) Launch new Browser</p>

<p>2) Open URL <a href="https://www.facebook.com">https://www.facebook.com</a></p>

<p>3) Type Name &amp; password</p>

<p>4) Click on SignIn button</p>

<h4>Solution</h4>

<script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle" style="display:block" data-ad-client="ca-pub-5798698216356388" data-ad-slot="7145934352" data-ad-format="auto"></ins><script>(adsbygoogle = window.adsbygoogle || []).push({});</script></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>package automationFramework;
</span><span class='line'>
</span><span class='line'>import java.util.concurrent.TimeUnit;
</span><span class='line'>
</span><span class='line'>import org.openqa.selenium.By;
</span><span class='line'>import org.openqa.selenium.WebDriver;
</span><span class='line'>import org.openqa.selenium.firefox.FirefoxDriver;
</span><span class='line'>
</span><span class='line'>public class PracticeWebElementCommands {
</span><span class='line'>  public static WebDriver driver;
</span><span class='line'>  public static void main(String[] args) {
</span><span class='line'>       // Create a new instance of the Firefox driver
</span><span class='line'>        driver = new FirefoxDriver();
</span><span class='line'>
</span><span class='line'>        // Put an Implicit wait, this means that any search for elements on the page could take the time the implicit wait is set for before throwing exception
</span><span class='line'>        driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);
</span><span class='line'>
</span><span class='line'>        // Launch the ToolsQA Website
</span><span class='line'>        driver.get("https://www.facebook.com");
</span><span class='line'>
</span><span class='line'>        // Type email      
</span><span class='line'>        driver.findElement(By.id("emaill")).sendKeys("youremail"); 
</span><span class='line'>
</span><span class='line'>        //Type passwork
</span><span class='line'>        driver.findElement(By.name("pass")).sendKeys("yourpassword");
</span><span class='line'>
</span><span class='line'>        // Click on SignIn
</span><span class='line'>        driver.findElement(By.Xpath("//form[@id='login_form']/table/tbody/tr[2]/td[3]/label/input")).click();
</span><span class='line'>      }
</span><span class='line'>  }</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Webdriver : Browser Commands]]></title>
    <link href="http://www.tabaolan.com/blog/2014/08/07/webdriver-browser-commands/"/>
    <updated>2014-08-07T15:15:35+07:00</updated>
    <id>http://www.tabaolan.com/blog/2014/08/07/webdriver-browser-commands</id>
    <content type="html"><![CDATA[<h2>Selenium WebDriver Browser Commands</h2>

<p>The very first thing you like to do with Selenium is to opening and closing a new browser. Below are the numbers of commands you can apply on the Selenium opened browser.</p>

<!--more-->


<h3>1)Get Command</h3>

<p>Purpose: This command is use to open a new web page in the current browser.</p>

<p>Command: driver.get(URL);</p>

<p>Parameters: url – The URL to load. It is best to use a fully qualified URL.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>driver.get("wwww.google.com");</span></code></pre></td></tr></table></div></figure>


<h3>2)Get Title Command</h3>

<p>Purpose: This command is use to get the title of the current page.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>driver.getTitle();</span></code></pre></td></tr></table></div></figure>


<h3>3)Get Current URL Command</h3>

<p>Purpose: This command is use to get the URL of the page currently loaded in the browser.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>driver.getCurrentUrl();</span></code></pre></td></tr></table></div></figure>


<h3>4)Get Page Source Command</h3>

<script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle" style="display:block" data-ad-client="ca-pub-5798698216356388" data-ad-slot="3378542759" data-ad-format="auto"></ins><script>(adsbygoogle = window.adsbygoogle || []).push({});</script></p>

<p>Purpose: This command is use to get the source of the last loaded page.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>driver.getPageSource();</span></code></pre></td></tr></table></div></figure>


<h3>5)Close Command</h3>

<p>Purpose: This command is use to close the current window of the browser, if it’s the last window it will close the browser.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>driver.close();</span></code></pre></td></tr></table></div></figure>


<h3>6)Quit Command</h3>

<p>Purpose: This command is use to quit the browser and all the opened windows in the browser.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>driver.quit();</span></code></pre></td></tr></table></div></figure>


<h3>7)Refresh Command</h3>

<p>Purpose: There are some commands is use to refresh the current browser.</p>

<script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle" style="display:block" data-ad-client="ca-pub-5798698216356388" data-ad-slot="9425076351" data-ad-format="auto"></ins><script>(adsbygoogle = window.adsbygoogle || []).push({});</script></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>driver.navigate().refresh();
</span><span class='line'>driver.get(driver.getCurrentUrl());
</span><span class='line'>driver.navigate().to(driver.getCurrentUrl());
</span><span class='line'>driver.findElement(By.name("s")).sendKeys("\uE035");</span></code></pre></td></tr></table></div></figure>


<h2>Simple Practice Exercise</h2>

<p>1) Launch a new Firefox browser.</p>

<p>2) Open daringfireball.net</p>

<p>3) Get Page Title name and Title length</p>

<p>4) Print Page Title and Title length on the Eclipse Console.</p>

<p>5) Get Page URL and URL length</p>

<p>6) Print URL and URL length on the Eclipse Console.</p>

<p>7) Refresh current page</p>

<p>8) Get Page Source (HTML Source code) and Page Source length</p>

<p>9) Print Page Source and length on Eclipse Console.</p>

<p>10) Close the Browser.</p>

<h3>Solution</h3>

<h4>1) Create class &lsquo;PracticeBrowserCommands&rsquo; and copy code below paste to your class and Run this class.</h4>

<script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle" style="display:block" data-ad-client="ca-pub-5798698216356388" data-ad-slot="7145934352" data-ad-format="auto"></ins><script>(adsbygoogle = window.adsbygoogle || []).push({});</script></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>package automationFramework;
</span><span class='line'>import java.util.concurrent.TimeUnit;
</span><span class='line'>import org.openqa.selenium.WebDriver;
</span><span class='line'>import org.openqa.selenium.firefox.FirefoxDriver;
</span><span class='line'> 
</span><span class='line'>public class PracticeBrowserCommands {
</span><span class='line'>    private static WebDriver driver = null;
</span><span class='line'> 
</span><span class='line'>    public static void main(String[] args) throws InterruptedException {
</span><span class='line'> 
</span><span class='line'>         // Create a new instance of the Firefox driver
</span><span class='line'>        driver = new FirefoxDriver();
</span><span class='line'> 
</span><span class='line'>        //Put a Implicit wait, this means that any search for elements on the page could take the time the implicit wait is set for before throwing exception
</span><span class='line'>        driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);
</span><span class='line'> 
</span><span class='line'>        //Launch the markdown syntax
</span><span class='line'>        driver.get("http://daringfireball.net/");
</span><span class='line'> 
</span><span class='line'>        // Storing Title name in String variable
</span><span class='line'>        String sTitle = driver.getTitle();
</span><span class='line'>        // Storing Title length in Int variable
</span><span class='line'>        int iTitleLength = driver.getTitle().length();
</span><span class='line'>        // Printing Title name on Console
</span><span class='line'>        System.out.println(sTitle);
</span><span class='line'>        // Printing Title length on console
</span><span class='line'>        System.out.println(iTitleLength);
</span><span class='line'> 
</span><span class='line'>        // Storing URL in String variable
</span><span class='line'>        sTitle = driver.getCurrentUrl();
</span><span class='line'>        // Storing URL length in Int variable
</span><span class='line'>        iTitleLength = driver.getCurrentUrl().length();
</span><span class='line'>        // Printing URL on Console
</span><span class='line'>        System.out.println(sTitle);
</span><span class='line'>        // Printing URL length on console
</span><span class='line'>        System.out.println(iTitleLength);
</span><span class='line'> 
</span><span class='line'>        // Refreshing current page
</span><span class='line'>        driver.get(driver.getCurrentUrl());  
</span><span class='line'> 
</span><span class='line'>        // Storing Page Source in String variable
</span><span class='line'>        String sPageSource = driver.getPageSource();
</span><span class='line'>        // Storing Page Source length in Int variable
</span><span class='line'>        int iPageSourceLength = driver.getPageSource().length();
</span><span class='line'>        // Printing Page Source on console
</span><span class='line'>        System.out.println(sPageSource);
</span><span class='line'>        // Printing Page SOurce length on console
</span><span class='line'>        System.out.println(iPageSourceLength);
</span><span class='line'> 
</span><span class='line'>        //Closing browser
</span><span class='line'>        driver.close();
</span><span class='line'>    }
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Webdriver : Browser Navigation Commands]]></title>
    <link href="http://www.tabaolan.com/blog/2014/08/07/webdriver-browser-navigation-commands/"/>
    <updated>2014-08-07T15:10:35+07:00</updated>
    <id>http://www.tabaolan.com/blog/2014/08/07/webdriver-browser-navigation-commands</id>
    <content type="html"><![CDATA[<h2>WebDriver Browser Navigation Commands</h2>

<p>The navigate interface exposes the ability to move backwards and forwards in your browser’s history but navigate().to() and get() do exactly the same thing. One’s just a lot easier to type than the other.</p>

<!--more-->


<h3>To Command</h3>

<p>Purpose : This command is use to navigate on specific page or URL in between the  test Command : driver.navigate().to(URL); Parameters : url – The URL to load. It is best to use a fully qualified URL.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>driver.navigate().to("http://www.gooogle.com");</span></code></pre></td></tr></table></div></figure>


<h3>Forward Command</h3>

<p>Purpose : This command is use to go on to next page like browser’s forward button.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>driver.navigate().forward();</span></code></pre></td></tr></table></div></figure>


<h3>Back Command</h3>

<p>Purpose : This command is use to go back to previous page like browser’s back button.</p>

<script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle" style="display:block" data-ad-client="ca-pub-5798698216356388" data-ad-slot="3378542759" data-ad-format="auto"></ins><script>(adsbygoogle = window.adsbygoogle || []).push({});</script></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>driver.navigate().back();</span></code></pre></td></tr></table></div></figure>


<h3>Practice Exercise</h3>

<p>1) Launch new Browser</p>

<p>2) Open Selenium docs website</p>

<p>3) Click on About link ( On top navigation)</p>

<p>4) Come back to Home page (Use ‘Back’ command)</p>

<p>5) Again go back to About page (This time use ‘Forward’ command)</p>

<p>6) Again come back to Home page (This time use ‘To’ command)</p>

<p>7) Refresh the Browser (Use ‘Refresh’ command)</p>

<p>8) Close the Browser</p>

<h4>Solution</h4>

<script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle" style="display:block" data-ad-client="ca-pub-5798698216356388" data-ad-slot="9425076351" data-ad-format="auto"></ins><script>(adsbygoogle = window.adsbygoogle || []).push({});</script></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>package automationFramework;
</span><span class='line'>
</span><span class='line'>import java.util.concurrent.TimeUnit;
</span><span class='line'>
</span><span class='line'>import org.openqa.selenium.By;
</span><span class='line'>import org.openqa.selenium.WebDriver;
</span><span class='line'>import org.openqa.selenium.firefox.FirefoxDriver;
</span><span class='line'>
</span><span class='line'>public class PracticeNavigationCommands {
</span><span class='line'>  private static WebDriver driver = null;
</span><span class='line'>  public static void main(String[] args) {
</span><span class='line'>
</span><span class='line'>      // Create a new instance of the Firefox driver
</span><span class='line'>      driver = new FirefoxDriver();
</span><span class='line'>
</span><span class='line'>      // Open Selenium website
</span><span class='line'>      driver.get("http://docs.seleniumhq.org/");
</span><span class='line'>
</span><span class='line'>      // Put an Implicit wait on driver
</span><span class='line'>        driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);
</span><span class='line'>
</span><span class='line'>      // Click on About link
</span><span class='line'>        driver.findElement(By.Xpath("//a[contains(@href, '/about/')]")).click();
</span><span class='line'>
</span><span class='line'>      // Go back to Home Page
</span><span class='line'>      driver.navigate().back();
</span><span class='line'>
</span><span class='line'>      // Go forward to About page
</span><span class='line'>        driver.navigate().forward();
</span><span class='line'>
</span><span class='line'>      // Go back to Home page
</span><span class='line'>        driver.navigate().to("http://docs.seleniumhq.org/");
</span><span class='line'>
</span><span class='line'>      // Refresh browser
</span><span class='line'>      driver.navigate().refresh();
</span><span class='line'>
</span><span class='line'>      // Close browser
</span><span class='line'>      driver.close();
</span><span class='line'>  }
</span><span class='line'>}
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Webdriver : Switch Window Commands]]></title>
    <link href="http://www.tabaolan.com/blog/2014/08/07/webdriver-switch-window-commands/"/>
    <updated>2014-08-07T15:05:35+07:00</updated>
    <id>http://www.tabaolan.com/blog/2014/08/07/webdriver-switch-window-commands</id>
    <content type="html"><![CDATA[<h2>WebDriver Switch Window Commands</h2>

<p>Some web applications have many frames or multiple windows. Selenium WebDriver assigns an alphanumeric id to each window as soon as the WebDriver object is instantiated. This unique alphanumeric id is called window handle. Selenium uses this unique id to switch control among several windows. In simple terms, each unique window has a unique ID, so that Selenium can differentiate when it is switching controls from one window to the other.</p>

<!--more-->


<h3>GetWindowHandle Command</h3>

<p>Purpose: To get the window handle of the current window.</p>

<script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle" style="display:block" data-ad-client="ca-pub-5798698216356388" data-ad-slot="9425076351" data-ad-format="auto"></ins><script>(adsbygoogle = window.adsbygoogle || []).push({});</script></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>String  handle= driver.getWindowHandle();//Return a string of alphanumeric window handle</span></code></pre></td></tr></table></div></figure>


<h3>GetWindowHandles Command</h3>

<p>Purpose: To get the window handle of all the current windows.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Set&lt;String&gt; handle= driver.getWindowHandles();//Return a set of window handle</span></code></pre></td></tr></table></div></figure>


<h3>SwitchTo Window Command</h3>

<p>Purpose: WebDriver supports moving between named windows using the “switchTo” method.</p>

<script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle" style="display:block" data-ad-client="ca-pub-5798698216356388" data-ad-slot="9425076351" data-ad-format="auto"></ins><script>(adsbygoogle = window.adsbygoogle || []).push({});</script></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>driver.switchTo().window("windowName");
</span></code></pre></td></tr></table></div></figure>


<script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle" style="display:block" data-ad-client="ca-pub-5798698216356388" data-ad-slot="3378542759" data-ad-format="auto"></ins><script>(adsbygoogle = window.adsbygoogle || []).push({});</script></p>

<p>Alternatively, you can pass a “window handle” to the “switchTo().window()” method. Knowing this, it’s possible to iterate over every open window like so:</p>

<script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle" style="display:block" data-ad-client="ca-pub-5798698216356388" data-ad-slot="9425076351" data-ad-format="auto"></ins><script>(adsbygoogle = window.adsbygoogle || []).push({});</script></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>for (String handle : driver.getWindowHandles()) {
</span><span class='line'>    driver.switchTo().window(handle);
</span><span class='line'>}
</span></code></pre></td></tr></table></div></figure>


<p>Switching between windows with Iterators:</p>

<script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle" style="display:block" data-ad-client="ca-pub-5798698216356388" data-ad-slot="9425076351" data-ad-format="auto"></ins><script>(adsbygoogle = window.adsbygoogle || []).push({});</script></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>
</span><span class='line'>driver.findElement(By.id(“id of the link which opens new window”)).click();
</span><span class='line'> //wait till two windows are not opened
</span><span class='line'> waitForNumberofWindowsToEqual(2);//this method is for wait
</span><span class='line'>
</span><span class='line'> Set handles = driver.getWindowHandles();
</span><span class='line'> firstWinHandle = driver.getWindowHandle(); handles.remove(firstWinHandle);
</span><span class='line'> String winHandle=handles.iterator().next();
</span><span class='line'> if (winHandle!=firstWinHandle){
</span><span class='line'> //To retrieve the handle of second window, extracting the handle which does not match to first window handle
</span><span class='line'> secondWinHandle=winHandle; //Storing handle of second window handle
</span><span class='line'>
</span><span class='line'>//Switch control to new window
</span><span class='line'> driver.switchTo().window(secondWinHandle);
</span></code></pre></td></tr></table></div></figure>


<h3>SwitchTo Frame Command</h3>

<p>Purpose: WebDriver supports moving between named frames using the “switchTo” method.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>driver.switchTo().frame("frameName");</span></code></pre></td></tr></table></div></figure>


<h3>SwitchTo PopUp Command</h3>

<p>Purpose: WebDriver supports moving between named PopUps using the “switchTo” method. After you’ve triggered an action that opens a popup, you can access the alert and it will return the currently open alert object. With this object you can now accept, dismiss, read its contents or even type into a prompt. This interface works equally well on alerts, confirms, and prompts.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Alert alert = driver.switchTo().alert();</span></code></pre></td></tr></table></div></figure>


<script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle" style="display:block" data-ad-client="ca-pub-5798698216356388" data-ad-slot="7145934352" data-ad-format="auto"></ins><script>(adsbygoogle = window.adsbygoogle || []).push({});</script></p>

<h3>Practice Exercise 1</h3>

<p>1) Launch new Browser</p>

<p>2) Open URL &ldquo;<a href="http://docs.seleniumhq.org/download/">http://docs.seleniumhq.org/download/</a>&rdquo;</p>

<p>3) Get Window name (Use GetWindowHandle command)</p>

<script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle" style="display:block" data-ad-client="ca-pub-5798698216356388" data-ad-slot="9425076351" data-ad-format="auto"></ins><script>(adsbygoogle = window.adsbygoogle || []).push({});</script></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>package practiceTestCases;
</span><span class='line'>import java.util.Set;
</span><span class='line'>import java.util.concurrent.TimeUnit;
</span><span class='line'>
</span><span class='line'>import org.openqa.selenium.By;
</span><span class='line'>import org.openqa.selenium.WebDriver;
</span><span class='line'>import org.openqa.selenium.firefox.FirefoxDriver;
</span><span class='line'>
</span><span class='line'>public class PracticeSwitchWindow {
</span><span class='line'>
</span><span class='line'>      public static WebDriver driver;
</span><span class='line'>      public static void main(String[] args) {
</span><span class='line'>
</span><span class='line'>          // Create a new instance of the Firefox driver
</span><span class='line'>          driver = new FirefoxDriver();
</span><span class='line'>
</span><span class='line'>          // Put an Implicit wait, this means that any search for elements on the page could take the time the implicit wait is set for before throwing exception
</span><span class='line'>          driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);
</span><span class='line'>
</span><span class='line'>          // Launch the URL
</span><span class='line'>          driver.get("http://docs.seleniumhq.org/download/");
</span><span class='line'>
</span><span class='line'>          // Store and Print the name of the First window on the console
</span><span class='line'>          String handle= driver.getWindowHandle();
</span><span class='line'>          System.out.println(handle);
</span><span class='line'>
</span><span class='line'>          // Close Original window
</span><span class='line'>          driver.quit();
</span><span class='line'>
</span><span class='line'>  }
</span><span class='line'>
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Webdriver : Wait Commands]]></title>
    <link href="http://www.tabaolan.com/blog/2014/08/07/webdriver-wait-commands/"/>
    <updated>2014-08-07T14:55:35+07:00</updated>
    <id>http://www.tabaolan.com/blog/2014/08/07/webdriver-wait-commands</id>
    <content type="html"><![CDATA[<h2>WebDriver Wait Commands</h2>

<p>Listing out the different WebDriver Wait statements that can be useful for an effective scripting and can avoid using the Thread.sleep() commands.</p>

<!--more-->


<h3>ImplicitlyWait Command</h3>

<p>Purpose: Selenium WebDriver has borrowed the idea of implicit waits from Watir. This means that we can tell Selenium that we would like it to wait for a certain amount of time before throwing an exception that it cannot find the element on the page. We should note that implicit waits will be in place for the entire time the browser is open. This means that any search for elements on the page could take the time the implicit wait is set for.</p>

<script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle" style="display:block" data-ad-client="ca-pub-5798698216356388" data-ad-slot="3378542759" data-ad-format="auto"></ins><script>(adsbygoogle = window.adsbygoogle || []).push({});</script></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>
</span><span class='line'> WebDriver driver =&gt; new FirefoxDriver();
</span><span class='line'> driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);
</span><span class='line'> driver.get("http://url_that_delays_loading");
</span><span class='line'> WebElement myDynamicElement = driver.findElement(By.id("myDynamicElement"));
</span><span class='line'> </span></code></pre></td></tr></table></div></figure>


<script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle" style="display:block" data-ad-client="ca-pub-5798698216356388" data-ad-slot="9425076351" data-ad-format="auto"></ins><script>(adsbygoogle = window.adsbygoogle || []).push({});</script></p>

<h3>FluentWait Command</h3>

<p>Purpose: Each FluentWait instance defines the maximum amount of time to wait for a condition, as well as the frequency with which to check the condition. Furthermore, the user may configure the wait to ignore specific types of exceptions whilst waiting, such as NoSuchElementExceptions when searching for an element on the page.</p>

<script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle" style="display:block" data-ad-client="ca-pub-5798698216356388" data-ad-slot="9425076351" data-ad-format="auto"></ins><script>(adsbygoogle = window.adsbygoogle || []).push({});</script></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>// Waiting 30 seconds for an element to be present on the page, checking
</span><span class='line'>  // for its presence once every 5 seconds.
</span><span class='line'>  Wait wait = new FluentWait(driver)
</span><span class='line'>    .withTimeout(30, SECONDS)
</span><span class='line'>    .pollingEvery(5, SECONDS)
</span><span class='line'>    .ignoring(NoSuchElementException.class);
</span><span class='line'>  WebElement foo = wait.until(new Function() {
</span><span class='line'>    public WebElement apply(WebDriver driver) {
</span><span class='line'>    return driver.findElement(By.id("foo"));
</span><span class='line'>    }
</span><span class='line'>   });
</span></code></pre></td></tr></table></div></figure>


<script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle" style="display:block" data-ad-client="ca-pub-5798698216356388" data-ad-slot="7145934352" data-ad-format="auto"></ins><script>(adsbygoogle = window.adsbygoogle || []).push({});</script></p>

<h3>ExpectedConditions Command</h3>

<p>Purpose: Models a condition that might reasonably be expected to eventually evaluate to something that is neither null nor false.</p>

<script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle" style="display:block" data-ad-client="ca-pub-5798698216356388" data-ad-slot="7145934352" data-ad-format="auto"></ins><script>(adsbygoogle = window.adsbygoogle || []).push({});</script></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>WebDriverWait wait = new WebDriverWait(driver, 10);
</span><span class='line'>WebElement element = wait.until(ExpectedConditions.elementToBeClickable(By.id(&gt;someid&gt;)));</span></code></pre></td></tr></table></div></figure>


<h3>PageLoadTimeout Command</h3>

<p>Purpose: Sets the amount of time to wait for a page load to complete before throwing an error. If the timeout is negative, page loads can be indefinite.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>driver.manage().timeouts().pageLoadTimeout(100, SECONDS);</span></code></pre></td></tr></table></div></figure>


<h3>SetScriptTimeout Command</h3>

<p>Purpose: Sets the amount of time to wait for an asynchronous script to finish execution before throwing an error. If the timeout is negative, then the script will be allowed to run indefinitely.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>driver.manage().timeouts().setScriptTimeout(100,SECONDS);</span></code></pre></td></tr></table></div></figure>


<h3>Sleep Command</h3>

<p>Purpose: This is rarely used, as it always force the browser to wait for a specific time. Thread.Sleep is never a good idea and that’s why Selenium provides wait primitives. If you use them you can specify much higher timeout value which makes tests more reliable without slowing them down as the condition can be evaluated as often as it’s required.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>thread.sleep(1000);</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Automation Framework P1 : Introduction]]></title>
    <link href="http://www.tabaolan.com/blog/2014/08/07/selenium-automation-framework-introduction/"/>
    <updated>2014-08-07T14:55:35+07:00</updated>
    <id>http://www.tabaolan.com/blog/2014/08/07/selenium-automation-framework-introduction</id>
    <content type="html"><![CDATA[<h2>Selenium Automation Framework</h2>

<h3>Introduction</h3>

<p>Mission critical software undergoes rigorous functional tests, especially supported by automated testing frameworks. Automating these frameworks and maintaining quality software releases are critical to business performance. Enterprises often face the dilemma of balancing costs and managing resources to ensure that automation frameworks cover all the business scenarios and the applications delivered are error – free.
By implementing the appropriate automated testing framework, enterprises can significantly increase the speed and accuracy of the testing process, provide a higher return on investment (ROI) from software projects and systematically minimize risk.</p>

<!--more-->


<h3>Why Framework</h3>

<p>A framework defines the organization’s way of doing things – a ‘Single Standard’. Following this standard would result in the project team achieving:</p>

<h4>Script-less representation of Automated tests</h4>

<p>The testing framework should offer point-and-click interface for accessing and interacting with the application components under test—as opposed to presenting line after line of scripting. Testers should be able to visualize each step of the business scenario, view and edit test cases intuitively. This will shorten the learning curve for testers and help QA teams meet deadlines.</p>

<h4>Data Driven tests</h4>

<p>A key benefit of automating functional testing is the ability to test large volumes of data on the system quickly. But you must be able to manipulate the data sets, perform calculations, and quickly create hundreds of test iterations and permutations with minimal effort. Test Automation Frameworks must have capability to integrate with spreadsheets and provide powerful calculation features.</p>

<h4>Concise Reporting</h4>

<p>The ability to run high volume of tests is of little benefit if the results of the tests are not easy to understand. The framework must automatically generate reports of the test run and show the results in an easy-to-read format. The reports should provide specifics about where application failures occurred and what test data was used. Reports must present application screen shots for every step to highlight any discrepancies and provide detailed explanations of each checkpoint pass and failure. Reports must also be easily shared across the entire QA and development teams.</p>

<h4>Standard Scripting and Team Consistency</h4>

<p>Scripting standard should be maintained across the framework library creation, which includes business components, system communications, data check points, loggers, reporters etc. Project team should follow the defined scripting standards. Published standards across the project team pre-empt the effort involved in duplicate coding, which prevent individuals from following their own coding standards.</p>

<h4>Encapsulation from Complexities</h4>

<p>Test engineers are encapsulated from the complexities and critical aspects of the code. Engineers are exposed only to the implemented libraries and tests are executed by just invoking the libraries.</p>

<h4>Implement and Maximize Re-Usability</h4>

<script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle" style="display:block" data-ad-client="ca-pub-5798698216356388" data-ad-slot="3378542759" data-ad-format="auto"></ins><script>(adsbygoogle = window.adsbygoogle || []).push({});</script></p>

<p>Establish the developed libraries across the organization/project team/product team, i.e. publish the library and provide access rights. Utilities/components shared across the team. Usage of available libraries. Minimized effort for repeated regression cycle.</p>

<h3>Class Diagram</h3>

<p><img src="http://www.tabaolan.com/images/diagram.png"></p>

<p>What does this look like in code? How would we best accomplish this task? Well, that depends on what you are doing. For example, maybe you need to test 5 different types of projects, or maybe you need to test same page differently each time. Either way, as a coding standard, you should always design classes with a specific purpose. Anything that is shared should go into a base class for common functionality.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Beginner with Selenium WebDriver Part 3 : Download WebDriver Java client]]></title>
    <link href="http://www.tabaolan.com/blog/2014/08/07/newbie-part-3-download-webdriver-java-client/"/>
    <updated>2014-08-07T14:55:35+07:00</updated>
    <id>http://www.tabaolan.com/blog/2014/08/07/newbie-part-3-download-webdriver-java-client</id>
    <content type="html"><![CDATA[<h2>Beginner with Selenium WebDriver : Download WebDriver Java client</h2>

<h3>Download Selenium WebDriver Java client</h3>

<p>Selenium webdriver supports many languages and each language has its own client driver. Here we are configuring selenium 2 with Java so we need ‘webdriver Java client driver’.</p>

<!--more-->


<p>1) <a href="http://adf.ly/p8uzn">Click here</a> to go on WebDriver Java client driver download page for webdriver download file. On that page click on ‘Download‘ link of Java client driver as shown in the below image.</p>

<p><img src="http://www.tabaolan.com/images/Download-Webdriver-Java-Client-1.png"></p>

<p>2) Save the zip file to your disk.</p>

<p><img src="http://www.tabaolan.com/images/Download-Webdriver-Java-Client-2.png"></p>

<p>3) Once you have downloaded the archive you will need to Extract the zip file, which will create the unzipped Selenium Java folder.</p>

<script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle" style="display:block" data-ad-client="ca-pub-5798698216356388" data-ad-slot="7145934352" data-ad-format="auto"></ins><script>(adsbygoogle = window.adsbygoogle || []).push({});</script>
<img src="http://www.tabaolan.com/images/Download-Webdriver-Java-Client-3.png"></p>

<p>4) You may want to Extract the archive to the folder where you are maintaing the test ware for your project. I like to extract it at the same location and then move it as per my needs.</p>

<p><img src="http://www.tabaolan.com/images/Download-Webdriver-Java-Client-4.png"></p>

<p>5) Once the extraction process is complete, Open the Selenium folder.</p>

<p><img src="http://www.tabaolan.com/images/Download-Webdriver-Java-Client-5.png"></p>

<p>6) There will be ‘libs’ folder, 2 jar files and change log in unzipped folder as shown in bellow figure. We will use all these files for configuring webdriver in eclipse.</p>

<script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle" style="display:block" data-ad-client="ca-pub-5798698216356388" data-ad-slot="3378542759" data-ad-format="auto"></ins><script>(adsbygoogle = window.adsbygoogle || []).push({});</script>
<img src="http://www.tabaolan.com/images/Download-Webdriver-Java-Client-6.png"></p>

<p>7 ) Now you will take a look in the <a href="http://www.tabaolan.com/blog/2014/08/07/newbie-part-4-configuration-eclipse-with-selenium-driver-and-create-fisrt-test/">Part 4 : Configuration Eclipse with Selenium driver and Create Fisrt Test</a></p>
]]></content>
  </entry>
  
</feed>
