<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Selenium Tutorial]]></title>
  <link href="http://www.tabaolan.com/atom.xml" rel="self"/>
  <link href="http://www.tabaolan.com/"/>
  <updated>2014-11-07T04:36:45+00:00</updated>
  <id>http://www.tabaolan.com/</id>
  <author>
    <name><![CDATA[Ta Bao Lan]]></name>
    <email><![CDATA[tabaolan1987@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Mobile Testing : Guide to Functional testing in Mobile App]]></title>
    <link href="http://www.tabaolan.com/mobile-testing-guide-to-test-mobile-app/"/>
    <updated>2014-08-21T05:44:47+01:00</updated>
    <id>http://www.tabaolan.com/mobile-testing-guide-to-test-mobile-app</id>
    <content type="html"><![CDATA[<h2>Mobile Testing : Guide to Functional testing in Mobile App</h2>

<p>Some or all of the following testing types may be performed depending on your mobile testing requirements</p>

<p>1.Functional testing</p>

<p>2.Performance testing</p>

<p>3.Security testing</p>

<p>4.Usability testing</p>

<p>5.Compatibility testing</p>

<p>6.Recoverability Testing</p>

<h3>Functional testing</h3>

<script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle" style="display:block" data-ad-client="ca-pub-5798698216356388" data-ad-slot="9425076351" data-ad-format="auto"></ins><script>(adsbygoogle = window.adsbygoogle || []).push({});</script></p>

<p>The functional testing of Mobiles normally consists in the areas of testing user interactions as well as testing the transactions. The various factors which are relevant in functional testing are</p>

<p>1.Type of application based upon the business functionality usages (banking, gaming, social or business)</p>

<p>2.Target audience type (consumer, enterprise, education)</p>

<p>3.Distribution channel which is used to spread the application (e.g. Apple App Store, Google play, direct distribution)</p>

<p>The most fundamental test scenarios in the functional testing can be considered as :</p>

<p>1.To validate whether all the required mandatory fields are working as required.</p>

<p>2.To validate that the mandatory fields are displayed in the screen in a distinctive way than the non-mandatory fields.</p>

<p>3.To validate whether the application works as per as requirement whenever the application starts/stops.</p>

<p>4.To validate whether the application goes into minimized mode whenever there is an incoming phone call. In order to validate the same we need to use a second phone, to call the device.</p>

<p>5.To validate whether the phone is able to store, process and receive SMS whenever the app is running. In order to validate the same we need to use a second phone to send sms to the device which is being tested and where the application under test is currently running.</p>

<p>6.To validate that the device is able to perform required multitasking requirements whenever it is necessary to do so.</p>

<p>7.To validate that the application allows necessary social network options such as sharing, posting and navigation etc.</p>

<p>8.To validate that the application supports any payment gateway transaction such as Visa, Mastercard, Paypal etc as required by the application.</p>

<p>9.To validate that the page scrolling scenarios are being enabled in the application as necessary.</p>

<p>10.To validate that the navigation between relevant modules in the application are as per the requirement.</p>

<p>11.To validate that the truncation errors are absolutely to an affordable limit.</p>

<p>12.To validate that the user receives an appropriate error message like “Network error. Please try after some time” whenever there is any network error.</p>

<p>13.To validate that the installed application enables other applications to perform satisfactorily, and it does not eat into the memory of the other applications.</p>

<p>14.To validate that the application resumes at the last operation in case of a hard reboot or system crash.</p>

<p>15.To validate whether the installation of the application can be done smoothly provided the user has the necessary resources and it does not lead to any significant errors.</p>

<p>16.To validate that the application performs auto start facility according to the requirements.</p>

<p>17.To validate whether the application performs according to the requirement in all versions of Mobile that is 2g, 3g and 4g.</p>

<p>18.To perform regression testing to uncover new software bugs in existing areas of a system after changes have been made to them. Also rerun previously performed tests to determine that the program behavior has not changed due to the changes.</p>

<p>19.To validate whether the application provides an available user guide for those who are not familiar to the app</p>

<script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle" style="display:block" data-ad-client="ca-pub-5798698216356388" data-ad-slot="3378542759" data-ad-format="auto"></ins><script>(adsbygoogle = window.adsbygoogle || []).push({});</script></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mobile Testing : Guide to Performance Testing in Mobile App]]></title>
    <link href="http://www.tabaolan.com/mobile-testing-guide-to-performance-testing-in-mobile/"/>
    <updated>2014-08-21T05:40:47+01:00</updated>
    <id>http://www.tabaolan.com/mobile-testing-guide-to-performance-testing-in-mobile</id>
    <content type="html"><![CDATA[<h2>Performance testing</h2>

<script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle" style="display:block" data-ad-client="ca-pub-5798698216356388" data-ad-slot="9425076351" data-ad-format="auto"></ins><script>(adsbygoogle = window.adsbygoogle || []).push({});</script></p>

<p>This type of testing’s fundamental objective is to ensure that the application performs acceptably under certain performance requirements such as access by a huge number of users or the removal of a key infrastructure part like a database server.</p>

<p>The general test scenarios for performance testing in a Mobile application are:</p>

<p>1.To determine whether the application performs as per the requirement under different load conditions.</p>

<p>2.To determine whether the current network coverage is able to support the application at peak, average and minimum user levels.</p>

<p>3.To determine whether the existing client-server configuration setup provides the required optimum performance level.</p>

<p>4.To identify the various application and infrastructure bottlenecks which prevent the application to perform at the required acceptability levels.</p>

<p>5.To validate whether the response time of the application is as per as the requirements.</p>

<p>6.To evaluate product and/or hardware to determine if it can handle projected load volumes.</p>

<p>7.To evaluate whether the battery life can support the application to perform under projected load volumes.</p>

<p>8.To validate application performance when network is changed to WIFI from 2G/3G or vice versa.</p>

<p>9.To validate each of the required the CPU cycle is optimization</p>

<p>10.To validate that the battery consumption, memory leaks, resources like GPS, Camera performance is well within required guidelines.</p>

<p>11.To validate the application longevity whenever the user load is rigorous.</p>

<p>12.To validate the network performance while moving around with the device.</p>

<script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle" style="display:block" data-ad-client="ca-pub-5798698216356388" data-ad-slot="7145934352" data-ad-format="auto"></ins><script>(adsbygoogle = window.adsbygoogle || []).push({});</script></p>

<p>13.To validate the application performance when only intermittent phases of connectivity is required.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mobile Testing : Guide to Security Testing in Mobile App]]></title>
    <link href="http://www.tabaolan.com/mobile-testing-guide-to-security-testing-in-mobile/"/>
    <updated>2014-08-21T05:35:47+01:00</updated>
    <id>http://www.tabaolan.com/mobile-testing-guide-to-security-testing-in-mobile</id>
    <content type="html"><![CDATA[<h2>Security testing</h2>

<p><img src="http://www.tabaolan.com/images/mb1.png"></p>

<p>The fundamental objective of security testing is to ensure that the application’s data and networking security requirements are met as per guidelines.</p>

<p>The following are the most crucial areas for checking the security of Mobile applications.</p>

<p>1.To validate that the application is able to withstand any brute force attack which is an automated process of trial and error used to guess a person’s username, password or credit-card number.</p>

<p>2.To validate whether an application is not permitting an attacker to access sensitive content or functionality without proper authentication.</p>

<p>3.To validate that the application has a strong password protection system and it does not permit an attacker to obtain, change or recover another user’s password.</p>

<p>4.To validate that the application does not suffer from insufficient session expiration.</p>

<p>5.To identify the dynamic dependencies and take measures to prevent any attacker for accessing these vulnerabilities.</p>

<p>6.To prevent from SQL injection related attacks.</p>

<script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle" style="display:block" data-ad-client="ca-pub-5798698216356388" data-ad-slot="9425076351" data-ad-format="auto"></ins><script>(adsbygoogle = window.adsbygoogle || []).push({});</script></p>

<p>7.To identify and recover from any unmanaged code scenarios.</p>

<p>8.To ensure whether the certificates are validated, does the application implement Certificate Pinning or not.</p>

<p>9.To protect the application and the network from the denial of service attacks.</p>

<p>10.To analyse the data storage and data validation requirements.</p>

<p>11.To enable the session management for preventing unauthorized users to access unsolicited information.</p>

<p>12.To check if any cryptography code is broken and ensure that it is repaired.</p>

<p>13.To validate whether the business logic implementation is secured and not vulnerable to any attack from outside.</p>

<p>14.To analyse file system interactions, determine any vulnerability and correct these problems.</p>

<p>15.To validate the protocol handlers for example trying to reconfigure the default landing page for the application using a malicious iframe.</p>

<p>16.To protect against malicious client side injections.</p>

<p>17.To protect against malicious runtime injections.</p>

<p>18.To investigate file caching and prevent any malicious possibilities from the same.</p>

<p>19.To prevent from insecure data storage in the keyboard cache of the applications.</p>

<script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle" style="display:block" data-ad-client="ca-pub-5798698216356388" data-ad-slot="7145934352" data-ad-format="auto"></ins><script>(adsbygoogle = window.adsbygoogle || []).push({});</script></p>

<p>20.To investigate cookies and preventing any malicious deeds from the cookies.</p>

<p>21.To provide regular audits for data protection analysis.</p>

<p>22.Investigate custom created files and preventing any malicious deeds from the custom created files.</p>

<p>23.To prevent from buffer overflows and memory corruption cases.</p>

<p>24.To analyse different data streams and preventing any vulnerabilities from these.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mobile Testing : Other Testing in Mobile App]]></title>
    <link href="http://www.tabaolan.com/mobile-testing-other-testing-in-mobile/"/>
    <updated>2014-08-21T05:30:47+01:00</updated>
    <id>http://www.tabaolan.com/mobile-testing-other-testing-in-mobile</id>
    <content type="html"><![CDATA[<h2>Usability testing</h2>

<p>The usability testing process of the Mobile application is performed to have a quick and easy step application with less functionality than a slow and difficult application with many features. The main objective is to ensure that we end up having an easy-to-use, intuitive and similar to industry-accepted interfaces which are widely used.</p>

<p>1.To ensure that the buttons should have the required size and be suitable to big fingers.</p>

<p>2.To ensure that the buttons are placed in the same section of the screen to avoid confusion to the end users.</p>

<p>3.To ensure that the icons are natural and consistent with the application.</p>

<p>4.To ensure that the buttons, which have the same function should also have the same color.</p>

<p>5.To ensure that the validation for the tapping zoom-in and zoom-out facilities should be enabled.</p>

<p>6.To ensure that the keyboard input can be minimized in an appropriate manner.</p>

<p>7.To ensure that the application provides a method for going back or undoing an action, on touching the wrong item, within an acceptable duration.</p>

<p>8.To ensure that the contextual menus are not overloaded because it has to be used quickly.</p>

<p>9.To ensure that the text is kept simple and clear to be visible to the users.</p>

<p>10.To ensure that the short sentences and paragraphs are readable to the end users.</p>

<p>11.To ensure that the font size is big enough to be readable and not too big or too small.</p>

<p>12.To validate the application prompts the user whenever the user starts downloading a large amount of data which may be not conducive for the application performance.</p>

<p>13.To validate that the closing of the application is performed from different states and verify if it re-opens in the same state.</p>

<p>14.To ensure that all strings are converted into appropriate languages whenever a language translation facility is available.</p>

<p>15.To ensure that the application items are always synchronized according to the user actions.</p>

<p>16.To ensure that the end user is provided with a user manual which helps the end user to understand and operate the application who may be not familiar with the application’s proceedings</p>

<p>Usability testing is normally performed by manual users since only human beings can understand the sensibility and comfort ability of the other users.</p>

<h2>Compatibility testing</h2>

<script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle" style="display:block" data-ad-client="ca-pub-5798698216356388" data-ad-slot="9425076351" data-ad-format="auto"></ins><script>(adsbygoogle = window.adsbygoogle || []).push({});</script></p>

<p>Compatibility testing on mobile devices is performed to ensure that since mobile devices have different size, resolution, screen, version and hardware so the application should be tested across all the devices to ensure that the application works as desired.</p>

<p>The following are the most prominent areas for compatibility testing.</p>

<p>1.To validate that the user Interface of the application is as per the screen size of the device, no text/control is partially invisible or inaccessible.</p>

<p>2.To ensure that the text is readable for all users for the application.</p>

<p>3.To ensure that the call/alarm functionality is enabled whenever the application is running. The application is minimized or suspended on the event of a call and then whenever the call stops the application is resumed.</p>

<h2>Recoverability Testing</h2>

<script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle" style="display:block" data-ad-client="ca-pub-5798698216356388" data-ad-slot="3378542759" data-ad-format="auto"></ins><script>(adsbygoogle = window.adsbygoogle || []).push({});</script></p>

<p>1.Crash recovery and transaction interruptions</p>

<p>2.Validation of the effective application recovery situation post unexpected interruption/crash scenarios.</p>

<p>3.Verification of how the application handles a transaction during a power failure (i.e. Battery dies or a sudden manual shutdown of the device)</p>

<p>4.The validation of the process where the connection is suspended, the system needs to re-establish for recovering the data directly affected by the suspended connection.</p>

<h2>Other Important Checks</h2>

<script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle" style="display:block" data-ad-client="ca-pub-5798698216356388" data-ad-slot="9425076351" data-ad-format="auto"></ins><script>(adsbygoogle = window.adsbygoogle || []).push({});</script></p>

<p>1.Installation testing (whether the application can be installed in a reasonable amount of time and with required criterion)</p>

<p>2.Uninstallation testing (whether the application can be uninstalled in a reasonable amount of time and with required criterion)</p>

<p>3.Network test cases (validation of whether the network is performing under required load or not, whether the network is able to support all the necessary applications during the testing procedures).</p>

<p>4.Check Unmapped keys</p>

<p>5.Check application splash screen</p>

<p>6.Continued keypad entry during interrupts and other times like network issues</p>

<p>7.Methods which deal with exiting the application</p>

<p>8.Charger effect while an application is running in the background</p>

<p>9.Low battery and high performance demand</p>

<p>10.Removal of battery while an application is being performed</p>

<p>11.Consumption of battery by application</p>

<p>12.Check Application side effects</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mobile testing : Setup Selendroid and create first test script of android application]]></title>
    <link href="http://www.tabaolan.com/mobile-testing-seup-selendroid-and-create-first-test-script-of-android-application/"/>
    <updated>2014-08-21T05:30:45+01:00</updated>
    <id>http://www.tabaolan.com/mobile-testing-seup-selendroid-and-create-first-test-script-of-android-application</id>
    <content type="html"><![CDATA[<h2>Setup Selendroid and create first test script of android application</h2>

<h3>About Selendroid :</h3>

<p>Selendroid is an open source automation framework which drives of UI of android native, hybrid and mobile web application.</p>

<p>It supports both emulator and real device. It uses Json Wire Protocol to run webdriver test scripts on device.</p>

<p>It can be integrated with selenium grid for parallel execution on multiple nodes.</p>

<p>No need any modification in application and not need source code to automate application.</p>

<script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle" style="display:block" data-ad-client="ca-pub-5798698216356388" data-ad-slot="3378542759" data-ad-format="auto"></ins><script>(adsbygoogle = window.adsbygoogle || []).push({});</script></p>

<h3>Prerequisites:</h3>

<p>1.JDK should be installed and java home path setup in your machine.</p>

<p>2.Android SDK should be installed on your machine and android path should be setup in your machine</p>

<p>3.Download Selendroid from link: <a href="http://selendroid.io/">Click here</a></p>

<p>4.Selenium jar file from : <a href="http://docs.seleniumhq.org/download/">Click here</a></p>

<p>5.Eclipse.</p>

<p>6.Create new Emulator or attached real devices with you machine.</p>

<h3>Run Server:</h3>

<p>Open command prompt and go to downloaded Selendroid jar file and run below command</p>

<script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle" style="display:block" data-ad-client="ca-pub-5798698216356388" data-ad-slot="9425076351" data-ad-format="auto"></ins><script>(adsbygoogle = window.adsbygoogle || []).push({});</script></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>java -jar selendroid-standalone-0.9.0-with-dependencies.jar -aut resigned-selendroid-test-app-0.9.0.apk</span></code></pre></td></tr></table></div></figure>


<p>Where selendroid-standalone-0.9.0-with-dependencies.jar is downloaded selendroid jar file and resigned-selendroid-test-app-0.9.0.apk application apk file name.</p>

<p>You can download this sample application from link: (Download)[<a href="http://selendroid.io/">http://selendroid.io/</a>]</p>

<p><img src="http://www.tabaolan.com/images/mb13.jpg"></p>

<h3>Check server status</h3>

<p>launch browser and open url [<a href="http://localhost:4444/wd/hub/status">http://localhost:4444/wd/hub/status</a>] you should see your url like below screen:</p>

<p><img src="http://www.tabaolan.com/images/mb14.jpg"></p>

<h3>Step to create test script:</h3>

<p>1.Create a java project in eclipse.</p>

<p>2.Add selenium and selendroid jar file in eclipse environments:</p>

<p>3.Create package “com.test“ and add java file “SelendroidTest.java” with below code:</p>

<script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle" style="display:block" data-ad-client="ca-pub-5798698216356388" data-ad-slot="7145934352" data-ad-format="auto"></ins><script>(adsbygoogle = window.adsbygoogle || []).push({});</script></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>package com.test;
</span><span class='line'> 
</span><span class='line'>import io.selendroid.SelendroidCapabilities;
</span><span class='line'>import io.selendroid.SelendroidConfiguration;
</span><span class='line'>import io.selendroid.SelendroidDriver;
</span><span class='line'>import io.selendroid.SelendroidLauncher;
</span><span class='line'>import org.openqa.selenium.By;
</span><span class='line'>import org.openqa.selenium.WebDriver;
</span><span class='line'>import org.openqa.selenium.WebElement;
</span><span class='line'>import org.testng.Assert;
</span><span class='line'>import org.testng.annotations.AfterSuite;
</span><span class='line'>import org.testng.annotations.BeforeSuite;
</span><span class='line'>import org.testng.annotations.Test;
</span><span class='line'> 
</span><span class='line'>public class SelendroidTest {
</span><span class='line'>  
</span><span class='line'> private WebDriver driver ;
</span><span class='line'>  
</span><span class='line'> @BeforeSuite
</span><span class='line'> public void setUp() throws Exception
</span><span class='line'> {  
</span><span class='line'>      SelendroidConfiguration config = new SelendroidConfiguration();
</span><span class='line'>     config.addSupportedApp("selendroid-test-app-0.9.0.apk");
</span><span class='line'>     SelendroidLauncher selendroidServer = new SelendroidLauncher(config);
</span><span class='line'>     selendroidServer.lauchSelendroid();
</span><span class='line'> 
</span><span class='line'>     SelendroidCapabilities caps = new SelendroidCapabilities("io.selendroid.testapp:0.9.0");
</span><span class='line'>     driver = new SelendroidDriver(caps);
</span><span class='line'> }
</span><span class='line'> 
</span><span class='line'> @Test
</span><span class='line'> public void selendroidTest() throws Exception
</span><span class='line'> {  
</span><span class='line'>  WebElement inputField = driver.findElement(By.id("my_text_field"));
</span><span class='line'>  Assert.assertEquals("true", inputField.getAttribute("enabled"));
</span><span class='line'>  inputField.sendKeys("Selendroid");
</span><span class='line'> 
</span><span class='line'>  Assert.assertEquals("Selendroid", inputField.getText());
</span><span class='line'>   
</span><span class='line'>  //click EN butoon
</span><span class='line'>  WebElement button = driver.findElement(By.id("buttonTest"));  
</span><span class='line'>  button.click();
</span><span class='line'>   
</span><span class='line'>  //click accept button
</span><span class='line'>  button = driver.findElement(By.id("button2"));  
</span><span class='line'>  button.click();
</span><span class='line'>   
</span><span class='line'>  Thread.sleep(5000);
</span><span class='line'>  //click on registration button
</span><span class='line'>  button = driver.findElement(By.id("startUserRegistration"));  
</span><span class='line'>  button.click();
</span><span class='line'>   
</span><span class='line'>  Thread.sleep(10000);
</span><span class='line'>  // fill registration form data
</span><span class='line'>  WebElement element = driver.findElement(By.id("label_username"));
</span><span class='line'>  String text = element.getText();
</span><span class='line'>  System.out.println(text);
</span><span class='line'>  element = driver.findElement(By.id("inputUsername"));
</span><span class='line'>  element.sendKeys("bob");
</span><span class='line'>   
</span><span class='line'>  element = driver.findElement(By.id("inputEmail"));
</span><span class='line'>  element.sendKeys("test@gmail.com");
</span><span class='line'>   
</span><span class='line'>  element = driver.findElement(By.id("inputPassword"));
</span><span class='line'>  element.clear();
</span><span class='line'>  element.sendKeys("test1233");
</span><span class='line'>   
</span><span class='line'>  element = driver.findElement(By.id("inputName"));
</span><span class='line'>  element.clear();
</span><span class='line'>  element.sendKeys("My Name ");
</span><span class='line'>   
</span><span class='line'>  element = driver.findElement(By.id("input_preferedProgrammingLanguage"));
</span><span class='line'>  element.click();
</span><span class='line'>   
</span><span class='line'>  element = driver.findElement(By.id("text1"));
</span><span class='line'>  element.click();
</span><span class='line'>   
</span><span class='line'>  element = driver.findElement(By.id("input_adds"));
</span><span class='line'>  element.click();
</span><span class='line'>   
</span><span class='line'>  element = driver.findElement(By.id("btnRegisterUser"));
</span><span class='line'>  element.click();
</span><span class='line'>   
</span><span class='line'>  element = driver.findElement(By.id("buttonRegisterUser"));
</span><span class='line'>  element.click();  
</span><span class='line'> }
</span><span class='line'>  
</span><span class='line'> @AfterSuite
</span><span class='line'> public void tearDown(){
</span><span class='line'>        driver.quit();
</span><span class='line'> }
</span><span class='line'>} </span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mobile testing : Create first Appium WebDriver android script in Java]]></title>
    <link href="http://www.tabaolan.com/mobile-testing-create-first-appium-webdriver-android-script-in-java/"/>
    <updated>2014-08-21T05:30:30+01:00</updated>
    <id>http://www.tabaolan.com/mobile-testing-create-first-appium-webdriver-android-script-in-java</id>
    <content type="html"><![CDATA[<h2>Setup and create first Appium Webdriver android script in Java</h2>

<h3>About Appium:</h3>

<p>Appium is open source automation tool for iOS and android application supported by Sauce Lab. It is cross platform, supported Native, Hybrid iOS and android application. At backend it uses webdriver JSON wire protocol to communicate with iOS and android applications.</p>

<p>Appium supported many languages like Webdriver. You can write your test scripts any language that has selenium client library.</p>

<p>Appium support UIAutomator framework for ios and android library (For newer Api) and use selendroid for older android platform.</p>

<p>In this post I will show you how to setup and create Appium android script in java language.</p>

<h3>Prerequisite:</h3>

<p>1.JDK should be installed and java home path setup in your machine.</p>

<p>2.Android SDK should be installed on your machine and android path should be setup in your machine.</p>

<p>3.Appium for window download from : <a href="http://appium.io/">Click here</a></p>

<p>4.Selenium jar file from : <a href="http://docs.seleniumhq.org/download/">Download</a></p>

<p>5.Eclipse.</p>

<script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle" style="display:block" data-ad-client="ca-pub-5798698216356388" data-ad-slot="7145934352" data-ad-format="auto"></ins><script>(adsbygoogle = window.adsbygoogle || []).push({});</script></p>

<h3>Steps to create and run android test script:</h3>

<p>1.Go to Appium downloaded package unzip and click on “Appium.exe”. Appium server console will be open like below:</p>

<p><img src="http://www.tabaolan.com/images/mb11.jpg"></p>

<p>2.You can change IP address and port, but keep it as a default.</p>

<p>3.Click on Launch button to run appium server you should see appium server running window like below</p>

<p><img src="http://www.tabaolan.com/images/mb12.jpg"></p>

<p>4.Launch emulator or connect device to the machine. Run adb command to check device is connected to your machine.</p>

<p>5.Below is sample code of webdriver in java for Appium in TestNg framework.</p>

<script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle" style="display:block" data-ad-client="ca-pub-5798698216356388" data-ad-slot="9425076351" data-ad-format="auto"></ins><script>(adsbygoogle = window.adsbygoogle || []).push({});</script></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>package com.test;
</span><span class='line'> 
</span><span class='line'>import java.io.File;
</span><span class='line'>import java.net.URL;
</span><span class='line'>import java.util.List;
</span><span class='line'>import org.openqa.selenium.By;
</span><span class='line'>import org.openqa.selenium.Capabilities;
</span><span class='line'>import org.openqa.selenium.WebDriver;
</span><span class='line'>import org.openqa.selenium.WebElement;
</span><span class='line'>import org.openqa.selenium.interactions.HasTouchScreen;
</span><span class='line'>import org.openqa.selenium.interactions.TouchScreen;
</span><span class='line'>import org.openqa.selenium.remote.CapabilityType;
</span><span class='line'>import org.openqa.selenium.remote.DesiredCapabilities;
</span><span class='line'>import org.openqa.selenium.remote.RemoteTouchScreen;
</span><span class='line'>import org.openqa.selenium.remote.RemoteWebDriver;
</span><span class='line'>import org.testng.annotations.AfterMethod;
</span><span class='line'>import org.testng.annotations.BeforeMethod;
</span><span class='line'>import org.testng.annotations.Test;
</span><span class='line'> 
</span><span class='line'>public class AppiumTest {
</span><span class='line'>  
</span><span class='line'>    private WebDriver driver;
</span><span class='line'> 
</span><span class='line'>    @BeforeMethod
</span><span class='line'>    public void setUp() throws Exception {
</span><span class='line'>      
</span><span class='line'>        // set up appium
</span><span class='line'>        File appDir = new File("{pathApk file}");
</span><span class='line'>        File app = new File(appDir, "{APK file Name}"); //my case “demo1.apk”
</span><span class='line'>        DesiredCapabilities capabilities = new DesiredCapabilities();
</span><span class='line'>        capabilities.setCapability("device","Android");
</span><span class='line'>        capabilities.setCapability(CapabilityType.BROWSER_NAME,  "");
</span><span class='line'>        capabilities.setCapability(CapabilityType.VERSION, "4.2");
</span><span class='line'>        capabilities.setCapability(CapabilityType.PLATFORM, "WINDOW");
</span><span class='line'>        capabilities.setCapability("app", app.getAbsolutePath());
</span><span class='line'>        capabilities.setCapability("app-package", "{app package name}");  
</span><span class='line'>        capabilities.setCapability("app-activity", ".{main activity class}");  //my case RootActivity
</span><span class='line'>        driver = new RemoteWebDriver(new URL("http://127.0.0.1:4723/wd/hub"), capabilities);
</span><span class='line'>        
</span><span class='line'>    }
</span><span class='line'> 
</span><span class='line'>    @AfterMethod
</span><span class='line'>    public void tearDown() throws Exception { 
</span><span class='line'>        driver.quit();
</span><span class='line'>    }
</span><span class='line'>     
</span><span class='line'>    @Test
</span><span class='line'>    public void loginTest() throws InterruptedException
</span><span class='line'>    {     
</span><span class='line'>     List&lt;webelement&gt; textFieldsList = driver.findElements(By.className("android.widget.EditText")); 
</span><span class='line'>        int size = textFieldsList.size();
</span><span class='line'> 
</span><span class='line'>        textFieldsList.get(0).sendKeys("Admin");
</span><span class='line'>        textFieldsList.get(1).sendKeys("Admin");
</span><span class='line'>        driver.findElements(By.xpath("android.widget.Button")).get(1).click();
</span><span class='line'>        WebElement logout = driver.findElement(By.name("LOGOUT"));
</span><span class='line'>        String logOut = logout.getText();
</span><span class='line'>        System.out.println(logOut);
</span><span class='line'>        logout.click();
</span><span class='line'>    }
</span><span class='line'>     
</span><span class='line'>    @Test
</span><span class='line'>    public void formTest() throws InterruptedException
</span><span class='line'>    {     
</span><span class='line'>     List&lt;webelement&gt; textFieldsList = driver.findElements(By.className("android.widget.RelativeLayout")); 
</span><span class='line'>        textFieldsList.get(2).click();
</span><span class='line'>         
</span><span class='line'>        driver.findElement(By.className("android.widget.Spinner")).click();        
</span><span class='line'>        List&lt;webelement&gt; listsDropDown = driver.findElements(By.className("android.widget.CheckedTextView")); 
</span><span class='line'>        for(WebElement listdropdown: listsDropDown){
</span><span class='line'>         String list = listdropdown.getText();        
</span><span class='line'>         if(list.equals("Oxygen")){
</span><span class='line'>          listdropdown.click();
</span><span class='line'>         }
</span><span class='line'>        }
</span><span class='line'>         
</span><span class='line'>        //click on check box
</span><span class='line'>        WebElement checkBox = driver.findElement(By.className("android.widget.CheckBox"));        
</span><span class='line'>        if(checkBox.isSelected()){
</span><span class='line'>         checkBox.click();
</span><span class='line'>        }
</span><span class='line'>         
</span><span class='line'>        //radio button 
</span><span class='line'>        driver.findElements(By.className("android.widget.RadioButton")).get(1).click();      
</span><span class='line'>        
</span><span class='line'>    }      
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle" style="display:block" data-ad-client="ca-pub-5798698216356388" data-ad-slot="3378542759" data-ad-format="auto"></ins><script>(adsbygoogle = window.adsbygoogle || []).push({});</script></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mobile testing : using Robotium and testdroid recorder]]></title>
    <link href="http://www.tabaolan.com/mobile-testing-using-robotium-and-testdroid-recorder/"/>
    <updated>2014-08-21T05:30:20+01:00</updated>
    <id>http://www.tabaolan.com/mobile-testing-using-robotium-and-testdroid-recorder</id>
    <content type="html"><![CDATA[<h2>Robotium and testdroid recorder</h2>

<p>In this post I will show you how to automate android application using robotium framework with testdroid recorder.</p>

<p>Testdroid recorder is capture user action , generate reusable android test case into robotium framework.</p>

<p>For more detail about Testdroid visit link (click here)[<a href="http://testdroid.com/product/testdroid-recorder#0">http://testdroid.com/product/testdroid-recorder#0</a>]</p>

<h3>Prerequisites:</h3>

<p>1.Eclipse should be installed in your machine.</p>

<p>2.Android SDK should be installed.</p>

<p>3.ADT Plug-in installed in to Eclipse.</p>

<h3>Testdroid installation:</h3>

<p>1.Start Eclipse and go to Help &ndash;> Install New Software</p>

<p>2.Click Add button; enter to field asking you a site to work with.</p>

<p>3.Fill in “Testdroid plug-in” for the Name</p>

<p>4.For the Location provide URL to Testdroid repository:  [<a href="http://www.testdroid.com/updates/">http://www.testdroid.com/updates/</a>]</p>

<p>5.Click ok button.</p>

<p><img src="http://www.tabaolan.com/images/mb4.jpg"></p>

<p>6.Click next button. During installation you must see below warning pop up</p>

<p>7.Click on “OK” button of warning popup window.</p>

<p><img src="http://www.tabaolan.com/images/mb5.jpg"></p>

<p>8.After successful installation restart your eclipse.</p>

<script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle" style="display:block" data-ad-client="ca-pub-5798698216356388" data-ad-slot="7145934352" data-ad-format="auto"></ins><script>(adsbygoogle = window.adsbygoogle || []).push({});</script></p>

<h3>Creating project in eclipse:</h3>

<p>1.Create new android test project.</p>

<p><img src="http://www.tabaolan.com/images/mb6.jpg"></p>

<p>2.Click next button.</p>

<p>3.Enter project name and click on next button.</p>

<p>4.Chose Android API and click finish button.</p>

<p><img src="http://www.tabaolan.com/images/mb7.jpg"></p>

<h3>Run Emulator:</h3>

<p>Run your emulator having API 11 or as per your selection.</p>

<h3>Recording test Script:</h3>

<script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle" style="display:block" data-ad-client="ca-pub-5798698216356388" data-ad-slot="3378542759" data-ad-format="auto"></ins><script>(adsbygoogle = window.adsbygoogle || []).push({});</script></p>

<p>1.Goto File menu and select New > Other and select option “New Robotium Test”.</p>

<p><img src="http://www.tabaolan.com/images/mb8.jpg"></p>

<p>2.Click next button.</p>

<p><img src="http://www.tabaolan.com/images/mb9.jpg"></p>

<p>3.Enter user name and password of Testdroid application and Click Authorize button.</p>

<p>4.Click next button. Browse your apk file and click next button again.</p>

<p><img src="http://www.tabaolan.com/images/mb10.jpg"></p>

<p>5.Select recording method name and click on recording button. Your apk file will  install in opened emulator , launch the application on emulator and start the recording.</p>

<p>6.After recording click on stop recording button and click on finished button. Your recorded scenario automated converted in java junit test and save in eclipse like as below java code.</p>

<script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle" style="display:block" data-ad-client="ca-pub-5798698216356388" data-ad-slot="9425076351" data-ad-format="auto"></ins><script>(adsbygoogle = window.adsbygoogle || []).push({});</script></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>import android.test.ActivityInstrumentationTestCase2;
</span><span class='line'>import android.app.Activity;
</span><span class='line'>import junit.framework.AssertionFailedError;
</span><span class='line'>import com.bitbar.recorder.extensions.ExtSolo;
</span><span class='line'>
</span><span class='line'>public class NewRobotiumTest extends ActivityInstrumentationTestCase2 {
</span><span class='line'>
</span><span class='line'>  private static final String LAUNCHER_ACTIVITY_CLASSNAME = "com.gorillalogic.monkeytalk.demo1.RootActivity";
</span><span class='line'>  private static Class launchActivityClass;
</span><span class='line'>  static {
</span><span class='line'>         try {
</span><span class='line'>                 launchActivityClass = Class.forName(LAUNCHER_ACTIVITY_CLASSNAME);
</span><span class='line'>         } catch (ClassNotFoundException e) {
</span><span class='line'>                 throw new RuntimeException(e);
</span><span class='line'>         }
</span><span class='line'>  }
</span><span class='line'>  private ExtSolo solo; // ExtSolo is an extension of Robotium Solo that helps
</span><span class='line'>                                               // collecting better test execution data during test
</span><span class='line'>                                               // runs
</span><span class='line'>
</span><span class='line'>  @SuppressWarnings("unchecked")
</span><span class='line'>  public NewRobotiumTest() {
</span><span class='line'>         super((Class) launchActivityClass);
</span><span class='line'>  }
</span><span class='line'>
</span><span class='line'>  @Override
</span><span class='line'>  public void setUp() throws Exception {
</span><span class='line'>         super.setUp();
</span><span class='line'>         solo = new ExtSolo(getInstrumentation(), getActivity(), this.getClass()
</span><span class='line'>                         .getCanonicalName(), getName());
</span><span class='line'>  }
</span><span class='line'>
</span><span class='line'>  @Override
</span><span class='line'>  public void tearDown() throws Exception {
</span><span class='line'>         solo.finishOpenedActivities();
</span><span class='line'>         solo.tearDown();
</span><span class='line'>         super.tearDown();
</span><span class='line'>  }
</span><span class='line'>
</span><span class='line'>  public void testRecorded() throws Exception {
</span><span class='line'>         try {
</span><span class='line'>         } catch (AssertionFailedError e) {
</span><span class='line'>                 solo.fail("NewRobotiumTest.testRecorded_scr_fail", e);
</span><span class='line'>                 throw e;
</span><span class='line'>         } catch (Exception e) {
</span><span class='line'>                 solo.fail("NewRobotiumTest.testRecorded_scr_fail", e);
</span><span class='line'>                 throw e;
</span><span class='line'>         }
</span><span class='line'>  }
</span><span class='line'>
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<h3>Execution : run java file by choosing “Eclipse Junit launcher” option form eclipse.</h3>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Jmeter : Introduction]]></title>
    <link href="http://www.tabaolan.com/jmeter-introduction/"/>
    <updated>2014-08-15T08:30:28+01:00</updated>
    <id>http://www.tabaolan.com/jmeter-introduction</id>
    <content type="html"><![CDATA[<h2>Introduction to JMeter</h2>

<p>Have you ever tested a web server to know how efficiently it works? How many concurrent users can a web server handle?</p>

<p>Let say that one day, your boss asks you to do performance testing of www.google.com for 100 users. What would you do?</p>

<!--more-->


<p><img src="http://www.tabaolan.com/images/jmeter1.png"></p>

<p>Maybe your boss, who is a beginner, will ask you</p>

<p><img src="http://www.tabaolan.com/images/jmeter2.png"></p>

<p>This tutorial will help you to answer his question and complete your task.</p>

<script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle" style="display:block" data-ad-client="ca-pub-5798698216356388" data-ad-slot="7145934352" data-ad-format="auto"></ins><script>(adsbygoogle = window.adsbygoogle || []).push({});</script></p>

<h3>What is JMeter ?</h3>

<p><img src="http://www.tabaolan.com/images/jmeter3.png"></p>

<p>The Apache JMeterTM is pure Java open source software, which was first developed by Stefano Mazzocchi of the Apache Software Foundation, designed to load test functional behavior and measure performance. You can use JMeter to analyze and measure the performance of web application or variety of services.</p>

<p>Performance testing means testing a web application against heavy load, multiple and concurrent user traffic. JMeter originally is used for testing Web Application or FTP application.</p>

<p>Nowadays, it is used for functional test, database server test etc.</p>

<script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle" style="display:block" data-ad-client="ca-pub-5798698216356388" data-ad-slot="9425076351" data-ad-format="auto"></ins><script>(adsbygoogle = window.adsbygoogle || []).push({});</script></p>

<h3>Why JMeter ?</h3>

<p><img src="http://www.tabaolan.com/images/jmeter4.png"></p>

<p>JMeter advantages are described as figure below</p>

<p><img src="http://www.tabaolan.com/images/jmeter5.png"></p>

<p>Open source license: JMeter is totally free,  allows developer use the source code for the development.</p>

<p>Friendly GUI: JMeter is extremely easy to use and doesn&rsquo;t take time to get familiar with it.</p>

<p>Platform independent: JMeter is 100% pure Java desktop application. So it can run on multiple platforms.</p>

<p>Full multi-threading framework. JMeter allows concurrent and simultaneous sampling of different functions by a separate thread group.</p>

<p>Visualize Test Result: Test result can be display in a different format such as chart, table, tree and log file.</p>

<p>Easy installation: You just copy and run the *.bat file to run JMeter. No installation needed.</p>

<p>Highly Extensible: You can write your own tests. JMeter also supports visualization plugins allow you extend your testing.</p>

<p>Multiple testing strategy: JMeter supports many testing strategies such as Load Testing, Distributed Testing, and Functional Testing.</p>

<p>Simulation: JMeter can simulate multiple users with concurrent threads, create a heavy load against web application under test.</p>

<p>Support multi-protocol: JMeter does not only support web application testing, but also evaluate database server performance. All basic protocols such as HTTP, JDBC, LDAP, SOAP, JMS, and FTP are supported by JMeter.</p>

<p>Record &amp; Playback &ndash; Record the user activity on the browser and simulate them in web application using JMeter.</p>

<p>Script Test: Jmeter can be integrated with Bean Shell &amp; Selenium for automated testing.</p>

<script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle" style="display:block" data-ad-client="ca-pub-5798698216356388" data-ad-slot="3378542759" data-ad-format="auto"></ins><script>(adsbygoogle = window.adsbygoogle || []).push({});</script></p>

<h3>How does JMeter work ?</h3>

<p>Basic work flow of JMeter as shown in the figures below</p>

<p>JMeter simulates a group of users sending requests to a target server, and return statistics information of target server through graphical diagrams</p>

<p><img src="http://www.tabaolan.com/images/jmeter6.png"></p>

<p>The completed workflow of JMeter as show in figure below</p>

<p><img src="http://www.tabaolan.com/images/jmeter7.png"></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Jmeter : Install Jmeter]]></title>
    <link href="http://www.tabaolan.com/jmeter-install-jmeter/"/>
    <updated>2014-08-15T08:20:03+01:00</updated>
    <id>http://www.tabaolan.com/jmeter-install-jmeter</id>
    <content type="html"><![CDATA[<h2>How to install Jmeter in easy steps</h2>

<h3>Operating system Support for JMeter</h3>

<p>JMeter is a pure Java application and should run correctly on any system that has a compatible Java implementation.</p>

<!--more-->


<p>Here is the list of operating system compatible with JMeter</p>

<p><img src="http://www.tabaolan.com/images/jmeter8.png"></p>

<p>In this tutorial, we run JMeter on Window operating system</p>

<h3>Steps to Install JMeter</h3>

<h4>Step 1) Install Java : <a href="http://www.tabaolan.com/blog/2014/08/07/newbie-part-1-download-and-install-java/">Click here</a></h4>

<h4>Step 2) Download Jmeter</h4>

<p>As of this writing, the latest version of JMeter is Apache JMeter 2.9.You can download it <a href="http://jmeter.apache.org/download_jmeter.cgi">here</a></p>

<p>Choose the Binaries file (either zip or tgz) to download as shown in figure below</p>

<p><img src="http://www.tabaolan.com/images/jmeter9.png"></p>

<h4>Step 3) Installation</h4>

<p>Installation of JMeter is extremely easy and simple. You simply unzip the zip/tar file into the directory where you want JMeter to be installed. There is no tedious installation screen to deal with! Simple unzip and you are done!</p>

<p>Once the unzipping is done installation directory structure should look like as figure below</p>

<p><img src="http://www.tabaolan.com/images/jmeter10.png"></p>

<p>Given below is the description of the JMeter directories and its importance JMeter directory contains many files and directory</p>

<p>/bin: Contains JMeter script file for starting JMeter</p>

<p>/docs: JMeter documentation files</p>

<p>/extras: ant related extra files</p>

<p>/lib/: Contains the required Java library for JMeter</p>

<p>/lib/ext: contains the core jar files for JMeter and the protocols</p>

<p>/lib/junit: JUnit library used for JMeter</p>

<script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle" style="display:block" data-ad-client="ca-pub-5798698216356388" data-ad-slot="7145934352" data-ad-format="auto"></ins><script>(adsbygoogle = window.adsbygoogle || []).push({});</script></p>

<h4>Step 4) Launch JMeter</h4>

<p>You can start JMeter in 3 modes</p>

<p>GUI Mode</p>

<p>Server Mode</p>

<p>Command Line Mode</p>

<h3>Start JMeter in GUI Mode</h3>

<p>If you are using Window, just run the file /bin/jmeter.bat to start JMeter in GUI mode as shown below</p>

<p><img src="http://www.tabaolan.com/images/jmeter11.gif"></p>

<p>Following figure annotates the various components in the JMeter GUI</p>

<p><img src="http://www.tabaolan.com/images/jmeter12.gif"></p>

<h3>Start JMeter in Server Mode</h3>

<script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle" style="display:block" data-ad-client="ca-pub-5798698216356388" data-ad-slot="3378542759" data-ad-format="auto"></ins><script>(adsbygoogle = window.adsbygoogle || []).push({});</script></p>

<p>Server mode is used for distributed testing. This testing works as client-server model. In this model, JMeter runs on server computer in server mode. On client computer, JMeter runs in GUI mode.</p>

<p>To start the server mode, you run the bat file bin\jmeter-server.bat as below figure</p>

<p><img src="http://www.tabaolan.com/images/jmeter13.png"></p>

<h3>Start JMeter in command line mode</h3>

<p>JMeter in GUI mode consumes much computer memory. For saving resource, you may choose to run JMeter without the GUI. To do so, use the following command options</p>

<p><img src="http://www.tabaolan.com/images/jmeter14.png"></p>

<p>This is a command line example</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$jmeter -n -t testPlan.jmx - l log.jtl -H 127.0.0.1 -P 8000</span></code></pre></td></tr></table></div></figure>


<script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle" style="display:block" data-ad-client="ca-pub-5798698216356388" data-ad-slot="9425076351" data-ad-format="auto"></ins><script>(adsbygoogle = window.adsbygoogle || []).push({});</script></p>

<p><img src="http://www.tabaolan.com/images/jmeter15.gif"></p>

<h3>Additional Packages</h3>

<h5>Java Compiler</h5>

<pre><code>    Java Compiler allows developers to build JMeter source code and other JMeter plugins
</code></pre>

<h5>SAX XML parser</h5>

<pre><code>    SAX is the Simple API for XML, originally a Java-only API. You can use SAX XML parser as an alternative to XML parser in JMeter
</code></pre>

<h5>Email Support</h5>

<pre><code>    JMeter has extensive Email capabilities. It can send email based on test results and has a POP3(S)/IMAP(S) sampler. It also has an SMTP sampler.
</code></pre>

<h5>JDBC driver</h5>

<pre><code>    If you want to test database server, you have to install JDBC driver
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Jmeter : Complete Element reference]]></title>
    <link href="http://www.tabaolan.com/jmeter-complete-element-reference/"/>
    <updated>2014-08-15T07:10:01+01:00</updated>
    <id>http://www.tabaolan.com/jmeter-complete-element-reference</id>
    <content type="html"><![CDATA[<h2>Complete Element reference for Jmeter</h2>

<p>The different components of JMeter are called Elements. Each Element is designed for a specific purpose.</p>

<p>The figure below gives the some common elements in JMeter.</p>

<p><img src="http://www.tabaolan.com/images/jmeter16.png"></p>

<p>Studying all the componens at one go is an invitation to confusion and boredome. Here, we will discuss the must-know components before you can start testing in JMeter.</p>

<p>Remaining components will be discussed as when they are used in the succeeding tutorials. The elements discussed in this tutorial are</p>

<h3>Thread Group</h3>

<script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle" style="display:block" data-ad-client="ca-pub-5798698216356388" data-ad-slot="9425076351" data-ad-format="auto"></ins><script>(adsbygoogle = window.adsbygoogle || []).push({});</script></p>

<p>Thread Groups is a collection of Threads. Each thread represents one user using the application under test. Basically each Thread simulates one real user request to the server.</p>

<p>The controls for a thread group allow you to Set the number of threads for each group.</p>

<p>For example, if you set the number of threads as 100; JMeter will create and simulate 100 user requests to the server under test</p>

<p><img src="http://www.tabaolan.com/images/jmeter17.png"></p>

<h3>Samplers</h3>

<script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle" style="display:block" data-ad-client="ca-pub-5798698216356388" data-ad-slot="7145934352" data-ad-format="auto"></ins><script>(adsbygoogle = window.adsbygoogle || []).push({});</script></p>

<p>As we know already that JMeter supports testing HTTP, FTP , JDBC and many other protocols.</p>

<p>We already know that Thread Groups simulate user request to the server</p>

<p>But how does a Thread Group know which type of requests (HTTP, FTP etc.) it needs to make ?</p>

<p>The answer is Samplers</p>

<p>The user request could be FTP Request, HTTP Request, JDBC Request&hellip;Etc.</p>

<p><img src="http://www.tabaolan.com/images/jmeter18.png"></p>

<h3>FTP request:</h3>

<p>Let imagine you want to performance test an FTP server. You can use FTP request sampler in JMeter to do this task. This controller lets you send an FTP &ldquo;download file&rdquo; or &ldquo;upload file&rdquo; request to an FTP server.</p>

<p><img src="http://www.tabaolan.com/images/jmeter19.png"></p>

<p>For example, if you want to download a file &ldquo;Test.txt&rdquo; from a FTP server under test, you need to configure some parameters in JMeter as figure below</p>

<p><img src="http://www.tabaolan.com/images/jmeter20.png"></p>

<p>JMeter will send FTP command to FTP server ftp.example.com, and then download a file Test.txt from that server.</p>

<h3>HTTP request:</h3>

<script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle" style="display:block" data-ad-client="ca-pub-5798698216356388" data-ad-slot="3378542759" data-ad-format="auto"></ins><script>(adsbygoogle = window.adsbygoogle || []).push({});</script></p>

<p>This sampler lets you send an HTTP/HTTPS request to a web server.</p>

<p>Consider the example below. JMeter send a HTTP request to Google website and retrieve HTML files or image from this website.</p>

<p><img src="http://www.tabaolan.com/images/jmeter21.png"></p>

<h3>JDBC request:</h3>

<p>This sampler lets you execute Database Performance Testing. It sends a JDBC Request (an SQL query) to a database.</p>

<p><img src="http://www.tabaolan.com/images/jmeter22.png"></p>

<p>For example, a database server has a field test_result stored in a table name test_tbl. You want to query this data from the database server; you can configure JMeter to send a SQL query to this server to retrieve data.</p>

<p><img src="http://www.tabaolan.com/images/jmeter23.png"></p>

<h3>BSF Sampler:</h3>

<p>This sampler allows you to write a sampler using a BSF scripting language.</p>

<p>Here is an example of BSF  Sampler in JMeter</p>

<p><img src="http://www.tabaolan.com/images/jmeter24.png"></p>

<h3>Access Log Sampler:</h3>

<p>This sampler allows you to read access logs and generate http requests. The log could be  image, html, css&hellip;.</p>

<p><img src="http://www.tabaolan.com/images/jmeter25.png"></p>

<h3>SMTP Sampler:</h3>

<p>If you want to test a mail server, you can use SMTP sampler. This sampler is used to send email messages using SMTP protocol.</p>

<p><img src="http://www.tabaolan.com/images/jmeter26.png"></p>

<h3>Listeners</h3>

<p>Listeners: shows the results of the test execution. They can show results in different format such as tree, table, graph or log file</p>

<p><img src="http://www.tabaolan.com/images/jmeter27.png"></p>

<h4>Graph result listeners display the server response times on a Graph</h4>

<p><img src="http://www.tabaolan.com/images/jmeter28.png"></p>

<h4>View Result Tree show results of user request in basic HTML format</h4>

<p><img src="http://www.tabaolan.com/images/jmeter29.png"></p>

<h4>Table Result show summary of test result in table format</h4>

<p><img src="http://www.tabaolan.com/images/jmeter30.png"></p>

<h4>Log show summary of test result in the text file</h4>

<p><img src="http://www.tabaolan.com/images/jmeter31.png"></p>

<h3>Configuration Elements</h3>

<p>set up defaults and variables for later use by samplers.</p>

<p>The figure below shows some commonly used configuration elements in JMeter</p>

<p><img src="http://www.tabaolan.com/images/jmeter33.png"></p>

<h4>CSV Data Set Config:</h4>

<p>Suppose you want to test a website for 100 users signing-in with different credentials. You do not need to record the script 100 times! You can parameterization the script to enter different login credentials. This login information (e.g. Username, password) could be stored in a text file. JMeter has an element that allows you to read different parameters from that text file. It is &ldquo;CSV Data Set Config&rdquo;, which is used to read lines from a file, and split them into variables.</p>

<p><img src="http://www.tabaolan.com/images/jmeter32.png"></p>

<p>This is an example of CSV Data. It&rsquo;s a text file which contains user and password to login your target website</p>

<p><img src="http://www.tabaolan.com/images/jmeter34.png"></p>

<h4>HTTP Cookie Manager</h4>

<p>Let&rsquo;s understand this with an example &ndash;</p>

<p>You used your browser (Firefox, IE&hellip;Etc) to browse www.google.com</p>

<p>You login with your user and password.</p>

<p>Your username and password will be stored in your computer as cookies.</p>

<p>Next time, when you visit www.google.com, you don&rsquo;t need to do login again because your browser will use your cookies as user data to login.</p>

<p>HTTP Cookie Manager also has the same feature like a web browser. If you have an HTTP Request and the response contains a cookie, the Cookie Manager automatically stores that cookie and will use it for all future requests to that particular web site.</p>

<h4>HTTP request default</h4>

<p>This element lets you set default values that your HTTP Request controllers use.</p>

<p>For example,</p>

<p>You are sending 100 HTTP requests to the server google.com</p>

<p>You would have to manually enter server name = google.com for all these 100 requests</p>

<p>Instead, you could add a single HTTP request defaults with the &ldquo;Server Name or IP&rdquo; field = google.com</p>

<p>No need to type 100 times!</p>

<p><img src="http://www.tabaolan.com/images/jmeter35.png"></p>

<h4>Login Config Element</h4>

<p>The Login Config Element lets you add or override username and password settings in samplers.</p>

<p>For example, you want to simulate one user login to website www.facebook.com with user and password. You can use Login Config Element to add these user and password setting in user request</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Jmeter : Hands on with Jmeter GUI]]></title>
    <link href="http://www.tabaolan.com/jmeter-hands-on-with-jmeter-gui/"/>
    <updated>2014-08-15T06:35:26+01:00</updated>
    <id>http://www.tabaolan.com/jmeter-hands-on-with-jmeter-gui</id>
    <content type="html"><![CDATA[<h2>Hands on with JMeter GUI</h2>

<p>As soon as you launch JMeter , you will see 2 elements : Test Plan and Workbench</p>

<h3>Test Plan</h3>

<script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle" style="display:block" data-ad-client="ca-pub-5798698216356388" data-ad-slot="9425076351" data-ad-format="auto"></ins><script>(adsbygoogle = window.adsbygoogle || []).push({});</script></p>

<p>Test Plan is where you add elements required for your JMeter Test.</p>

<p>It stores all the elements (like ThreadGroup, Timers ,etc) and their corresponding settings required to run your desired Tests.</p>

<p>Following figure shows an example of Test Plan</p>

<p><img src="http://www.tabaolan.com/images/jmeter36.png"></p>

<h3>WorkBench</h3>

<p>The WorkBench simply provides a place to store test elements temporarily. WorkBench has no relation with Test Plan. JMeter will not save the contents of the WorkBench. It only saves the contents of the Test Plan branch</p>

<p><img src="http://www.tabaolan.com/images/jmeter37.png"></p>

<h2>Adding Elements</h2>

<p>Adding Elements is the essential step to build a Test Plan because without adding elements, JMeter cannot execute your Test Plan</p>

<p>A Test Plan includes many Elements such as Listener, Controller, and Timer</p>

<p>You can add an element to test plan by right-clicking on a Test Plan, and choose new elements from &ldquo;Add&rdquo; list.</p>

<p>Suppose, you want to add 2 elements to Test Plan BeanShell Assertion and Java Request Default.</p>

<p>1)Right click Test Plan &ndash;> Add &ndash;> Assertion-> Bean Shell Assertion</p>

<p>2)Right click Test Plan &ndash;> Add &ndash;> Config Element &ndash;> Java Request Default</p>

<p><img src="http://www.tabaolan.com/images/jmeter38.gif"></p>

<p>You can also remove unused element</p>

<p>Let&rsquo;s say, you want to remove element &ldquo;HTTP Request Defaults&rdquo;, select &ldquo;HTTP Request Default&rdquo; &ndash;> Right click-> choose Remove from the context menu &ndash;> Click Yes to confirm delete this element on message box</p>

<h2>Loading and Saving Elements</h2>

<h3>Saving Elements</h3>

<p>Suppose you have already added an element name &ldquo;BeanShell Assertion&rdquo;.  Now you want to save it.</p>

<p>Right click BeanShell Assertion &ndash;> select Save Selection As</p>

<p><img src="http://www.tabaolan.com/images/jmeter39.png"></p>

<p>A dialog box display, click Save button to save your elements under default name BeanShell Assertion.jmx. You can choose other name if you want</p>

<p><img src="http://www.tabaolan.com/images/jmeter40.png"></p>

<p>JMeter Test Elements and Test plan are stored in *.JMX format. JMX is standing for Java Management Extensions.</p>

<h3>Loading Elements</h3>

<script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle" style="display:block" data-ad-client="ca-pub-5798698216356388" data-ad-slot="7145934352" data-ad-format="auto"></ins><script>(adsbygoogle = window.adsbygoogle || []).push({});</script></p>

<p>Loading exist element helps you save your time required to create &amp; configure new elements</p>

<p>Let&rsquo;s say,  that you have an existing element in Test Plan: Java Request Default</p>

<p>Right click Java Request Defaults-> select Merge</p>

<p><img src="http://www.tabaolan.com/images/jmeter41.gif"></p>

<p>Choose the Elements (BeanShell Assertion.jmx.) file in the directory. This element will be added to your current test plan.</p>

<p><img src="http://www.tabaolan.com/images/jmeter42.png"></p>

<h2>Configuring Elements</h2>

<p>In order to configure any Element</p>

<p>1.Select the element in the Tree on Left Pane</p>

<p>2.Enter configuration settings on the Right Pane</p>

<p><img src="http://www.tabaolan.com/images/jmeter43.png"></p>

<h3>Running and Stopping a Test Plan</h3>

<script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle" style="display:block" data-ad-client="ca-pub-5798698216356388" data-ad-slot="3378542759" data-ad-format="auto"></ins><script>(adsbygoogle = window.adsbygoogle || []).push({});</script></p>

<p>Before running a test, you should save your Test Plan first. Saving your Test Plan helps you avoid unexpected error when running the test plan. Steps to save Test plan &ndash;</p>

<p>1.File &ndash;> Save Test Plan as-> a Dialog box display</p>

<p>2.Enter a filename of Test Plan &ndash;>click Save</p>

<p><img src="http://www.tabaolan.com/images/jmeter44.gif"></p>

<h3>Create Combo Test Plan</h3>

<p>You can merge one or many Test Plans to create a combo Test Plan as shown in below figure</p>

<p><img src="http://www.tabaolan.com/images/jmeter45.png"></p>

<p>Suppose you already have an existing Test Plan name Test_Fragment.jmx on your computer (This article includes this file).You can merge this test plan to current Test Plan on JMeter to create a new Test Plan.</p>

<p><img src="http://www.tabaolan.com/images/jmeter46.gif"></p>

<p>Now all the test elements in file Test_Fragment.jmx are added to your current test plan as shown in the figure below</p>

<p><img src="http://www.tabaolan.com/images/jmeter47.png"></p>

<h3>Run Test Plan</h3>

<p>To run your single or multiple test plans, choose Start (Control + R) from the Run menu item.</p>

<p><img src="http://www.tabaolan.com/images/jmeter48.png"></p>

<p>When JMeter is running, it shows a small green box at the right hand end of the menu bar.</p>

<p><img src="http://www.tabaolan.com/images/jmeter49.png"></p>

<p>The numbers to the left of the green box are the number of active threads / total number of threads.</p>

<p>To Stop the Test, press Stop button or use short key Ctrl + &lsquo;.&rsquo;</p>

<p><img src="http://www.tabaolan.com/images/jmeter50.png"></p>

<h3>Test Report</h3>

<p>When test execution is done, you can get the test report. The test report includes the error log file, which is saved in jmeter.log, and the test result summary.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Jmeter : Performance testing]]></title>
    <link href="http://www.tabaolan.com/jmeter-performance-testing/"/>
    <updated>2014-08-15T05:58:52+01:00</updated>
    <id>http://www.tabaolan.com/jmeter-performance-testing</id>
    <content type="html"><![CDATA[<h2>Performance Testing using Jmeter</h2>

<p>Performance testing is crucial to determine that the web application under test will satisfy high load requirements. It can be used to analyze overall server performance under heavy load.</p>

<p><img src="http://www.tabaolan.com/images/jmeter51.png"></p>

<p>JMeter offers following benefit in Performance testing</p>

<p>JMeter can be  used to test performance of both static resources such as JavaScript and HTML, as well as dynamic resources, such as JSP, Servlets, and AJAX.</p>

<p>JMeter can discover maximum number of concurrent users that your website can handle</p>

<p>JMeter provides a variety of graphical analyses of performance reports.</p>

<p>JMeter Performance Testing includes:</p>

<p><img src="http://www.tabaolan.com/images/jmeter52.png"></p>

<p>Load Testing: Modelling the expected usage by simulating multiple user access the web services concurrently.</p>

<script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle" style="display:block" data-ad-client="ca-pub-5798698216356388" data-ad-slot="9425076351" data-ad-format="auto"></ins><script>(adsbygoogle = window.adsbygoogle || []).push({});</script></p>

<p>Stress Testing: Every web server has a maximum load capacity. When the load goes beyond the limit, the web server start responding slowly and produce errors. The purpose of the stress testing is to find the maximum load the web server can handle.</p>

<p>The figure below shows how JMeter simulates the heavy load :</p>

<p><img src="http://www.tabaolan.com/images/jmeter53.png"></p>

<h3>Create a Performance Test Plan in Jmeter</h3>

<p>In this tutorial, we are doing a performance analysis of Google.com for 1000 users</p>

<p>Before testing the performance of target web application, we should determine-</p>

<p>Normal Load: Average number of users visit your website</p>

<p>Heavy Load: The maximum number of users visit your website</p>

<p>What is your target in this test?</p>

<p>Here is the roadmap of this practical example</p>

<p><img src="http://www.tabaolan.com/images/jmeter54.png"></p>

<h3>Step 1) Add Thread Group</h3>

<p>1.Start JMeter</p>

<p>2.Select Test Plan on the tree</p>

<p>3.Add Thread Group</p>

<p>Right click on the Test Plan and add a new thread group: Add &ndash;> Threads (Users) &ndash;> Thread Group</p>

<p><img src="http://www.tabaolan.com/images/jmeter55.png"></p>

<p>In Thread Group control panel, enter Thread Properties as following:</p>

<p><img src="http://www.tabaolan.com/images/jmeter56.png"></p>

<p>Number of Threads: 100 (Number of users connects to target website: 100)</p>

<p>Loop Count: 10 (Number of time to execute testing)</p>

<p>Ramp-Up Period: 100</p>

<script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle" style="display:block" data-ad-client="ca-pub-5798698216356388" data-ad-slot="3378542759" data-ad-format="auto"></ins><script>(adsbygoogle = window.adsbygoogle || []).push({});</script></p>

<p>The Thread Count and The Loop Counts are different.</p>

<p><img src="http://www.tabaolan.com/images/jmeter57.png"></p>

<p>Ramp-Up Period tells JMeter how long to delay before starting next user. For example, if we have 100 users and a 100 second Ramp-Up period, then the delay between starting users would be 1 second (100 users /100 seconds)</p>

<p><img src="http://www.tabaolan.com/images/jmeter58.png"></p>

<h3>Step 2) Adding JMeter elements</h3>

<p>Now we determine what JMeter elements in this test. The elements are</p>

<h4>HTTP request Default</h4>

<p>This element can be added by right-clicking on the Thread Group and selecting: Add &ndash;> Config Element &ndash;> HTTP Request Defaults.</p>

<p><img src="http://www.tabaolan.com/images/jmeter59.png"></p>

<p>In the HTTP Request Defaults control panel, enter the Website name under test (<a href="http://www.google.com">http://www.google.com</a>)</p>

<p><img src="http://www.tabaolan.com/images/jmeter60.png"></p>

<h4>HTTP Request</h4>

<script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle" style="display:block" data-ad-client="ca-pub-5798698216356388" data-ad-slot="7145934352" data-ad-format="auto"></ins><script>(adsbygoogle = window.adsbygoogle || []).push({});</script></p>

<p>Right-click on Thread Group and select: Add &ndash;> Sampler &ndash;> HTTP Request.</p>

<p><img src="http://www.tabaolan.com/images/jmeter61.png"></p>

<p>In HTTP Request Control Panel, the Path field indicates which URL request you want to send to Google server.</p>

<p><img src="http://www.tabaolan.com/images/jmeter62.png"></p>

<p>For example, if you enter &ldquo;calendar&rdquo; in Path field. JMeter will create the URL request <a href="http://www.google.com/calendar">http://www.google.com/calendar</a>  to Google server</p>

<p><img src="http://www.tabaolan.com/images/jmeter63.png"></p>

<p>If you keep  the Path field blank  JMeter will create the URL request <a href="http://www.google.com">http://www.google.com</a> to Google server.</p>

<p>In this test, you keep the Path field blank to make JMeter create the URL request <a href="http://www.google.com">http://www.google.com</a> to Google server.</p>

<h3>Step 3) Adding Graph result</h3>

<p>JMeter can show the test result in Graph format.</p>

<p>Right click Test Plan, Add &ndash;> Listener &ndash;> Graph Results</p>

<p><img src="http://www.tabaolan.com/images/jmeter64.png"></p>

<h3>Step 4) Run Test and get the test result</h3>

<p>Press Run button (Ctrl + R) on Toolbar to start the testing process. You will see the test result display on Graph at the real time.</p>

<p>The picture below presents a graph of a test plan, where we simulated 100 users who accessed on website www.google.com.</p>

<p><img src="http://www.tabaolan.com/images/jmeter65.png"></p>

<p>At the bottom of the picture, there are the following statistics, represented in colors:</p>

<p>Black: The total number of current samples sent.</p>

<p>Blue: The current average of all samples sent.</p>

<p>Red: The current standard deviation.</p>

<p>Green: Throughput rate that represents the number of requests per minute the server handled.</p>

<p>Let analyse the performance of Google server in below figure.</p>

<p><img src="http://www.tabaolan.com/images/jmeter66.png"></p>

<p>To analyse the performance of the web server under test, you should focus on 2 parameters Throughput and Deviation</p>

<p>The Throughput is the most important parameter. It represents the ability of the server to handle heavy load.  The higher the Throughput is, the better is the server performance.</p>

<p>In this test, the throughput of Google server is 1,491.193/minute. It means Google server can handle 1,491.193 requests per minute. This value is quiet high so we can conclude that Google server has good performance</p>

<p>The deviation is shown in red &ndash; it indicates the deviation from the average. The smaller the better.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Jmeter : How to use Timers]]></title>
    <link href="http://www.tabaolan.com/jmeter-how-to-use-timers/"/>
    <updated>2014-08-15T04:26:51+01:00</updated>
    <id>http://www.tabaolan.com/jmeter-how-to-use-timers</id>
    <content type="html"><![CDATA[<h2>How to use Timers in Jmeter</h2>

<p>By default, JMeter sends the request without pausing between each request. In that case, JMeter could overwhelm your test server by making too many requests in a short amount of times.</p>

<p>Let imagine that you send thousands request to a web server under test in a few seconds. This is what happens!</p>

<p><img src="http://www.tabaolan.com/images/jmeter67.png"></p>

<p>Timers allow JMeter to delay between each request which a thread makes. Timer can solve the server overload problem.</p>

<p>Also, in real life visitors do not arrive at a website all at the same time, but at different time intervals. So Timer will help mimic the real time behaviour.</p>

<p>Following are some common types of timer in JMeter</p>

<script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle" style="display:block" data-ad-client="ca-pub-5798698216356388" data-ad-slot="9425076351" data-ad-format="auto"></ins><script>(adsbygoogle = window.adsbygoogle || []).push({});</script></p>

<h3>Constant Timer:</h3>

<p>Constant timer delays each user request for the same amount of time.</p>

<p><img src="http://www.tabaolan.com/images/jmeter68.png"></p>

<h3>Gaussian Random Timer:</h3>

<p>Gaussian random timer delays each user request for a random amount of time.</p>

<p><img src="http://www.tabaolan.com/images/jmeter69.png"></p>

<p>So the total delay is described as below figure:</p>

<p><img src="http://www.tabaolan.com/images/jmeter70.png"></p>

<script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle" style="display:block" data-ad-client="ca-pub-5798698216356388" data-ad-slot="3378542759" data-ad-format="auto"></ins><script>(adsbygoogle = window.adsbygoogle || []).push({});</script></p>

<h3>Uniform Random Timer:</h3>

<p>Uniform random timer delays each user request for a random amount of time.</p>

<p><img src="http://www.tabaolan.com/images/jmeter71.png"></p>

<h3>BeanShell Timer</h3>

<p>The BeanShell Timer can be used to generate a delay time between each user request.</p>

<h3>BSF Timer</h3>

<p>The BSF Timer can be used to generate a delay between each user request using a BSF scripting language.</p>

<h3>JSR223 Timer</h3>

<p>The JSR223 Timer can be used to generate a delay between each user request using a JSR223 scripting language.</p>

<script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle" style="display:block" data-ad-client="ca-pub-5798698216356388" data-ad-slot="7145934352" data-ad-format="auto"></ins><script>(adsbygoogle = window.adsbygoogle || []).push({});</script></p>

<h2>Practical Demonstration of Timer Settings</h2>

<p>In this example, you will use Constant Timer to set fixed delay between user requests to google.com.</p>

<p>Let start with a simple test script</p>

<p>1.JMeter creates one user request to <a href="http://www.google.com">http://www.google.com</a> 100 times</p>

<p>2.Delay between each user request is 5000 ms</p>

<p>Here is the roadmap of this practical example:</p>

<p><img src="http://www.tabaolan.com/images/jmeter72.png"></p>

<h3>Pre-condition:</h3>

<p>We re-use the Step 1 and Step 2 in tutorial (JMeter Performance Testing)[/blog/2014/08/15/jmeter-performance-testing/].</p>

<h3>Step 1) Add Thread Group</h3>

<p>Right click on the Test Plan and add a new thread group: Add-> Threads (Users) &ndash;>Thread Group</p>

<p>In Thread Group control panel, enter Thread Properties as following</p>

<p><img src="http://www.tabaolan.com/images/jmeter73.png"></p>

<p>This setting lets JMeter create one user request to <a href="http://www.google.com">http://www.google.com</a> in 100 times</p>

<h3>Step 2) Add JMeter elements</h3>

<p>1.Add HTTP request default</p>

<p>2.Add HTTP request</p>

<h3>Step 3) Add Constant Timer</h3>

<p>Right click Thread Group &ndash;> Timer &ndash;> Constant Timer</p>

<p><img src="http://www.tabaolan.com/images/jmeter74.png"></p>

<p>Configuring Thread Delay of 5000 milliseconds</p>

<p><img src="http://www.tabaolan.com/images/jmeter75.png"></p>

<h3>Step 4) Add View Results in Table</h3>

<p>View Results in Table displays the test result in table format.</p>

<p>Right click Add &ndash;> Listener &ndash;> View Result in Table.</p>

<p><img src="http://www.tabaolan.com/images/jmeter76.png"></p>

<p>View Results in Table displays as below figure</p>

<p><img src="http://www.tabaolan.com/images/jmeter77.png"></p>

<h3>Step 5) Run your test</h3>

<p>When you ready to run test, click Run button on the menu bar, or short key Ctrl+R</p>

<p>This is the result of this test</p>

<p><img src="http://www.tabaolan.com/images/jmeter78.png"></p>

<p>You can analyze the result as following:</p>

<p>The End Time of one sample is calculated as following:</p>

<p><img src="http://www.tabaolan.com/images/jmeter79.png"></p>

<p>For example, in the above figure, let analyze the Sample 2</p>

<p>Start time is 22:05:01.866</p>

<p>Sample Time of Sample 2 is 172 ms</p>

<p>Constant Timer : 5000 ms (as configured)</p>

<p>End Time of this sample is = 22:05:01.866 + 172 + 5000 = 22:05:07.038</p>

<p>So the Sample 3 should start at  the time is 22:05:07.039 ( As shown in the above figure)</p>

<p>The delay of each sample is 5000 ms</p>

<p>If you change the Constant Timer is zero, you will see the result is changed</p>

<p><img src="http://www.tabaolan.com/images/jmeter80.png"></p>

<p>Let analyze the Sample 1</p>

<p>Start time is 22:17:39.141</p>

<p>Sample Time of Sample 2 is 370 ms</p>

<p>Constant Timer : 0 ms (as configured)</p>

<p>End Time of this sample is = 22:17:39.141+ 370 + 0 = 22:17:39.511</p>

<p>So the Sample 2 should start at  the time is 22:17:39.512 (Shown in the above figure)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Jmeter : How to use Assertions]]></title>
    <link href="http://www.tabaolan.com/jmeter-how-to-use-assertions/"/>
    <updated>2014-08-15T04:20:51+01:00</updated>
    <id>http://www.tabaolan.com/jmeter-how-to-use-assertions</id>
    <content type="html"><![CDATA[<h2>How to use Assertions in JMeter</h2>

<p>Assertion help verify that your server under test returns the expected results.</p>

<p>Following are some commonly used Assertion in JMeter:</p>

<p>1.Response Assertion</p>

<p>2.Duration Assertion</p>

<p>3.Size Assertion</p>

<p>4.XML Assertion</p>

<p>5.HTML Assertion</p>

<h3>Response Assertion</h3>

<p><img src="http://www.tabaolan.com/images/jmeter81.png"></p>

<p>The response assertion lets you add pattern strings to be compared against various fields of the server response.</p>

<p>For example, you send a user request to the website <a href="http://www.google.com">http://www.google.com</a> and get the server response. You can use Response Assertion to verify if the server response contains expected pattern string (e.g. &ldquo;OK&rdquo;).</p>

<script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle" style="display:block" data-ad-client="ca-pub-5798698216356388" data-ad-slot="9425076351" data-ad-format="auto"></ins><script>(adsbygoogle = window.adsbygoogle || []).push({});</script></p>

<h3>Duration Assertion</h3>

<p>The Duration Assertion tests that each server response was received within a given amount of time. Any response that takes longer than the given number of milliseconds (specified by the user) is marked as a failed response.</p>

<p>For example, a user request is sent to www.google.com by JMeter and get a response within expected time 5 ms then test case pass, else, test case failed.</p>

<p><img src="http://www.tabaolan.com/images/jmeter82.png"></p>

<h2>Size Assertion</h2>

<p>The Size Assertion tests that each server response contains the expected number of byte in it. You can specify that the size be equal to, greater than, less than, or not equal to a given number of bytes.</p>

<p>JMeter sends a user request to www.google.com and gets response packet with size less than expected byte 5000 bytes àtest case pass. If else, test case failed.</p>

<script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle" style="display:block" data-ad-client="ca-pub-5798698216356388" data-ad-slot="3378542759" data-ad-format="auto"></ins><script>(adsbygoogle = window.adsbygoogle || []).push({});</script></p>

<h2>XML Assertion</h2>

<p>The XML Assertion tests that the response data consists of a formally correct XML document.</p>

<p><img src="http://www.tabaolan.com/images/jmeter83.png"></p>

<h3>HTML Assertion</h3>

<p>The HTML Assertion allows the user to check the HTML syntax of the response data. It means the response data must be met the HTML syntax.</p>

<p><img src="http://www.tabaolan.com/images/jmeter84.png"></p>

<h3>Handson &ndash; Assertion</h3>

<script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle" style="display:block" data-ad-client="ca-pub-5798698216356388" data-ad-slot="7145934352" data-ad-format="auto"></ins><script>(adsbygoogle = window.adsbygoogle || []).push({});</script></p>

<p>In this test, we are using Response Assertion to compare the response packet from www.google.com matches your expected string.</p>

<p>Here is the roadmap of this test:</p>

<p><img src="http://www.tabaolan.com/images/jmeter85.png"></p>

<p>The response assertion control panel lets you add pattern strings to be compared against various fields of the response.</p>

<h4>Step 1) Add Response Assertion</h4>

<p>Right-Click Thread Group &ndash;> Add &ndash;> Assertions &ndash;> Response Assertion</p>

<p><img src="http://www.tabaolan.com/images/jmeter86.png"></p>

<p>Response Assertion Pane displays as below figure:</p>

<p><img src="http://www.tabaolan.com/images/jmeter87.png"></p>

<h4>Step 2) Add Pattern to test</h4>

<p>When you send a request to Google server, it may return some response code as below:</p>

<p>*404: Server error</p>

<p>*200: Server OK</p>

<p>*302: Web server redirect to other page.This usually happens when you access google.com from outside USA. Google re-directs to country specific website. As shown below, google.com redirects to google.com.vn for Vietnamese Users.</p>

<p>Assume that you want to verify that the web server google.com responses code contains pattern 302,</p>

<p>On Response Field To Test, choose Response Code,</p>

<p>On Response Assertion Panel, click Add &ndash;> a new blank entry display &ndash;> enter 302 in Pattern to Test.</p>

<p><img src="http://www.tabaolan.com/images/jmeter88.png"></p>

<h4>Step 3) Add Assertion Results</h4>

<p>Right click Thread Group, Add &ndash;> Listener &ndash;> Assertion Results</p>

<p><img src="http://www.tabaolan.com/images/jmeter89.png"></p>

<p><img src="http://www.tabaolan.com/images/jmeter90.png"></p>

<h4>Step 4) Run your test</h4>

<p>Click on Thread Group &ndash;> Assertion Result</p>

<p>When you ready to run test, click Run button on the menu bar, or short key Ctrl+R.</p>

<p>The test result will display on Assertion Results pane. If Google server response code contains the pattern 302, the test case is passed. You will see the message displayed as follows:</p>

<p><img src="http://www.tabaolan.com/images/jmeter91.png"></p>

<p>Now back to Response Assertion Panel, you change the Pattern to test to from 302 to 500.</p>

<p><img src="http://www.tabaolan.com/images/jmeter92.png"></p>

<p>Because Google server response code doesn&rsquo;t contain this pattern, you will see the test case Failed as following:</p>

<p><img src="http://www.tabaolan.com/images/jmeter93.png"></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Jmeter : How to use Controllers]]></title>
    <link href="http://www.tabaolan.com/jmeter-how-to-use-controllers/"/>
    <updated>2014-08-15T04:15:51+01:00</updated>
    <id>http://www.tabaolan.com/jmeter-how-to-use-controllers</id>
    <content type="html"><![CDATA[<h2>How to use Controllers in JMeter</h2>

<p>If you want to control &ldquo;when&rdquo; to send a user request to a web server under test, what would you do?</p>

<p>JMeter gives us a feature to do that. It&rsquo;s Logic Controllers.</p>

<p><img src="http://www.tabaolan.com/images/jmeter94.png"></p>

<h3>Logic Controllers</h3>

<script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle" style="display:block" data-ad-client="ca-pub-5798698216356388" data-ad-slot="9425076351" data-ad-format="auto"></ins><script>(adsbygoogle = window.adsbygoogle || []).push({});</script></p>

<p>Logic Controllers let you define the order of processing request in a Thread. For example, you can use Random Controllers to send HTTP requests to the server randomly.</p>

<p>Logic Controllers determine the order in which user request are executed.</p>

<p>Some commonly used Logic controllers are below:</p>

<p><img src="http://www.tabaolan.com/images/jmeter95.png"></p>

<h3>Recording Controller</h3>

<script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle" style="display:block" data-ad-client="ca-pub-5798698216356388" data-ad-slot="7145934352" data-ad-format="auto"></ins><script>(adsbygoogle = window.adsbygoogle || []).push({});</script></p>

<p>JMeter can record your testing steps; recording controller is a place holder to store these recording steps.</p>

<p><img src="http://www.tabaolan.com/images/jmeter96.png"></p>

<h3>Simple Controller</h3>

<p>Simple Controller is just a container for user request.</p>

<p><img src="http://www.tabaolan.com/images/jmeter97.png"></p>

<h3>Loop Controller</h3>

<p>Loop Controller makes the user request run specified number of times or run forever as shown in figure:</p>

<p><img src="http://www.tabaolan.com/images/jmeter98.png"></p>

<h3>Random Controller</h3>

<script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle" style="display:block" data-ad-client="ca-pub-5798698216356388" data-ad-slot="3378542759" data-ad-format="auto"></ins><script>(adsbygoogle = window.adsbygoogle || []).push({});</script></p>

<p>Random Controller makes all the user requests run in random order in each loop period.</p>

<p>For example, you have 3 user requests to website <a href="http://www.google.com">http://www.google.com</a> in following order:</p>

<p>HTTP request</p>

<p>FTP request</p>

<p>JDBC request</p>

<p>These 3 requests should run 5 times; Total 15 (5*3) user requests will be sent to Google server by JMeter.</p>

<p>In sequential order, requests are sent sequentially in following order:</p>

<p>HTTP request &ndash;>FTP request->JDBC request</p>

<p>for each loop.</p>

<p><img src="http://www.tabaolan.com/images/jmeter99.png"></p>

<p>vs</p>

<p><img src="http://www.tabaolan.com/images/jmeter100.png"></p>

<p>In random order, requests are sent as randomly,</p>

<p>FTP request &ndash;>HTTP request->JDBC request</p>

<p>Or</p>

<p>JDBC request &ndash;>FTP request->HTTP request</p>

<p>For each loop.</p>

<h3>Module Controller</h3>

<p>he goal of Module Controller is to add modularity to JMeter.</p>

<p>The general idea is that web applications consist of small units of functionality (i.e. Logon, Create Account, Logoff&hellip;). This functionality can be stored in Simple Controller as &ldquo;modules&rdquo;.  Module Controller will choose which module needs to run.</p>

<p><img src="http://www.tabaolan.com/images/jmeter101.png"></p>

<p>Consider the following scenario &ndash;</p>

<p>You want to simulate:</p>

<p>50 users logging out,</p>

<p>100 users logging in</p>

<p>30 users  search www.google.com</p>

<p>You can use JMeter to create 3 modules. Each module simulates each user activity: Login, Logout, and Search.</p>

<p><img src="http://www.tabaolan.com/images/jmeter102.png"></p>

<p>The Module controller chooses which module needs to run.</p>

<p><img src="http://www.tabaolan.com/images/jmeter103.png"></p>

<h3>Other Important Controllers</h3>

<h4>Interleave Controller:  picks up and makes one of user request run in each loop of the thread.</h4>

<h4>Runtime Controller: controls how long its children are allowed to run.</h4>

<p>For example, if you specified Runtime Controller 10 seconds, JMeter will run your test for 10 seconds.</p>

<p><img src="http://www.tabaolan.com/images/jmeter104.png"></p>

<h4>Transaction Controller: measures the overall time taken to finish a test execution</h4>

<h4>Include Controller: is designed to use an external test plan. This controller allows you to use multiple test plans in JMeter.</h4>

<h2>Handons with Loop Controller</h2>

<p>This section shows you step-by-steps instruction to add Loop Controller setting to your current performance test plan.</p>

<p>The Loop Controller makes the samplers run as a certain number of times, in addition to the loop value you specified for the Thread Group. For example, if you</p>

<p>Add one HTTP Request to a Loop Controller with a loop count 50</p>

<p>Configure the Thread Group loop count to 2</p>

<p>Then, JMeter will send a total of 50 * 2 = 100 HTTP Requests.</p>

<p>This is the roadmap of this example:</p>

<p><img src="http://www.tabaolan.com/images/jmeter105.png"></p>

<h3>Step 1) Configuring Thread Group</h3>

<p>Right click on the Test Plan and add a new thread group: Add-> Threads (Users) &ndash;>Thread Group</p>

<p>But in Thread Group control panel, enter Thread Properties as following:</p>

<p><img src="http://www.tabaolan.com/images/jmeter106.png"></p>

<p>It will make one user request to the web server google.com and  run it 2 times.</p>

<p>Add HTTP request default to www.google.com.</p>

<p>Right Click Thread Group &ndash;> Logic Controller &ndash;> Loop Controller</p>

<p><img src="http://www.tabaolan.com/images/jmeter107.png"></p>

<h3>Step 2) Configuring Loop Controller</h3>

<p>Add value 50 to Loop Count field as below figure. It will make one user request to the web server google.com run it 50 times, in addition to the loop value =2 , you specified for the Thread Group above.So JMeter will send a total of 2 * 50 = 100 HTTP Requests.</p>

<p><img src="http://www.tabaolan.com/images/jmeter108.png"></p>

<p>Right click Loop Controller, Add &ndash;> Sampler &ndash;> HTTP request</p>

<p><img src="http://www.tabaolan.com/images/jmeter109.png"></p>

<h3>Step 3) Add View Results in Table</h3>

<p>We re-use Step 2 in Timer to add View Results in Table</p>

<p>So the test plan is shown in below figure</p>

<p><img src="http://www.tabaolan.com/images/jmeter110.png"></p>

<h3>Step 4) Run your test</h3>

<p>Now return View Results in Table, click Start button on Menu bar (Ctrl+R) to run test</p>

<p>As shown in the figure below, JMeter simulates one user request, which is sent 100 times, to the web server <a href="http://www.google.com/.">http://www.google.com/.</a> The Test is stopped after user request was sent in 100 times.</p>

<p><img src="http://www.tabaolan.com/images/jmeter111.png"></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Jmeter : How to use Processor]]></title>
    <link href="http://www.tabaolan.com/jmeter-how-to-use-processor/"/>
    <updated>2014-08-15T04:10:51+01:00</updated>
    <id>http://www.tabaolan.com/jmeter-how-to-use-processor</id>
    <content type="html"><![CDATA[<h2>How to use Processor in JMeter</h2>

<p>Processor is used to modify the Samplers in their scope.</p>

<p>There are 2 Types of processors:</p>

<p>1.Pre-processor</p>

<p>2.Post-processor</p>

<h3>Pre-processor</h3>

<script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle" style="display:block" data-ad-client="ca-pub-5798698216356388" data-ad-slot="9425076351" data-ad-format="auto"></ins><script>(adsbygoogle = window.adsbygoogle || []).push({});</script></p>

<p>Pre-processor executes some action before making Sampler Request.</p>

<p>onsider a simple example: let&rsquo;s say you wanted JMeter to &ldquo;spider&rdquo; through website under test, parse link(check all links on the page) and return the HTML. You would add some action such as &ldquo;HTML link parser&rdquo; to your controller before creating an HTTP request.</p>

<p><img src="http://www.tabaolan.com/images/jmeter112.png"></p>

<h3>Post-processor</h3>

<script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle" style="display:block" data-ad-client="ca-pub-5798698216356388" data-ad-slot="7145934352" data-ad-format="auto"></ins><script>(adsbygoogle = window.adsbygoogle || []).push({});</script></p>

<p>Post-processor executes some action after making a Sampler Request.</p>

<p>Consider a simple example: JMeter send HTTP request to the web server under test (etc www.google.com) and get the response. You want JMeter to stop the testif the server response is error. You can use the post-processor to do above task as following:</p>

<p><img src="http://www.tabaolan.com/images/jmeter113.png"></p>

<h3>Processor-Hands on</h3>

<script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle" style="display:block" data-ad-client="ca-pub-5798698216356388" data-ad-slot="3378542759" data-ad-format="auto"></ins><script>(adsbygoogle = window.adsbygoogle || []).push({});</script></p>

<p>This tutorial will show you step-by-step instructions how to use Post-processor in JMeter. Let start with simple test script.</p>

<p>1.JMeter sends HTTP request to the web server under test www.google.com.</p>

<ol>
<li><p>JMeter gets response from the Google server.</p></li>
<li><p>If server response is error, JMeter will stop the test.</p></li>
<li><p>If server response OK (no error), JMeter will continue the test.</p></li>
</ol>


<p>Here is the roadmap of this example:</p>

<p><img src="http://www.tabaolan.com/images/jmeter114.png"></p>

<h4>Step 1) Add Thread Group</h4>

<p>Right click on the Test Plan and add a new thread group: Add &ndash;> Threads (Users) &ndash;> Thread Group</p>

<p>But in Thread Group control panel, enter Thread Properties as following:</p>

<p><img src="http://www.tabaolan.com/images/jmeter115.png"></p>

<p>This setting lets JMeter create 10 user request to <a href="http://www.google.com">http://www.google.com</a>  10 times.</p>

<h4>Step 2) Add JMeter elements</h4>

<p>Add HTTP request default</p>

<p>Add HTTP request</p>

<p>We still make JMeter send request <a href="http://www.google.com">http://www.google.com</a> to Google server.</p>

<h4>Step 3) Add Post-Processor Element</h4>

<p>Right Click Thread Group &ndash;> Add &ndash;> Post Processor &ndash;> Result Status Action Handler</p>

<p>Result Status Action Handler allows the user to stop the thread or the whole test if the user request failed.</p>

<p><img src="http://www.tabaolan.com/images/jmeter116.png"></p>

<p>In Result Status Action Handle Pane, choose Stop Test Now. This selection will stop the test if JMeter get the error from server response.</p>

<p><img src="http://www.tabaolan.com/images/jmeter117.png"></p>

<h4>Step 4) Configure the HTTP Request</h4>

<p>Open the HTTP Request Panel. Enter &ldquo;abc&rdquo; to the Path field.</p>

<p><img src="http://www.tabaolan.com/images/jmeter118.png"></p>

<p>When you enter &ldquo;abc&rdquo; to the path, JMeter will create URL request to Google server: <a href="http://www.google.com/abc.">http://www.google.com/abc.</a> This URL doesn&rsquo;t exist on Google server. It is wrong URL request so Google server will return error.</p>

<h4>Step 5) Add View Result Tree</h4>

<p>Right Click Thread Group  &ndash;> Add  &ndash;> Listener  &ndash;> View Result Tree</p>

<p><img src="http://www.tabaolan.com/images/jmeter119.png"></p>

<h4>Step 6) Run Test</h4>

<p>Select View Result Tree, press Run button on Menu bar. You will see the error response from Google server and the test will stop with out completing 100 threads.</p>

<p><img src="http://www.tabaolan.com/images/jmeter120.gif"></p>

<p>Now return to step 4, open the HTTP Request pane, enter &ldquo;calendar&rdquo; to the pane. It makes JMeter create URL request <a href="http://www.google.com/calendar">http://www.google.com/calendar</a> to the Google server. This is correct URL request so Google server will return OK (no error).</p>

<p><img src="http://www.tabaolan.com/images/jmeter121.png"></p>

<p>Select View Result Tree, press Run button on Menu bar. You will see the OK response from Google server and the test will continue until all 100 threads are complete.</p>

<p><img src="http://www.tabaolan.com/images/jmeter122.gif"></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Jmeter : How to perform Distributed Testing]]></title>
    <link href="http://www.tabaolan.com/jmeter-how-to-perform-distributed-testing/"/>
    <updated>2014-08-15T04:10:00+01:00</updated>
    <id>http://www.tabaolan.com/jmeter-how-to-perform-distributed-testing</id>
    <content type="html"><![CDATA[<h2>How to perform Distributed Testing in JMeter</h2>

<h3>Overview</h3>

<p>Distributed testing is a kind of testing which use multiple systems to perform stress testing. Distributed testing is applied for testing web sites and server applications when they are working with multiple clients simultaneously.</p>

<p>Distributes testing uses client-server model as figure below:</p>

<p><img src="http://www.tabaolan.com/images/jmeter123.png"></p>

<p>Master: the system running JMeter GUI, control each slave.</p>

<p>Slave: the system running jmeter-server, receive command from the master and send a request to server under test.</p>

<p>Target: the web server under test, get request from slaves.</p>

<h3>Start your test</h3>

<script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle" style="display:block" data-ad-client="ca-pub-5798698216356388" data-ad-slot="9425076351" data-ad-format="auto"></ins><script>(adsbygoogle = window.adsbygoogle || []).push({});</script></p>

<h4>Precondition:</h4>

<p>*The firewalls on the systems are turned off. In some cases, the firewall may still be blocking the traffic. You should disable the Window firewall or Linux firewall.</p>

<p>*All the machines should be on same subnet. If machines are not on same subnet, maybe they will not recognize each other in the network.</p>

<p>*Use the same version of JMeter to avoid unanticipated errors/issues.</p>

<p>Here is the roadmap of this testing:</p>

<p><img src="http://www.tabaolan.com/images/jmeter124.png"></p>

<h3>Step 1) System configuration</h3>

<script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle" style="display:block" data-ad-client="ca-pub-5798698216356388" data-ad-slot="3378542759" data-ad-format="auto"></ins><script>(adsbygoogle = window.adsbygoogle || []).push({});</script></p>

<p>On the slave systems, go to jmeter/bin directory and execute file &ldquo;jmeter-server.bat&rdquo;.</p>

<p>Assume that a slave machine has IP address: 192.168.0.10. On windows, you should see a window appear like following figure:</p>

<p><img src="http://www.tabaolan.com/images/jmeter125.png"></p>

<p>On the master systems, go to /bin directory and edit file jmeter.properites, add IP slave machine as below</p>

<p><img src="http://www.tabaolan.com/images/jmeter126.png"></p>

<h3>Step 2) Run the test</h3>

<script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle" style="display:block" data-ad-client="ca-pub-5798698216356388" data-ad-slot="7145934352" data-ad-format="auto"></ins><script>(adsbygoogle = window.adsbygoogle || []).push({});</script></p>

<p>On the master machine, run JMeter GUI and open the test plan.</p>

<p>Click Run on the menu bar; select Remote start &ndash;> select the IP address of slave machine</p>

<p><img src="http://www.tabaolan.com/images/jmeter127.png"></p>

<h3>Step 3) Troubleshooting</h3>

<p>If you are unable to run test form the above machine and see below error, simply ask owner of slave machine to run the jmeter-server.bat File.</p>

<p><img src="http://www.tabaolan.com/images/jmeter128.png"></p>

<h3>Limitation</h3>

<p>There are some basic limitations for distributed testing. Here&rsquo;s list of the known items:</p>

<p>1.Server and all clients must be on the same subnet.</p>

<p>2.Distributed testing required target server to have large processing power. The target Server could be easily overloaded in case it gets too many requests by distributed JMeter tests.</p>

<p>3.A single JMeter can only handle a limited number of threads (100- 300 threads).</p>

<p>4.The distributed JMeter tests are complex, difficult for beginner to build.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Jmeter : How to use jmeter to record test scenarios]]></title>
    <link href="http://www.tabaolan.com/jmeter-how-to-use-jmeter-to-record-test-scenarios/"/>
    <updated>2014-08-15T04:05:00+01:00</updated>
    <id>http://www.tabaolan.com/jmeter-how-to-use-jmeter-to-record-test-scenarios</id>
    <content type="html"><![CDATA[<h2>How To Use JMeter To Record Test Scenarios</h2>

<p>In this tutorial, I will teach you how to set up and use the Apache JMeter HTTP(S) Test Script Recorder to record HTTP requests. Recording HTTP requests is a great way to building test plans, and can be useful in creating tests that closely mimic a normal user&rsquo;s behaviour.</p>

<h3>Start Building a Test Plan</h3>

<p>First, start JMeter. Then let&rsquo;s start building a test plan. If you already have a test plan that you would like to start with, skip this section and move on to adding a Recording Controller to your Thread Group (the next section).</p>

<p>Minimally, we will want to add a Thread Group and HTTP Request Defaults. Let&rsquo;s get start by adding a Thread Group.</p>

<h4>Add a Thread Group</h4>

<p>Add a Thread Group to Test Plan:</p>

<p>1.Right-click on Test Plan</p>

<p>2.Mouse over Add ></p>

<p>3.Mouse over Threads (Users)</p>

<p>4.Click on Thread Group</p>

<p>Set the Thread Group properties with the following values:</p>

<p><img src="http://www.tabaolan.com/images/jmeter129.png"></p>

<h4>Add an HTTP Request Defaults</h4>

<script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle" style="display:block" data-ad-client="ca-pub-5798698216356388" data-ad-slot="3378542759" data-ad-format="auto"></ins><script>(adsbygoogle = window.adsbygoogle || []).push({});</script></p>

<p>Now let&rsquo;s add HTTP Request Defaults to Thread Group:</p>

<p>1.Select Thread Group, then right-click it</p>

<p>2.Mouse over Add</p>

<p>3.Mouse over Config Element</p>

<p>4.Click on HTTP Request Defaults</p>

<p>In HTTP Request Defaults, under the Web Server section, fill in the Server Name or IP field with the name or IP address of the web server you want to test.</p>

<p><img src="http://www.tabaolan.com/images/jmeter130.png"></p>

<h4>Add an HTTP Cookie Manager</h4>

<p>If your web server uses cookies, you can add support for cookies by adding an HTTP Cookie Manager to the Thread Group:</p>

<p>1.Select Thread Group, then right-click it</p>

<p>2.Mouse over Add</p>

<p>3.Mouse over Config Element</p>

<p>4.Click on HTTP Cookie Manager</p>

<h4>Add a Recording Controller</h4>

<script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle" style="display:block" data-ad-client="ca-pub-5798698216356388" data-ad-slot="9425076351" data-ad-format="auto"></ins><script>(adsbygoogle = window.adsbygoogle || []).push({});</script></p>

<p>Now let&rsquo;s add a Recording Controller to Thread Group:</p>

<p>1.Select Thread Group, then right-click it</p>

<p>2.Mouse over Add</p>

<p>3.Mouse over Logic Controller</p>

<p>4.Click on Recording Controller</p>

<p>The Recording Controller is where recorded HTTP Request samplers will be created. The next step is to set up an HTTP(S) Test Script Recorder.</p>

<h4>Add HTTP(S) Test Script Recorder</h4>

<p>Now let&rsquo;s add an HTTP(S) Test Script Recorder to the WorkBench:</p>

<p>1.Select WorkBench, then right-click it</p>

<p>2.Mouse over Add</p>

<p>3.Mouse over Non-Test Elements</p>

<p>4.Click on HTTP(S) Test Script Recorder</p>

<p>Note: Items that are added to the WorkBench do not get saved with the rest of the test plan. If you want to save your WorkBench, right-click on WorkBench, then click Save Selection As&hellip;, and save it to your desired location. After it is saved, you may add it to any test plan that you have open by using the &ldquo;Merge&rdquo; menu item, and selecting your saved WorkBench.</p>

<h4>Including or Excluding URL Patterns (Optional)</h4>

<script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle" style="display:block" data-ad-client="ca-pub-5798698216356388" data-ad-slot="7145934352" data-ad-format="auto"></ins><script>(adsbygoogle = window.adsbygoogle || []).push({});</script></p>

<p>In the HTTP(S) Script Recorder, you may add URL Patterns, written as regular expressions, to include or exclude when you record. This can be useful to either include only the types of content you want to request (e.g. <em>.html, </em>.php, etc) or to exclude the types of content you do not want to request (e.g. <em>.jpg, </em>.png, *.js, etc).</p>

<p>To add a URL Pattern, click the &ldquo;Add&rdquo; button under the URL Patterns to Include or URL Patterns to Exclude section, then click on the top of the white area in the section. You should now be able to type in a pattern. Repeat the process to add more patterns.</p>

<p>Example: URL Patterns for webpages</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>.*\.html
</span><span class='line'>.*\.php
</span><span class='line'>.*\.htm
</span></code></pre></td></tr></table></div></figure>


<h4>Adding Items to the Script Recorder (Optional)</h4>

<p>Adding JMeter items to a the HTTP(S) Test Script Recorder will make recorded requests inherit the added item. For example, if we add a Timer item to the Script Recorder, the Timer will be added to each HTTP Request that is recorded. When the test is run, the timer will cause each test thread to wait before performing the HTTP Request.</p>

<p>Let&rsquo;s add a Constant Timer to HTTP(S) Test Script Recorder, as an example:</p>

<p>1.Select HTTP(S) Test Script Recorder, then Right-click it</p>

<p>2.Mouse over Add</p>

<p>3.Mouse over Timers</p>

<p>4.Click on Constant Timers</p>

<p>You may configure the thread delay to whatever you desire.</p>

<p><img src="http://www.tabaolan.com/images/jmeter131.png"></p>

<p>Suppose that you want to simulate a user clicking on a different page every 2 seconds. Setting the thread delay to 2000 ms will accomplish this by adding a 2 second delay to each HTTP Request that is recorded.</p>

<p>This is just one example of how you can add items to the Script Recorder to help create a test plan that performs the tests that you desire.</p>

<h4>Start Recording</h4>

<p>Clicking on the &ldquo;Start&rdquo; button, on the bottom of the Script Recorder window, will start the JMeter proxy server which will be used to intercept and record browser requests. Click on the Start button (of the recorder) now.</p>

<p>The first time you attempt to run the recorder, it will display an error saying that it can&rsquo;t start because a certificate does not exist. Click OK, then click Start a second time. You should see a message that says that a temporary certificate named ApacheJMeterTemporaryRootCA.crt has been created in JMeter bin directory. Click OK and continue.</p>

<p><img src="http://www.tabaolan.com/images/jmeter132.png"></p>

<p>Note: If you browser already uses a proxy, then you need to configure JMeter to use that proxy before starting JMeter, using the command-line options -H and -P.</p>

<h4>Configure Firefox To Use JMeter Proxy</h4>

<p>We will use Firefox as our browser when using the JMeter HTTP(S) Test Script Recorder because, unlike Chrome and some other browsers, it does allows you to override system-wide configuration for its proxy settings.</p>

<p>Configure Firefox to use localhost (127.0.0.1) on port 80 as its proxy for all traffic by following these steps:</p>

<p>1.Open Firefox</p>

<p>2.Go to the Preferences menu</p>

<p>3.Click on the Advanced tab</p>

<p>4.Then Network tab</p>

<p>5.In the &ldquo;Connection&rdquo; section, click on &ldquo;Settings&hellip;&rdquo;</p>

<p>6.Select the &ldquo;Manual proxy configuration&rdquo; radio button</p>

<p>7.Set HTTP Proxy to &ldquo;localhost&rdquo; and Port to &ldquo;8080&rdquo;</p>

<p>8.Check &ldquo;Use this proxy server for all protocols&rdquo;</p>

<p>9.Click OK and exit the Preferences menu.</p>

<p>Note: When Firefox is configured to use JMeter&rsquo;s Script Recorder as a proxy, it will only work properly if the Script Recorder is running.</p>

<h4>Recording HTTP Requests</h4>

<p>Now that our test plan&rsquo;s HTTP(S) Test Script Recorder is running, and Firefox is configured to use it as a proxy, the HTTP requests that Firefox sends will be recorded. Let&rsquo;s test it out.</p>

<p>In Firefox, go to your server&rsquo;s homepage (the same server that you configured in your JMeter HTTP Request Defaults):</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>http://your_domain.com/
</span></code></pre></td></tr></table></div></figure>


<p>Now there should be a little triangle next to your Recording Controller. Click on it to expand and show the requests that it has recorded. You should see the HTTP requests that were recorded, depending on which URL Patterns you have included and excluded. Feel free to browse your site to record more requests.</p>

<p>As you can see, a lot of requests were created. You may refine the list of HTTP requests by simply deleting unwanted entries here.</p>

<p>If you do not see any entries under your Recording Controller, you will want to review your URL Patterns in the HTTP(S) Test Script Recorder (Hint: Remove all includes and excludes to record everything).</p>

<p>Once you are done recording, click the &ldquo;Stop&rdquo; button at the bottom of the HTTP(S) Test Script Recorder window. Note that Firefox will no longer be able to reach any pages (because it is configured to use port 8080 as a proxy)&mdash;configure it to use &ldquo;No proxy&rdquo; if you want to function normally.</p>

<h4>Run Your Test Plan</h4>

<p>Once you are happy with the test plan you have recorded, save it, then run it. It will function exactly like a manually created test, so you can configure it, delete, and add items to make it match your desired test case more closely.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Jmeter : test of wsdl web services]]></title>
    <link href="http://www.tabaolan.com/jmeter-test-of-wsdl-web-services/"/>
    <updated>2014-08-15T04:04:40+01:00</updated>
    <id>http://www.tabaolan.com/jmeter-test-of-wsdl-web-services</id>
    <content type="html"><![CDATA[<h2>Jmeter test of wsdl web services</h2>

<p>In this post, I am going to explain how to create jmeter test for wsdl api testing to perform load testing.</p>

<p>Before creating test you need following set up in your machine.</p>

<p>1.Download and setup java path in your system environment path.</p>

<p>2.Download and install Jmeter.</p>

<p>3.Download and install soapUI.</p>

<script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle" style="display:block" data-ad-client="ca-pub-5798698216356388" data-ad-slot="9425076351" data-ad-format="auto"></ins><script>(adsbygoogle = window.adsbygoogle || []).push({});</script></p>

<p>Here I am using wsdl url [<a href="http://www.webservicex.com/MyWebservices.asmx?wsdl">http://www.webservicex.com/MyWebservices.asmx?wsdl</a>]</p>

<h3>Steps to create test:</h3>

<p>1.Launch your Jmeter.</p>

<p>2.Right click on test plan add new thread group by choosing option:  Add>>Threads (user)>>Thread Group.</p>

<p>3.Right click on “Thread Group“ add new sampler by choosing option:  Add>>Sampler>> SOAP/XML-RPC Request.</p>

<p><img src="http://www.tabaolan.com/images/jmeter143.png"></p>

<p>4.Now open soap UI and create new soapui project using wsdl url as I used in below.</p>

<p><img src="http://www.tabaolan.com/images/jmeter144.jpg"></p>

<p>5.After soap ui project created successfully. Copy soap request data as I copy below soap request.</p>

<p><img src="http://www.tabaolan.com/images/jmeter145.jpg"></p>

<p>6.Past copied soap request code into created Jmeter SOAP/XML-RPC Request” sampler in  Soap/XML-RPC data as below:</p>

<p><img src="http://www.tabaolan.com/images/jmeter146.jpg"></p>

<p>7.Right click on “Thread Group“ add new” View Results Tree” by choosing Add>Lisseners> View Results Tree.</p>

<script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle" style="display:block" data-ad-client="ca-pub-5798698216356388" data-ad-slot="3378542759" data-ad-format="auto"></ins><script>(adsbygoogle = window.adsbygoogle || []).push({});</script></p>

<p>8.Click on run button. After execution you can see response in “View Result Tree” as below</p>

<p><img src="http://www.tabaolan.com/images/jmeter146.jpg"></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Jmeter : test execution with Maven]]></title>
    <link href="http://www.tabaolan.com/jmeter-test-execution-with-maven/"/>
    <updated>2014-08-15T04:04:35+01:00</updated>
    <id>http://www.tabaolan.com/jmeter-test-execution-with-maven</id>
    <content type="html"><![CDATA[<h2>Jmeter test execution with Maven</h2>

<p>In this post I explain the procedure of Jmeter test execution using maven build tool.</p>

<h3>Setup</h3>

<p>1.Download and setup java path in your system environment path.</p>

<p>2.Download and install Jmeter.</p>

<p>3.Download and setup maven bin path in your system environment path.</p>

<p>After set up above points create a maven project having folder structure “src > test >jmeter”.</p>

<p>Put created Jmeter “.jmx” project in “src > test >jmeter” folder.</p>

<p>Below is pom.xml maven build file which need to put parallel src folder under project.</p>

<script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle" style="display:block" data-ad-client="ca-pub-5798698216356388" data-ad-slot="9425076351" data-ad-format="auto"></ins><script>(adsbygoogle = window.adsbygoogle || []).push({});</script></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;project xmlns="http://maven.apache.org/POM/4.0.0"     xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
</span><span class='line'>        xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd"&gt;
</span><span class='line'>        &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;
</span><span class='line'>        &lt;groupId&gt;demo-maven-jmeter&lt;/groupId&gt;
</span><span class='line'>        &lt;artifactId&gt;demo-maven-jmeter&lt;/artifactId&gt;
</span><span class='line'>        &lt;packaging&gt;jar&lt;/packaging&gt;
</span><span class='line'>        &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;
</span><span class='line'>        &lt;name&gt;demo&lt;/name&gt;
</span><span class='line'>        &lt;build&gt;
</span><span class='line'>             &lt;plugins&gt;
</span><span class='line'>               &lt;plugin&gt;
</span><span class='line'>                       &lt;groupId&gt;com.lazerycode.jmeter&lt;/groupId&gt;
</span><span class='line'>                       &lt;artifactId&gt;jmeter-maven-plugin&lt;/artifactId&gt;
</span><span class='line'>                       &lt;version&gt;1.4.1&lt;/version&gt;
</span><span class='line'>                       &lt;executions&gt;
</span><span class='line'>                               &lt;execution&gt;
</span><span class='line'>                                       &lt;id&gt;jmeter-tests&lt;/id&gt;
</span><span class='line'>                                       &lt;phase&gt;verify&lt;/phase&gt;
</span><span class='line'>                                       &lt;goals&gt;
</span><span class='line'>                                              &lt;goal&gt;jmeter&lt;/goal&gt;
</span><span class='line'>                                       &lt;/goals&gt;
</span><span class='line'>                               &lt;/execution&gt;
</span><span class='line'>                       &lt;/executions&gt;
</span><span class='line'>               &lt;/plugin&gt;
</span><span class='line'>            &lt;/plugins&gt;
</span><span class='line'>        &lt;/build&gt;
</span><span class='line'>&lt;/project&gt;
</span></code></pre></td></tr></table></div></figure>


<p>Open command prompt and go to project and run command “mvn install”.</p>

<p>Run command “mvn verify” to execute Jmeter test.</p>

<p>After execution jmeter test report is generated under target>Jmeter>report folder in html format as below screen.</p>

<script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle" style="display:block" data-ad-client="ca-pub-5798698216356388" data-ad-slot="3378542759" data-ad-format="auto"></ins><script>(adsbygoogle = window.adsbygoogle || []).push({});</script></p>

<p>Good luck and hope this help you</p>
]]></content>
  </entry>
  
</feed>
