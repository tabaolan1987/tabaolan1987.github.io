<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: TestNG-Framework | Selenium WebDriver, JMETER Tutorial]]></title>
  <link href="http://www.tabaolan.com/categories/testng-framework/atom.xml" rel="self"/>
  <link href="http://www.tabaolan.com/"/>
  <updated>2015-11-09T02:52:42+00:00</updated>
  <id>http://www.tabaolan.com/</id>
  <author>
    <name><![CDATA[Ta Bao Lan]]></name>
    <email><![CDATA[tabaolan1987@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[TestNG Framework P1 : Introduction]]></title>
    <link href="http://www.tabaolan.com/TestNG-Framework/testng-framework-introduction/"/>
    <updated>2014-05-26T05:00:14+01:00</updated>
    <id>http://www.tabaolan.com/TestNG-Framework/testng-framework-introduction</id>
    <content type="html"><![CDATA[<h2>TestNG Introduction</h2>

<p>TestNG is a testing testing framework inspired from JUnit and NUnit but introducing some new functionality that make it more powerful and easier to use.</p>

<!--more-->


<p>TestNG is an open source automated testing framework; where NG of TestNG means Next Generation. TestNG is similar to JUnit but it is much more powerful than JUnit but still it’s inspired by JUnit. It is designed to be better than JUnit, especially when testing integrated classes. Pay special thanks to Cedric Beust who is the creator of TestNG.</p>

<p>TestNG eliminates most of the limitations of the older framework and gives the developer the ability to write more flexible and powerful tests with help of easy annotations, grouping, sequencing &amp; parameterizing.</p>

<h3>Benefits of TestNG</h3>

<p>There are number of benefits of TestNG but from Selenium perspective, major advantages of TestNG are :</p>

<p>1) It gives the ability to produce HTML Reports of execution</p>

<p>2) Annotations made testers life easy</p>

<p>3) Test cases can be Grouped &amp; Prioritized more easily</p>

<p>4) Parallel testing is possible</p>

<p>5) Generates Logs</p>

<p>6) Data Parametrise action is possible</p>

<p><script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script><ins class="adsbygoogle" style="display:block" data-ad-client="ca-pub-5798698216356388" data-ad-slot="3378542759" data-ad-format="auto"></ins><script>(adsbygoogle = window.adsbygoogle || []).push({});</script>
<script src="https://www.gstatic.com/xads/publisher_badge/contributor_badge.js" data-width="728" data-height="90" 
data-theme="light" data-pub-name="tabaolan.com" data-pub-id="ca-pub-5798698216356388"></script></p>

<h3>Test Case Writing</h3>

<p>Writing a test in TestNG is quite simple and basically involves following steps:</p>

<p>Step 1 – Write the business logic of the test</p>

<p>Step 2 – Insert TestNG annotations in the code</p>

<p>Step 3 &ndash; Add the information about your test (e.g. the class names, methods names, groups names etc…) in a testng.xml file</p>

<p>Step 4 &ndash; Run TestNG</p>

<p><script src="https://www.gstatic.com/xads/publisher_badge/contributor_badge.js" data-width="728" data-height="90" 
data-theme="light" data-pub-name="tabaolan.com" data-pub-id="ca-pub-5798698216356388"></script></p>

<h3>Annotations in TestNG</h3>

<p>@BeforeSuite: The annotated method will be run before all tests in this suite have run.</p>

<p>@AfterSuite: The annotated method will be run after all tests in this suite have run.</p>

<p>@BeforeTest: The annotated method will be run before any test method belonging to the classes inside the tag is run.</p>

<p>@AfterTest: The annotated method will be run after all the test methods belonging to the classes inside the tag have run.</p>

<p>@BeforeGroups: The list of groups that this configuration method will run before. This method is guaranteed to run shortly before the first test method that belongs to any of these groups is invoked.</p>

<p>@AfterGroups: The list of groups that this configuration method will run after. This method is guaranteed to run shortly after the last test method that belongs to any of these groups is invoked.</p>

<p>@BeforeClass: The annotated method will be run before the first test method in the current class is invoked.</p>

<p>@AfterClass: The annotated method will be run after all the test methods in the current class have been run.</p>

<p>@BeforeMethod: The annotated method will be run before each test method.</p>

<p>@AfterMethod: The annotated method will be run after each test method.</p>

<p>@Test: The annotated method is a part of a test case.</p>

<p>Benefits of using annotations</p>

<p>1) TestNG identifies the methods it is interested in by looking up annotations. Hence method names are not restricted to any pattern or format.</p>

<p>2) We can pass additional parameters to annotations.</p>

<p>3) Annotations are strongly typed, so the compiler will flag any mistakes right away.</p>

<p>4) Test classes no longer need to extend anything (such as Test Case, for JUnit 3).</p>

<p><script src="https://www.gstatic.com/xads/publisher_badge/contributor_badge.js" data-width="728" data-height="90"  
data-theme="light" data-pub-name="tabaolan.com" data-pub-id="ca-pub-5798698216356388"></script></p>

<h3>Now take a look in <a href="/TestNG-Framework/testng-framework-download/">TestNG Framework P2 : Download</a></h3>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[TestNG Framework P2 : Download]]></title>
    <link href="http://www.tabaolan.com/TestNG-Framework/testng-framework-download/"/>
    <updated>2014-05-26T05:00:12+01:00</updated>
    <id>http://www.tabaolan.com/TestNG-Framework/testng-framework-download</id>
    <content type="html"><![CDATA[<h2>Install TestNG in Eclipse</h2>

<p>It is easy to install TestNG, as it comes as a plugin for Eclipse IDE.</p>

<p>Prerequisite for installing TestNG is your Internet connection should be up &amp; running during installation of this plugin and Eclipse IDE should be installed in your computer.</p>

<p>Please see Download and Install Eclipse to setup Eclipse to you system.</p>

<!--more-->


<h3>Steps to follow:</h3>

<p>1) Launch the Eclipse IDE and from Help menu, click “Install New Software”.</p>

<p><img src="/images/Install-TestNG-1.png"></p>

<p>2) You will see a dialog window, click “Add” button.</p>

<p><img src="/images/Install-TestNG-2.png"></p>

<p>3) Type name as you wish, lets take “TestNG” and type [<a href="http://beust.com/eclipse/">http://beust.com/eclipse/</a>] as location. Click OK.</p>

<p><img src="/images/Install-TestNG-3.png"></p>

<p>4) You come back to the previous window but this time you must see TestNG option in the available software list. Just Click TestNG and press “Next” button.</p>

<p><img src="/images/Install-TestNG-4.png"></p>

<p>5) Click “I accept the terms of the license agreement” then click Finish.</p>

<p><img src="/images/Install-TestNG-5.png"></p>

<p>6) You may or may not encounter a Security warning, if in case you do just click OK.</p>

<p><img src="/images/Install-TestNG-7.png"></p>

<p>7) Click Next again on the succeeding dialog box until it prompts you to Restart the Eclipse.</p>

<p>8) You are all done now, just Click Yes.</p>

<p><img src="/images/Install-TestNG-8.png"></p>

<p>9) Proceed with your workplace.</p>

<p>10) After restart, verify if TestNG was indeed successfully installed. Right click on you project and see if TestNG is displayed in the opened menu.</p>

<p><img src="/images/Install-TestNG-9.png">
<script src="https://www.gstatic.com/xads/publisher_badge/contributor_badge.js" data-width="728" data-height="90" 
data-theme="light" data-pub-name="tabaolan.com" data-pub-id="ca-pub-5798698216356388"></script></p>

<h3>Now after download success , take a look in <a href="/TestNG-Framework/testng-framework-first-test-case-with-testng/">First Test Case With TestNG</a></h3>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[TestNG Framework P3 : First Test case with TestNG]]></title>
    <link href="http://www.tabaolan.com/TestNG-Framework/testng-framework-first-test-case-with-testng/"/>
    <updated>2014-05-26T05:00:11+01:00</updated>
    <id>http://www.tabaolan.com/TestNG-Framework/testng-framework-first-test-case-with-testng</id>
    <content type="html"><![CDATA[<h2>First Test case with TestNG</h2>

<p>Steps to follow:</p>

<p>1) Press Ctrl+N , select “TestNG Class” under TestNG category and click Next.</p>

<p>Or</p>

<p>Right click on Test Case folder, go to TestNG and select “TestNG Class“.</p>

<!--more-->


<p><img src="/images/TestNG-FTC-1.png"></p>

<p>2) If your project is set up and you have selected the Test Case folder before creating TestNG class then the source folder and the package name will be prepopullated on the form. Set class name as ‘TestNG‘.
Under Annotations, check “@BeforeMethod”, “@AfterMethod” and click Finish. That’s it.</p>

<p><img src="/images/TestNG-FTC-2.png"></p>

<p>3) Now it will display the newly created TestNg class under the Test Case package(folder). TestNG class will look like the image below with displaying three empty methods. One method f() by default and before &amp; after method, as selected during the creation of the class.</p>

<p><img src="/images/TestNG-FTC-3.png"></p>

<p>4) Project explorer will look like this with TestNG class.</p>

<p><img src="/images/TestNG-FTC-3.png"></p>

<p>Now it is the time to write the first TestNG test case.</p>

<p>5) Let’s take an example of First Test Case and divide the test case in to three parts .</p>

<p>@BeforeMethod : Launch Firefox and direct it to the Base URL</p>

<p>@Test : Enter Username &amp; Password to Login, Print console message</p>

<p>@AfterMethod : Close Firefox browser</p>

<p><script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script><ins class="adsbygoogle" style="display:block" data-ad-client="ca-pub-5798698216356388" data-ad-slot="3378542759" data-ad-format="auto"></ins><script>(adsbygoogle = window.adsbygoogle || []).push({});</script>
<script src="https://www.gstatic.com/xads/publisher_badge/contributor_badge.js" data-width="728" data-height="90" 
data-theme="light" data-pub-name="tabaolan.com" data-pub-id="ca-pub-5798698216356388"></script>
```
package automationFramework;</p>

<p>import java.util.concurrent.TimeUnit;
import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.firefox.FirefoxDriver;
import org.testng.annotations.Test;
import org.testng.annotations.BeforeMethod;
import org.testng.annotations.AfterMethod;</p>

<p>public class TestNG {</p>

<pre><code>public WebDriver driver;
</code></pre>

<p>  @Test
  public void main() {</p>

<pre><code>// Find the element that's ID attribute is 'account'(My Account)
  driver.findElement(By.id("account")).click();
  // Find the element that's ID attribute is 'log' (Username)
  // Enter Username on the element found by above desc.
  driver.findElement(By.id("email")).sendKeys("yourusername");
  // Find the element that's ID attribute is 'pwd' (Password)
  // Enter Password on the element found by the above desc.
  driver.findElement(By.id("pass")).sendKeys("yourpassword");
  // Now submit the form. WebDriver will find the form for us from the element
  driver.findElement(By.id("loginbutton")).click();
  // Print a Log In message to the screen
  System.out.println(" Login Successfully");
</code></pre>

<p>  }
  @BeforeMethod
  public void beforeMethod() {</p>

<pre><code>  // Create a new instance of the Firefox driver
  driver = new FirefoxDriver();
  //Put a Implicit wait, this means that any search for elements on the page could take the time the implicit wait is set for before throwing exception
  driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);
  //Launch the Online Store Website
  driver.get("https://www.facebook.com/");
</code></pre>

<p>  }</p>

<p>  @AfterMethod
  public void afterMethod() {</p>

<pre><code>  // Close the driver
  driver.quit();
</code></pre>

<p>  }</p>

<p>}</p>

<p>```</p>

<p>6) Run the test by right click on the test case script and select Run As > TestNG Test.</p>

<p><img src="/images/TestNG-FTC-5.png"></p>

<h4>Results of running the Testng Test Case</h4>

<p>7) Give it few minutes to complete the execution, once it is finished the results will look like this in the TestNg Result window.</p>

<p><img src="/images/TestNG-FTC-6.png"></p>

<p>It displayed ‘passed : 1′. This means test is successful and  Passed.</p>

<p>There are 3 sub tabs. “All Tests”, “Failed Tests” and “Summary”. Just click “All Tests” to see what is there.</p>

<p><img src="/images/TestNG-FTC-7.png"></p>

<p>As you see, there is information of which test cases are executed and their duration. Take look to other tabs. Better than Junit right?</p>

<p>8) TestNG also produce HTML reports. To access those reports go to the Project directory and open test-output folder.</p>

<p><img src="/images/TestNG-FTC-8.png"></p>

<p>9) TestNG also produce ‘index.html‘ report and it resides in the same test-output folder. This reports gives the link to all the different component of the TestNG reports like Groups &amp; Reporter Output. On clicking these will display detailed descriptions of execution. In the advance chapter of TestNG we will go though each of the TestNG topics.</p>

<p><img src="/images/TestNG-FTC-10.png"></p>

<p><img src="/images/TestNG-FTC-11.png">
<script src="https://www.gstatic.com/xads/publisher_badge/contributor_badge.js" data-width="728" data-height="90" 
data-theme="light" data-pub-name="tabaolan.com" data-pub-id="ca-pub-5798698216356388"></script></p>

<h3>Now take a look how to create a test suite : <a href="/TestNG-Framework/testng-framework-test-suite/">P4 : Test Suite</a></h3>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[TestNG Framework P4 : Test Suite]]></title>
    <link href="http://www.tabaolan.com/TestNG-Framework/testng-framework-test-suite/"/>
    <updated>2014-05-26T05:00:10+01:00</updated>
    <id>http://www.tabaolan.com/TestNG-Framework/testng-framework-test-suite</id>
    <content type="html"><![CDATA[<h2>TestNG Test Suite</h2>

<p>In any project, you will end up to a place where you need to execute so many test cases on a run. Running a set of test cases together is call executing a Test Suite. Those test cases can be dependent to each other or may have to be executed in a certain order. TestNg gives us the capability to manage our test execution.</p>

<p>In TestNG framework, we need to create testng.xml file to create and handle multiple test classes. This is the xml file where you will configure your test run, set test dependency, include or exclude any test, method, class or package and set priority etc.</p>

<!--more-->


<h3>How to do it…</h3>

<h4>Step 1 : Create a TestNG XML</h4>

<p>1) Right click on Project folder, go to New and select ‘File‘ as shown in below image.</p>

<p><img src="/images/TestNG-Suite1.png"></p>

<p>2) In New file wizard, add file name = ‘testng.xml‘ as shown in below given image and click on Finish button.</p>

<p><img src="/images/TestNG-Suite2.png"></p>

<p>3) It will add testng.xml file under your project folder.</p>

<h4>Step 2 : Write xml code ?</h4>

<p>Now add below given code in your testng.xml file.see the image below</p>

<p><img src="/images/TestNG-Suite3.png"></p>

<p>Hope you have understood the xml code, as it is quite simple hierarchy:</p>

<p>Very first tag is the Suite tag<suite>, under that it is the Test tag<test> and then the Class tag<classes>. You can give any name to the suite and the test but you need to provide the correct name to the <classes> tag which is a combination of your Package name and Test Case name.</p>

<h4>Step 3 : Execute a testng.xml</h4>

<p>Now it’s time to run the xml. Run the test by right click on the testng.xml file and select Run As > TestNG Suite.</p>

<p><img src="/images/TestNG-Suite4.png"></p>

<p>It will take few seconds to start the testng execution engine and soon you will notice that your test will run and complete. Once the execution is complete, you can view test execution result under the TestNg console.</p>

<p><img src="/images/TestNG-Suite5.png"></p>

<p>This is the one simple example of creating and running testng.xml file in eclipse.</p>

<p><script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script><ins class="adsbygoogle" style="display:block" data-ad-client="ca-pub-5798698216356388" data-ad-slot="3378542759" data-ad-format="auto"></ins><script>(adsbygoogle = window.adsbygoogle || []).push({});</script>
<script src="https://www.gstatic.com/xads/publisher_badge/contributor_badge.js" data-width="728" data-height="90" 
data-theme="light" data-pub-name="tabaolan.com" data-pub-id="ca-pub-5798698216356388"></script></p>

<h3>Building a Test Suite</h3>

<p>Now when you have learned how to build the xml, now it’s time to learn how to build a Test Suite using testng.xml. It is again not a complex task, all you need to do is to add your test cases to your xml file in <classes> tag.</p>

<p><img src="/images/TestNG-Suite6.png"></p>

<p>The above test will execute only those tests, which are mentioned in the testng.xml. The rest of the test cases under ‘automationFramework’ package will remain untouched.</p>

<h3>You are able to know how to run the test suite , I think you need to know about : <a href="/TestNG-Framework/testng-framework-annotations/">P5: Annotations , Groups and OnDepends</a></h3>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[TestNG Framework P5: Annotations , Groups and OnDepends]]></title>
    <link href="http://www.tabaolan.com/TestNG-Framework/testng-framework-annotations/"/>
    <updated>2014-05-26T05:00:09+01:00</updated>
    <id>http://www.tabaolan.com/TestNG-Framework/testng-framework-annotations</id>
    <content type="html"><![CDATA[<h2>TestNG Annotations, Groups &amp; OnDepends</h2>

<h3>TestNG Annotations</h3>

<p>In the TestNG Introduction chapter we have came across different annotations used in TestNG Framework but so far we have used just three(Before, After &amp; Test). All though these are the most frequently used annotations but who know how far you will go with your framework and may like to use other useful TestNG annotations.</p>

<!--more-->


<p>Before that I would like you to give a small idea on Annotations hierarchy or Annotations levels in TestNG.</p>

<p><script src="https://www.gstatic.com/xads/publisher_badge/contributor_badge.js" data-width="728" data-height="90" 
data-theme="light" data-pub-name="tabaolan.com" data-pub-id="ca-pub-5798698216356388"></script>
```
<suite></p>

<pre><code>   &lt;test&gt;
         &lt;classes&gt;
                &lt;method&gt;
                      &lt;test&gt;
                &lt;/method&gt;
         &lt;/classes&gt;
   &lt;/test&gt;
</code></pre>

<p></suite>
```</p>

<p>It says that @Test is the smallest annotation here. @Method will be executed first, before and after the execution of @Test. The same way @Class will be executed first, before and after the execution of @Method and so on.</p>

<p>Now with the below example it will be clear to you easily.</p>

<p><script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script><ins class="adsbygoogle" style="display:block" data-ad-client="ca-pub-5798698216356388" data-ad-slot="3378542759" data-ad-format="auto"></ins><script>(adsbygoogle = window.adsbygoogle || []).push({});</script>
<script src="https://www.gstatic.com/xads/publisher_badge/contributor_badge.js" data-width="728" data-height="90" 
data-theme="light" data-pub-name="tabaolan.com" data-pub-id="ca-pub-5798698216356388"></script>
```
package automationFramework;</p>

<p>import org.testng.annotations.AfterClass;
import org.testng.annotations.AfterMethod;
import org.testng.annotations.AfterSuite;
import org.testng.annotations.AfterTest;
import org.testng.annotations.BeforeClass;
import org.testng.annotations.BeforeMethod;
import org.testng.annotations.BeforeSuite;
import org.testng.annotations.BeforeTest;
import org.testng.annotations.Test;
public class Sequencing {</p>

<pre><code>    @Test
    public void testCase1() {
        System.out.println("This is the Test Case 1");
    }

    @Test
    public void testCase2() {
        System.out.println("This is the Test Case 2");
    }

    @BeforeMethod
    public void beforeMethod() {
        System.out.println("This will execute before every Method");
    }

    @AfterMethod
    public void afterMethod() {
        System.out.println("This will execute after every Method");
    }

    @BeforeClass
    public void beforeClass() {
        System.out.println("This will execute before the Class");
    }

    @AfterClass
    public void afterClass() {
        System.out.println("This will execute after the Class");
    }

    @BeforeTest
    public void beforeTest() {
        System.out.println("This will execute before the Test");
    }

    @AfterTest
    public void afterTest() {
        System.out.println("This will execute after the Test");
    }

    @BeforeSuite
    public void beforeSuite() {
        System.out.println("This will execute before the Test Suite");
    }

    @AfterSuite
    public void afterSuite() {
        System.out.println("This will execute after the Test Suite");
    }

}
</code></pre>

<p>```</p>

<p>Output of the above code will be like this:</p>

<p><img src="/images/TestNG-Annotations-1.png"></p>

<p>It is clearly visible that the @Suite annotation is the very first and the very lastly executed. Then @Test followed by @Class. Now if you notice, the @Method has executed twice. As @Test is a method in the class, hence @Method will always executed for each @Test method.</p>

<p><script src="https://www.gstatic.com/xads/publisher_badge/contributor_badge.js" data-width="728" data-height="90" 
data-theme="light" data-pub-name="tabaolan.com" data-pub-id="ca-pub-5798698216356388"></script></p>

<h3>Test Case Grouping</h3>

<p>‘Groups‘ is one more annotation of TestNG which can be used in the execution of multiple tests. Let’s say you have hundred tests of class vehicle and in it ten method of car, ten method of scooter and so on. You probably like to run all the scooter tests together in a batch. And you want all to be in a single test suite. With the help of grouping you can easily overcome this situation.</p>

<h4>How to do it…</h4>

<p>1) Create two methods for Car, two methods for Scooter and one method in conjunction with Car &amp; Sedan Car.</p>

<p>2) Group them separately with using  (groups = { ” Group Name” })</p>

<p><script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script><ins class="adsbygoogle" style="display:block" data-ad-client="ca-pub-5798698216356388" data-ad-slot="3378542759" data-ad-format="auto"></ins><script>(adsbygoogle = window.adsbygoogle || []).push({});</script>
<script src="https://www.gstatic.com/xads/publisher_badge/contributor_badge.js" data-width="728" data-height="90" 
data-theme="light" data-pub-name="tabaolan.com" data-pub-id="ca-pub-5798698216356388"></script>
```
package automationFramework;</p>

<p>import org.testng.annotations.Test;</p>

<p>public class Grouping {
  @Test (groups = { &ldquo;Car&rdquo; })
  public void Car1() {</p>

<pre><code>  System.out.println("Batch Car - Test car 1");
</code></pre>

<p>  }
  @Test (groups = { &ldquo;Car&rdquo; })
  public void Car2() {</p>

<pre><code>  System.out.println("Batch Car - Test car 2");
</code></pre>

<p>  }
  @Test (groups = { &ldquo;Scooter&rdquo; })
  public void Scooter1() {</p>

<pre><code>  System.out.println("Batch Scooter - Test scooter 1");
</code></pre>

<p>  }
  @Test (groups = { &ldquo;Scooter&rdquo; })
  public void Scooter2() {</p>

<pre><code>  System.out.println("Batch Scooter - Test scooter 2");
</code></pre>

<p>  }
  @Test (groups = { &ldquo;Car&rdquo;, &ldquo;Sedan Car&rdquo; })
  public void Sedan1() {</p>

<pre><code>  System.out.println("Batch Sedan Car - Test sedan 1");
</code></pre>

<p>  }
}</p>

<p>```</p>

<p>3) Create a testng xml like this:</p>

<p><script src="https://www.gstatic.com/xads/publisher_badge/contributor_badge.js" data-width="728" data-height="90"  
data-theme="light" data-pub-name="tabaolan.com" data-pub-id="ca-pub-5798698216356388"></script>
```
<suite name="Suite"></p>

<pre><code>&lt;test name="Practice Grouping"&gt;
    &lt;groups&gt;
    &lt;run&gt;
    &lt;include name="Car" /&gt;
    &lt;/run&gt;
&lt;/groups&gt;
&lt;classes&gt;
    &lt;class name="automationFramework.Grouping" /&gt;
&lt;/classes&gt;
&lt;/test&gt;
</code></pre>

<p></suite></p>

<p>```
<script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script><ins class="adsbygoogle" style="display:block" data-ad-client="ca-pub-5798698216356388" data-ad-slot="3378542759" data-ad-format="auto"></ins><script>(adsbygoogle = window.adsbygoogle || []).push({});</script>
<script src="https://www.gstatic.com/xads/publisher_badge/contributor_badge.js" data-width="728" data-height="90" 
data-theme="light" data-pub-name="tabaolan.com" data-pub-id="ca-pub-5798698216356388"></script></p>

<p>4) Run the test by right click on the testng.xml file and select Run As > TestNG Suite. Output will be like this in TestNg console:</p>

<p><img src="/images/TestNG-Grouping-1.png"></p>

<p> Note: We have just call the group ‘Car’ from the xml and it also executed the test for Sedan Car, as we have mentioned the ‘Car’ as well while declaring the group of Sedan Car.</p>

<p>Clubbing of groups is also possible, take a look at the below xml:</p>

<p><script src="https://www.gstatic.com/xads/publisher_badge/contributor_badge.js" data-width="728" data-height="90" 
data-theme="light" data-pub-name="tabaolan.com" data-pub-id="ca-pub-5798698216356388"></script>
```</p>

<p><suite name="Suite">
   <test name="Practice Grouping"></p>

<pre><code>  &lt;groups&gt;
     &lt;define name="All"&gt;
         &lt;include name="Car"/&gt;
         &lt;include name="Scooter"/&gt;
     &lt;/define&gt;
    &lt;run&gt;
         &lt;include name="All"/&gt;
    &lt;/run&gt;
 &lt;/groups&gt;
 &lt;classes&gt;
      &lt;class name="automationFramework.Grouping" /&gt;
&lt;/classes&gt;
</code></pre>

<p>   </test>
</suite></p>

<p>```</p>

<p>You can see that we have created a new Group with the name ‘All’ and include other groups in it. Then simply called the newly created group for execution. The output will be like this:</p>

<p><img src="/images/TestNG-Grouping-2.png"></p>

<h3>Dependent Test</h3>

<p>Sometimes, you may need to invoke methods in a Test case in a particular order or you want to share some data and state between methods. This kind of dependency is supported by TestNG as it supports the declaration of explicit dependencies between test methods.</p>

<p>TestNG allows you to specify dependencies either with:</p>

<p>Using attributes dependsOnMethods in @Test annotations OR</p>

<p>Using attributes dependsOnGroups in @Test annotations.</p>

<p>Take a look over the below example:</p>

<p><script src="https://www.gstatic.com/xads/publisher_badge/contributor_badge.js" data-width="728" data-height="90" 
data-theme="light" data-pub-name="tabaolan.com" data-pub-id="ca-pub-5798698216356388"></script>
```
package automationFramework;</p>

<p>import org.testng.annotations.Test;</p>

<p>public class Dependent {
  @Test (dependsOnMethods = { &ldquo;OpenBrowser&rdquo; })
  public void SignIn() {</p>

<pre><code>  System.out.println("This will execute second (SignIn)");
</code></pre>

<p>  }
  @Test
  public void OpenBrowser() {</p>

<pre><code>  System.out.println("This will execute first (Open Browser)");
</code></pre>

<p>  }
  @Test (dependsOnMethods = { &ldquo;SignIn&rdquo; })
  public void LogOut() {</p>

<pre><code>  System.out.println("This will execute third (Log Out)");
</code></pre>

<p>  }</p>

<p>```</p>

<p>The output will be like this:</p>

<p><img src="/images/TestNG-Dependent1.png"></p>

<h3>Take look for more information about : <a href="/testng-framework-prioritizing-and-sequencing/">P6 : Prioritizing and Sequencing</a></h3>
]]></content>
  </entry>
  
</feed>
