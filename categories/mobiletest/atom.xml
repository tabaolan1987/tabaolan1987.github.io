<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: MobileTest | Selenium Tutorial]]></title>
  <link href="http://www.tabaolan.com/categories/mobiletest/atom.xml" rel="self"/>
  <link href="http://www.tabaolan.com/"/>
  <updated>2014-11-06T07:58:42+00:00</updated>
  <id>http://www.tabaolan.com/</id>
  <author>
    <name><![CDATA[Ta Bao Lan]]></name>
    <email><![CDATA[tabaolan1987@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Mobile Testing : Guide to Functional testing in Mobile App]]></title>
    <link href="http://www.tabaolan.com/blog/2014/08/21/mobile-testing-guide-to-test-mobile-app/"/>
    <updated>2014-08-21T05:44:47+01:00</updated>
    <id>http://www.tabaolan.com/blog/2014/08/21/mobile-testing-guide-to-test-mobile-app</id>
    <content type="html"><![CDATA[<h2>Mobile Testing : Guide to Functional testing in Mobile App</h2>

<p>Some or all of the following testing types may be performed depending on your mobile testing requirements</p>

<p>1.Functional testing</p>

<p>2.Performance testing</p>

<p>3.Security testing</p>

<p>4.Usability testing</p>

<p>5.Compatibility testing</p>

<p>6.Recoverability Testing</p>

<h3>Functional testing</h3>

<p><script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script><ins class="adsbygoogle" style="display:block" data-ad-client="ca-pub-5798698216356388" data-ad-slot="9425076351" data-ad-format="auto"></ins><script>(adsbygoogle = window.adsbygoogle || []).push({});</script></p>

<p>The functional testing of Mobiles normally consists in the areas of testing user interactions as well as testing the transactions. The various factors which are relevant in functional testing are</p>

<p>1.Type of application based upon the business functionality usages (banking, gaming, social or business)</p>

<p>2.Target audience type (consumer, enterprise, education)</p>

<p>3.Distribution channel which is used to spread the application (e.g. Apple App Store, Google play, direct distribution)</p>

<p>The most fundamental test scenarios in the functional testing can be considered as :</p>

<p>1.To validate whether all the required mandatory fields are working as required.</p>

<p>2.To validate that the mandatory fields are displayed in the screen in a distinctive way than the non-mandatory fields.</p>

<p>3.To validate whether the application works as per as requirement whenever the application starts/stops.</p>

<p>4.To validate whether the application goes into minimized mode whenever there is an incoming phone call. In order to validate the same we need to use a second phone, to call the device.</p>

<p>5.To validate whether the phone is able to store, process and receive SMS whenever the app is running. In order to validate the same we need to use a second phone to send sms to the device which is being tested and where the application under test is currently running.</p>

<p>6.To validate that the device is able to perform required multitasking requirements whenever it is necessary to do so.</p>

<p>7.To validate that the application allows necessary social network options such as sharing, posting and navigation etc.</p>

<p>8.To validate that the application supports any payment gateway transaction such as Visa, Mastercard, Paypal etc as required by the application.</p>

<p>9.To validate that the page scrolling scenarios are being enabled in the application as necessary.</p>

<p>10.To validate that the navigation between relevant modules in the application are as per the requirement.</p>

<p>11.To validate that the truncation errors are absolutely to an affordable limit.</p>

<p>12.To validate that the user receives an appropriate error message like “Network error. Please try after some time” whenever there is any network error.</p>

<p>13.To validate that the installed application enables other applications to perform satisfactorily, and it does not eat into the memory of the other applications.</p>

<p>14.To validate that the application resumes at the last operation in case of a hard reboot or system crash.</p>

<p>15.To validate whether the installation of the application can be done smoothly provided the user has the necessary resources and it does not lead to any significant errors.</p>

<p>16.To validate that the application performs auto start facility according to the requirements.</p>

<p>17.To validate whether the application performs according to the requirement in all versions of Mobile that is 2g, 3g and 4g.</p>

<p>18.To perform regression testing to uncover new software bugs in existing areas of a system after changes have been made to them. Also rerun previously performed tests to determine that the program behavior has not changed due to the changes.</p>

<p>19.To validate whether the application provides an available user guide for those who are not familiar to the app</p>

<p><script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script><ins class="adsbygoogle" style="display:block" data-ad-client="ca-pub-5798698216356388" data-ad-slot="3378542759" data-ad-format="auto"></ins><script>(adsbygoogle = window.adsbygoogle || []).push({});</script></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mobile Testing : Guide to Performance Testing in Mobile App]]></title>
    <link href="http://www.tabaolan.com/blog/2014/08/21/mobile-testing-guide-to-performance-testing-in-mobile/"/>
    <updated>2014-08-21T05:40:47+01:00</updated>
    <id>http://www.tabaolan.com/blog/2014/08/21/mobile-testing-guide-to-performance-testing-in-mobile</id>
    <content type="html"><![CDATA[<h2>Performance testing</h2>

<p><script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script><ins class="adsbygoogle" style="display:block" data-ad-client="ca-pub-5798698216356388" data-ad-slot="9425076351" data-ad-format="auto"></ins><script>(adsbygoogle = window.adsbygoogle || []).push({});</script></p>

<p>This type of testing’s fundamental objective is to ensure that the application performs acceptably under certain performance requirements such as access by a huge number of users or the removal of a key infrastructure part like a database server.</p>

<p>The general test scenarios for performance testing in a Mobile application are:</p>

<p>1.To determine whether the application performs as per the requirement under different load conditions.</p>

<p>2.To determine whether the current network coverage is able to support the application at peak, average and minimum user levels.</p>

<p>3.To determine whether the existing client-server configuration setup provides the required optimum performance level.</p>

<p>4.To identify the various application and infrastructure bottlenecks which prevent the application to perform at the required acceptability levels.</p>

<p>5.To validate whether the response time of the application is as per as the requirements.</p>

<p>6.To evaluate product and/or hardware to determine if it can handle projected load volumes.</p>

<p>7.To evaluate whether the battery life can support the application to perform under projected load volumes.</p>

<p>8.To validate application performance when network is changed to WIFI from 2G/3G or vice versa.</p>

<p>9.To validate each of the required the CPU cycle is optimization</p>

<p>10.To validate that the battery consumption, memory leaks, resources like GPS, Camera performance is well within required guidelines.</p>

<p>11.To validate the application longevity whenever the user load is rigorous.</p>

<p>12.To validate the network performance while moving around with the device.</p>

<p><script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script><ins class="adsbygoogle" style="display:block" data-ad-client="ca-pub-5798698216356388" data-ad-slot="7145934352" data-ad-format="auto"></ins><script>(adsbygoogle = window.adsbygoogle || []).push({});</script></p>

<p>13.To validate the application performance when only intermittent phases of connectivity is required.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mobile Testing : Guide to Security Testing in Mobile App]]></title>
    <link href="http://www.tabaolan.com/blog/2014/08/21/mobile-testing-guide-to-security-testing-in-mobile/"/>
    <updated>2014-08-21T05:35:47+01:00</updated>
    <id>http://www.tabaolan.com/blog/2014/08/21/mobile-testing-guide-to-security-testing-in-mobile</id>
    <content type="html"><![CDATA[<h2>Security testing</h2>

<p><img src="/images/mb1.png"></p>

<p>The fundamental objective of security testing is to ensure that the application’s data and networking security requirements are met as per guidelines.</p>

<p>The following are the most crucial areas for checking the security of Mobile applications.</p>

<p>1.To validate that the application is able to withstand any brute force attack which is an automated process of trial and error used to guess a person’s username, password or credit-card number.</p>

<p>2.To validate whether an application is not permitting an attacker to access sensitive content or functionality without proper authentication.</p>

<p>3.To validate that the application has a strong password protection system and it does not permit an attacker to obtain, change or recover another user’s password.</p>

<p>4.To validate that the application does not suffer from insufficient session expiration.</p>

<p>5.To identify the dynamic dependencies and take measures to prevent any attacker for accessing these vulnerabilities.</p>

<p>6.To prevent from SQL injection related attacks.</p>

<p><script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script><ins class="adsbygoogle" style="display:block" data-ad-client="ca-pub-5798698216356388" data-ad-slot="9425076351" data-ad-format="auto"></ins><script>(adsbygoogle = window.adsbygoogle || []).push({});</script></p>

<p>7.To identify and recover from any unmanaged code scenarios.</p>

<p>8.To ensure whether the certificates are validated, does the application implement Certificate Pinning or not.</p>

<p>9.To protect the application and the network from the denial of service attacks.</p>

<p>10.To analyse the data storage and data validation requirements.</p>

<p>11.To enable the session management for preventing unauthorized users to access unsolicited information.</p>

<p>12.To check if any cryptography code is broken and ensure that it is repaired.</p>

<p>13.To validate whether the business logic implementation is secured and not vulnerable to any attack from outside.</p>

<p>14.To analyse file system interactions, determine any vulnerability and correct these problems.</p>

<p>15.To validate the protocol handlers for example trying to reconfigure the default landing page for the application using a malicious iframe.</p>

<p>16.To protect against malicious client side injections.</p>

<p>17.To protect against malicious runtime injections.</p>

<p>18.To investigate file caching and prevent any malicious possibilities from the same.</p>

<p>19.To prevent from insecure data storage in the keyboard cache of the applications.</p>

<p><script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script><ins class="adsbygoogle" style="display:block" data-ad-client="ca-pub-5798698216356388" data-ad-slot="7145934352" data-ad-format="auto"></ins><script>(adsbygoogle = window.adsbygoogle || []).push({});</script></p>

<p>20.To investigate cookies and preventing any malicious deeds from the cookies.</p>

<p>21.To provide regular audits for data protection analysis.</p>

<p>22.Investigate custom created files and preventing any malicious deeds from the custom created files.</p>

<p>23.To prevent from buffer overflows and memory corruption cases.</p>

<p>24.To analyse different data streams and preventing any vulnerabilities from these.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mobile Testing : Other Testing in Mobile App]]></title>
    <link href="http://www.tabaolan.com/blog/2014/08/21/mobile-testing-other-testing-in-mobile/"/>
    <updated>2014-08-21T05:30:47+01:00</updated>
    <id>http://www.tabaolan.com/blog/2014/08/21/mobile-testing-other-testing-in-mobile</id>
    <content type="html"><![CDATA[<h2>Usability testing</h2>

<p>The usability testing process of the Mobile application is performed to have a quick and easy step application with less functionality than a slow and difficult application with many features. The main objective is to ensure that we end up having an easy-to-use, intuitive and similar to industry-accepted interfaces which are widely used.</p>

<p>1.To ensure that the buttons should have the required size and be suitable to big fingers.</p>

<p>2.To ensure that the buttons are placed in the same section of the screen to avoid confusion to the end users.</p>

<p>3.To ensure that the icons are natural and consistent with the application.</p>

<p>4.To ensure that the buttons, which have the same function should also have the same color.</p>

<p>5.To ensure that the validation for the tapping zoom-in and zoom-out facilities should be enabled.</p>

<p>6.To ensure that the keyboard input can be minimized in an appropriate manner.</p>

<p>7.To ensure that the application provides a method for going back or undoing an action, on touching the wrong item, within an acceptable duration.</p>

<p>8.To ensure that the contextual menus are not overloaded because it has to be used quickly.</p>

<p>9.To ensure that the text is kept simple and clear to be visible to the users.</p>

<p>10.To ensure that the short sentences and paragraphs are readable to the end users.</p>

<p>11.To ensure that the font size is big enough to be readable and not too big or too small.</p>

<p>12.To validate the application prompts the user whenever the user starts downloading a large amount of data which may be not conducive for the application performance.</p>

<p>13.To validate that the closing of the application is performed from different states and verify if it re-opens in the same state.</p>

<p>14.To ensure that all strings are converted into appropriate languages whenever a language translation facility is available.</p>

<p>15.To ensure that the application items are always synchronized according to the user actions.</p>

<p>16.To ensure that the end user is provided with a user manual which helps the end user to understand and operate the application who may be not familiar with the application’s proceedings</p>

<p>Usability testing is normally performed by manual users since only human beings can understand the sensibility and comfort ability of the other users.</p>

<h2>Compatibility testing</h2>

<p><script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script><ins class="adsbygoogle" style="display:block" data-ad-client="ca-pub-5798698216356388" data-ad-slot="9425076351" data-ad-format="auto"></ins><script>(adsbygoogle = window.adsbygoogle || []).push({});</script></p>

<p>Compatibility testing on mobile devices is performed to ensure that since mobile devices have different size, resolution, screen, version and hardware so the application should be tested across all the devices to ensure that the application works as desired.</p>

<p>The following are the most prominent areas for compatibility testing.</p>

<p>1.To validate that the user Interface of the application is as per the screen size of the device, no text/control is partially invisible or inaccessible.</p>

<p>2.To ensure that the text is readable for all users for the application.</p>

<p>3.To ensure that the call/alarm functionality is enabled whenever the application is running. The application is minimized or suspended on the event of a call and then whenever the call stops the application is resumed.</p>

<h2>Recoverability Testing</h2>

<p><script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script><ins class="adsbygoogle" style="display:block" data-ad-client="ca-pub-5798698216356388" data-ad-slot="3378542759" data-ad-format="auto"></ins><script>(adsbygoogle = window.adsbygoogle || []).push({});</script></p>

<p>1.Crash recovery and transaction interruptions</p>

<p>2.Validation of the effective application recovery situation post unexpected interruption/crash scenarios.</p>

<p>3.Verification of how the application handles a transaction during a power failure (i.e. Battery dies or a sudden manual shutdown of the device)</p>

<p>4.The validation of the process where the connection is suspended, the system needs to re-establish for recovering the data directly affected by the suspended connection.</p>

<h2>Other Important Checks</h2>

<p><script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script><ins class="adsbygoogle" style="display:block" data-ad-client="ca-pub-5798698216356388" data-ad-slot="9425076351" data-ad-format="auto"></ins><script>(adsbygoogle = window.adsbygoogle || []).push({});</script></p>

<p>1.Installation testing (whether the application can be installed in a reasonable amount of time and with required criterion)</p>

<p>2.Uninstallation testing (whether the application can be uninstalled in a reasonable amount of time and with required criterion)</p>

<p>3.Network test cases (validation of whether the network is performing under required load or not, whether the network is able to support all the necessary applications during the testing procedures).</p>

<p>4.Check Unmapped keys</p>

<p>5.Check application splash screen</p>

<p>6.Continued keypad entry during interrupts and other times like network issues</p>

<p>7.Methods which deal with exiting the application</p>

<p>8.Charger effect while an application is running in the background</p>

<p>9.Low battery and high performance demand</p>

<p>10.Removal of battery while an application is being performed</p>

<p>11.Consumption of battery by application</p>

<p>12.Check Application side effects</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mobile testing : Setup Selendroid and create first test script of android application]]></title>
    <link href="http://www.tabaolan.com/blog/2014/08/21/mobile-testing-seup-selendroid-and-create-first-test-script-of-android-application/"/>
    <updated>2014-08-21T05:30:45+01:00</updated>
    <id>http://www.tabaolan.com/blog/2014/08/21/mobile-testing-seup-selendroid-and-create-first-test-script-of-android-application</id>
    <content type="html"><![CDATA[<h2>Setup Selendroid and create first test script of android application</h2>

<h3>About Selendroid :</h3>

<p>Selendroid is an open source automation framework which drives of UI of android native, hybrid and mobile web application.</p>

<p>It supports both emulator and real device. It uses Json Wire Protocol to run webdriver test scripts on device.</p>

<p>It can be integrated with selenium grid for parallel execution on multiple nodes.</p>

<p>No need any modification in application and not need source code to automate application.</p>

<p><script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script><ins class="adsbygoogle" style="display:block" data-ad-client="ca-pub-5798698216356388" data-ad-slot="3378542759" data-ad-format="auto"></ins><script>(adsbygoogle = window.adsbygoogle || []).push({});</script></p>

<h3>Prerequisites:</h3>

<p>1.JDK should be installed and java home path setup in your machine.</p>

<p>2.Android SDK should be installed on your machine and android path should be setup in your machine</p>

<p>3.Download Selendroid from link: <a href="http://selendroid.io/">Click here</a></p>

<p>4.Selenium jar file from : <a href="http://docs.seleniumhq.org/download/">Click here</a></p>

<p>5.Eclipse.</p>

<p>6.Create new Emulator or attached real devices with you machine.</p>

<h3>Run Server:</h3>

<p>Open command prompt and go to downloaded Selendroid jar file and run below command</p>

<p><script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script><ins class="adsbygoogle" style="display:block" data-ad-client="ca-pub-5798698216356388" data-ad-slot="9425076351" data-ad-format="auto"></ins><script>(adsbygoogle = window.adsbygoogle || []).push({});</script>
<code>
java -jar selendroid-standalone-0.9.0-with-dependencies.jar -aut resigned-selendroid-test-app-0.9.0.apk
</code></p>

<p>Where selendroid-standalone-0.9.0-with-dependencies.jar is downloaded selendroid jar file and resigned-selendroid-test-app-0.9.0.apk application apk file name.</p>

<p>You can download this sample application from link: (Download)[<a href="http://selendroid.io/">http://selendroid.io/</a>]</p>

<p><img src="/images/mb13.jpg"></p>

<h3>Check server status</h3>

<p>launch browser and open url [<a href="http://localhost:4444/wd/hub/status">http://localhost:4444/wd/hub/status</a>] you should see your url like below screen:</p>

<p><img src="/images/mb14.jpg"></p>

<h3>Step to create test script:</h3>

<p>1.Create a java project in eclipse.</p>

<p>2.Add selenium and selendroid jar file in eclipse environments:</p>

<p>3.Create package “com.test“ and add java file “SelendroidTest.java” with below code:</p>

<p><script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script><ins class="adsbygoogle" style="display:block" data-ad-client="ca-pub-5798698216356388" data-ad-slot="7145934352" data-ad-format="auto"></ins><script>(adsbygoogle = window.adsbygoogle || []).push({});</script>
```
package com.test;</p>

<p>import io.selendroid.SelendroidCapabilities;
import io.selendroid.SelendroidConfiguration;
import io.selendroid.SelendroidDriver;
import io.selendroid.SelendroidLauncher;
import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.testng.Assert;
import org.testng.annotations.AfterSuite;
import org.testng.annotations.BeforeSuite;
import org.testng.annotations.Test;</p>

<p>public class SelendroidTest {</p>

<p> private WebDriver driver ;</p>

<p> @BeforeSuite
 public void setUp() throws Exception
 {</p>

<pre><code>  SelendroidConfiguration config = new SelendroidConfiguration();
 config.addSupportedApp("selendroid-test-app-0.9.0.apk");
 SelendroidLauncher selendroidServer = new SelendroidLauncher(config);
 selendroidServer.lauchSelendroid();

 SelendroidCapabilities caps = new SelendroidCapabilities("io.selendroid.testapp:0.9.0");
 driver = new SelendroidDriver(caps);
</code></pre>

<p> }</p>

<p> @Test
 public void selendroidTest() throws Exception
 {<br/>
  WebElement inputField = driver.findElement(By.id(&ldquo;my_text_field&rdquo;));
  Assert.assertEquals(&ldquo;true&rdquo;, inputField.getAttribute(&ldquo;enabled&rdquo;));
  inputField.sendKeys(&ldquo;Selendroid&rdquo;);</p>

<p>  Assert.assertEquals(&ldquo;Selendroid&rdquo;, inputField.getText());</p>

<p>  //click EN butoon
  WebElement button = driver.findElement(By.id(&ldquo;buttonTest&rdquo;));<br/>
  button.click();</p>

<p>  //click accept button
  button = driver.findElement(By.id(&ldquo;button2&rdquo;));<br/>
  button.click();</p>

<p>  Thread.sleep(5000);
  //click on registration button
  button = driver.findElement(By.id(&ldquo;startUserRegistration&rdquo;));<br/>
  button.click();</p>

<p>  Thread.sleep(10000);
  // fill registration form data
  WebElement element = driver.findElement(By.id(&ldquo;label_username&rdquo;));
  String text = element.getText();
  System.out.println(text);
  element = driver.findElement(By.id(&ldquo;inputUsername&rdquo;));
  element.sendKeys(&ldquo;bob&rdquo;);</p>

<p>  element = driver.findElement(By.id(&ldquo;inputEmail&rdquo;));
  element.sendKeys(&ldquo;<a href="&#109;&#97;&#105;&#108;&#116;&#x6f;&#x3a;&#x74;&#101;&#x73;&#116;&#64;&#103;&#x6d;&#x61;&#x69;&#108;&#46;&#x63;&#111;&#109;">&#x74;&#x65;&#115;&#x74;&#64;&#x67;&#x6d;&#x61;&#105;&#108;&#x2e;&#x63;&#x6f;&#x6d;</a>&rdquo;);</p>

<p>  element = driver.findElement(By.id(&ldquo;inputPassword&rdquo;));
  element.clear();
  element.sendKeys(&ldquo;test1233&rdquo;);</p>

<p>  element = driver.findElement(By.id(&ldquo;inputName&rdquo;));
  element.clear();
  element.sendKeys(&ldquo;My Name &rdquo;);</p>

<p>  element = driver.findElement(By.id(&ldquo;input_preferedProgrammingLanguage&rdquo;));
  element.click();</p>

<p>  element = driver.findElement(By.id(&ldquo;text1&rdquo;));
  element.click();</p>

<p>  element = driver.findElement(By.id(&ldquo;input_adds&rdquo;));
  element.click();</p>

<p>  element = driver.findElement(By.id(&ldquo;btnRegisterUser&rdquo;));
  element.click();</p>

<p>  element = driver.findElement(By.id(&ldquo;buttonRegisterUser&rdquo;));
  element.click();<br/>
 }</p>

<p> @AfterSuite
 public void tearDown(){</p>

<pre><code>    driver.quit();
</code></pre>

<p> }
}
```</p>
]]></content>
  </entry>
  
</feed>
