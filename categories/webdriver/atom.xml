<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Webdriver | Selenium Tutorial]]></title>
  <link href="http://www.tabaolan.com/categories/webdriver/atom.xml" rel="self"/>
  <link href="http://www.tabaolan.com/"/>
  <updated>2014-09-19T10:27:38+07:00</updated>
  <id>http://www.tabaolan.com/</id>
  <author>
    <name><![CDATA[Ta Bao Lan]]></name>
    <email><![CDATA[tabaolan1987@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Webdriver : Introduction]]></title>
    <link href="http://www.tabaolan.com/blog/2014/08/07/webdriver-introduction/"/>
    <updated>2014-08-07T15:26:35+07:00</updated>
    <id>http://www.tabaolan.com/blog/2014/08/07/webdriver-introduction</id>
    <content type="html"><![CDATA[<h2>Selenium Introduction</h2>

<h3>About Selenium</h3>

<p>Selenium is a software testing framework for the web that facilitates the automation of browsers. The Selenium project produces various tools for automation testing such as Selenium IDE, Selenium Remote Control (RC), Selenium Grid and Selenium 2.0 &amp; WebDriver. Learning all the tools will give you many different options for approaching different automation problems. The entire suits of tools result in a rich set of testing functions specially geared to the needs of testing of web application of all types.</p>

<!--more-->


<h3>Why Selenium</h3>

<ul>
<li>Selenium is an open source tool with Corporate backing.</li>
<li>The tests can then be run against most modern web browsers.</li>
<li>Selenium deploys on Windows, Linux, and Macintosh platforms.</li>
<li>It allows recording, editing, and debugging tests.</li>
<li>Recorded tests can be exported in most language e.g. html, Java, .net, perl, ruby etc.</li>
<li>Selenium has the support of some of the largest browser vendors who have taken (or are taking) steps to make Selenium a native part of their browser.</li>
</ul>


<h3>Selenium WebDriver</h3>

<p>The primary new feature in Selenium 2.0 is the integration of the WebDriver API. WebDriver is designed to provide a simpler, more concise programming interface in addition to addressing some limitations in the Selenium-RC API. It enables you to use a programming language to write test scripts in different programming languages like html, Java, .net , perl, ruby and which enables you to use conditional operations, looping and other programming concepts which makes you test script robust. Selenium-WebDriver was developed to better support dynamic web pages where elements of a page may change without the page itself being reloaded. WebDriver’s goal is to supply a well-designed object-oriented API that provides improved support for modern advanced web-app testing problems.</p>

<h3>WebDriver Vs Selenium RC</h3>

<p>1) Architecture</p>

<h4>WebDriver&rsquo;s architecture is simpler than Selenium RC&rsquo;s.</h4>

<p>It controls the browser from the OS level</p>

<p>All you need are your programming language&rsquo;s IDE (which contains your Selenium commands) and a browser.</p>

<p><img src="/images/compare-1.jpg">
<script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script><ins class="adsbygoogle" style="display:block" data-ad-client="ca-pub-5798698216356388" data-ad-slot="3378542759" data-ad-format="auto"></ins><script>(adsbygoogle = window.adsbygoogle || []).push({});</script></p>

<h4>Selenium RC&rsquo;s architecture is way more complicated.</h4>

<p>You first need to launch a separate application called Selenium Remote Control (RC) Server before you can start testing</p>

<p>The Selenium RC Server acts as a &ldquo;middleman&rdquo; between your Selenium commands and your browser</p>

<p>When you begin testing, Selenium RC Server &ldquo;injects&rdquo; a Javascript program called Selenium Core into the browser.</p>

<p>Once injected, Selenium Core will start receiving instructions relayed by the RC Server from your test program.</p>

<p>When the instructions are received, Selenium Core will execute them as Javascript commands.</p>

<p>The browser will obey the instructions of Selenium Core, and will relay its response to the RC Server.</p>

<p>The RC Server will receive the response of the browser and then display the results to you.</p>

<p>RC Server will fetch the next instruction from your test script to repeat the whole cycle.</p>

<p><img src="/images/compare-2.jpg">
<script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script><ins class="adsbygoogle" style="display:block" data-ad-client="ca-pub-5798698216356388" data-ad-slot="9425076351" data-ad-format="auto"></ins><script>(adsbygoogle = window.adsbygoogle || []).push({});</script></p>

<p>2) Speed</p>

<p>WebDriver is faster than Selenium RC since it  speaks directly to the browser uses the browser&rsquo;s own engine to control it.</p>

<p>Selenium RC is slower  sinceit uses a Javascript program called Selenium Core.This Selenium Core is the one that directly controls the browser, not you.</p>

<p>3) Real-life Interaction</p>

<p>WebDriver interacts with page elements in a more realistic way. For example, if you have a disabled text box on a page you were testing, WebDriver really cannot enter any value in it just as how a real person cannot.</p>

<p>Selenium Core, just like other Javascript codes, can access disabled elements .In the past, Selenium testers complain that Selenium Core was able to enter values to a disabled text box in their tests.Differences in API.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Webdriver : Element Commands]]></title>
    <link href="http://www.tabaolan.com/blog/2014/08/07/webdriver-element-commands/"/>
    <updated>2014-08-07T15:20:35+07:00</updated>
    <id>http://www.tabaolan.com/blog/2014/08/07/webdriver-element-commands</id>
    <content type="html"><![CDATA[<h2>Selenium WebDriver WebElement Commands</h2>

<p>The next thing you like to do is to interact with a web page. You need to locate an element first on the web page before interacting with it and locating elements can be done on the WebDriver instance itself or on a WebElement. Webdriver gives us “Find Element” and “Find Elements” method to locate elements on the web page.</p>

<!--more-->


<h3>Find Element &amp; Find Elements Method</h3>

<p>The difference between “Find Element” and “Find Elements” method is the first returns a WebElement object otherwise it throws an exception and the latter returns a list of WebElements, it can return an empty list if no DOM elements match the query. The “Find” methods take a locator or query object called “By”. “By” strategies are listed below.</p>

<h4>By ID</h4>

<p>With this strategy, the first element with the id attribute value matching the location will be returned. If no element has a matching id attribute, a NoSuchElementException will be raised. This is the most efficient and preferred way to locate an element, as most of the times IDs are unique. But in some cases UI developers make it having non-unique ids on a page or auto-generating the id, in both cases it should be avoided.</p>

<p>Example: If an element is given like this:</p>

<p><script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script><ins class="adsbygoogle" style="display:block" data-ad-client="ca-pub-5798698216356388" data-ad-slot="3378542759" data-ad-format="auto"></ins><script>(adsbygoogle = window.adsbygoogle || []).push({});</script></p>

<p>```</p>

<p><!-- html code
<input id="Username"></input>
&mdash;!>
//java code to find the input with id is &ldquo;Username&rdquo;
WebElement element = driver.findElement(By.id(&ldquo;Username&rdquo;));</p>

<p>```</p>

<h4>By Name</h4>

<p>This is also an efficient way to locate an element but again the problem is same as with ID that UI developer make it having non-unique names on a page or auto-generating the names. With this strategy, the first element with the name attribute value matching the location will be returned. If no element has a matching name attribute, a NoSuchElementException will be raised.</p>

<p>Example: If an element is given like this:</p>

<p>```
<!-- html code
<input name="Username"></input>
&mdash;!>
//java code to find the input with name is &ldquo;Username&rdquo;
WebElement element = driver.findElement(By.name(&ldquo;Username&rdquo;));</p>

<p>```</p>

<h4>By Class Name</h4>

<p>With this you can find elements based on the value of the “class” attribute. If an element has many classes then this will match against each of them. A class can contain many elements.</p>

<p>Example: If an element is given like this:</p>

<p><script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script><ins class="adsbygoogle" style="display:block" data-ad-client="ca-pub-5798698216356388" data-ad-slot="9425076351" data-ad-format="auto"></ins><script>(adsbygoogle = window.adsbygoogle || []).push({});</script>
```
<!-- html code
<input class="Username"></input>
&mdash;!>
//java code to find the input with className is &ldquo;Username&rdquo;
WebElement element = driver.findElement(By.className(&ldquo;Username&rdquo;));</p>

<p>```</p>

<h4>By Tag Name</h4>

<p>With this you can find elements by their tag names.</p>

<p>Example: If an element is given like this:</p>

<p><script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script><ins class="adsbygoogle" style="display:block" data-ad-client="ca-pub-5798698216356388" data-ad-slot="3378542759" data-ad-format="auto"></ins><script>(adsbygoogle = window.adsbygoogle || []).push({});</script>
```
//html code
<a href="link.html">Name of the Link</a></p>

<p>// java code to find
WebElement element=driver.findElement(By.linkText(&ldquo;Name of the Link&rdquo;));</p>

<p>```</p>

<p>By Partial Link Text</p>

<p>With this you can find elements of “a” tags(Link) with the partial link names. Use this when you know link text used within an anchor tag.</p>

<p>Example: If an element is given like this</p>

<p><code>
//html code
&lt;a href="link.html"&gt;Name of the Link&lt;/a&gt;
// java code to find
WebElement element=driver.findElement(By.linkText("Name of"));
</code></p>

<p>or</p>

<p><code>
WebElement element=driver.findElement(By.linkText("the Link"));
</code></p>

<h3>Practice Exercise 1</h3>

<p>1) Launch new Browser</p>

<p>2) Open URL <a href="https://www.facebook.com">https://www.facebook.com</a></p>

<p>3) Type Name &amp; password</p>

<p>4) Click on SignIn button</p>

<h4>Solution</h4>

<p><script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script><ins class="adsbygoogle" style="display:block" data-ad-client="ca-pub-5798698216356388" data-ad-slot="7145934352" data-ad-format="auto"></ins><script>(adsbygoogle = window.adsbygoogle || []).push({});</script>
```
package automationFramework;</p>

<p>import java.util.concurrent.TimeUnit;</p>

<p>import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.firefox.FirefoxDriver;</p>

<p>public class PracticeWebElementCommands {</p>

<pre><code>public static WebDriver driver;
public static void main(String[] args) {
     // Create a new instance of the Firefox driver
    driver = new FirefoxDriver();

    // Put an Implicit wait, this means that any search for elements on the page could take the time the implicit wait is set for before throwing exception
    driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);

    // Launch the ToolsQA Website
    driver.get("https://www.facebook.com");

    // Type email      
    driver.findElement(By.id("emaill")).sendKeys("youremail"); 

    //Type passwork
    driver.findElement(By.name("pass")).sendKeys("yourpassword");

    // Click on SignIn
    driver.findElement(By.Xpath("//form[@id='login_form']/table/tbody/tr[2]/td[3]/label/input")).click();
    }
}
</code></pre>

<p>```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Webdriver : Browser Commands]]></title>
    <link href="http://www.tabaolan.com/blog/2014/08/07/webdriver-browser-commands/"/>
    <updated>2014-08-07T15:15:35+07:00</updated>
    <id>http://www.tabaolan.com/blog/2014/08/07/webdriver-browser-commands</id>
    <content type="html"><![CDATA[<h2>Selenium WebDriver Browser Commands</h2>

<p>The very first thing you like to do with Selenium is to opening and closing a new browser. Below are the numbers of commands you can apply on the Selenium opened browser.</p>

<!--more-->


<h3>1)Get Command</h3>

<p>Purpose: This command is use to open a new web page in the current browser.</p>

<p>Command: driver.get(URL);</p>

<p>Parameters: url – The URL to load. It is best to use a fully qualified URL.</p>

<p><code>
driver.get("wwww.google.com");
</code></p>

<h3>2)Get Title Command</h3>

<p>Purpose: This command is use to get the title of the current page.</p>

<p><code>
driver.getTitle();
</code></p>

<h3>3)Get Current URL Command</h3>

<p>Purpose: This command is use to get the URL of the page currently loaded in the browser.</p>

<p><code>
driver.getCurrentUrl();
</code></p>

<h3>4)Get Page Source Command</h3>

<p><script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script><ins class="adsbygoogle" style="display:block" data-ad-client="ca-pub-5798698216356388" data-ad-slot="3378542759" data-ad-format="auto"></ins><script>(adsbygoogle = window.adsbygoogle || []).push({});</script></p>

<p>Purpose: This command is use to get the source of the last loaded page.</p>

<p><code>
driver.getPageSource();
</code></p>

<h3>5)Close Command</h3>

<p>Purpose: This command is use to close the current window of the browser, if it’s the last window it will close the browser.</p>

<p><code>
driver.close();
</code></p>

<h3>6)Quit Command</h3>

<p>Purpose: This command is use to quit the browser and all the opened windows in the browser.</p>

<p><code>
driver.quit();
</code></p>

<h3>7)Refresh Command</h3>

<p>Purpose: There are some commands is use to refresh the current browser.</p>

<p><script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script><ins class="adsbygoogle" style="display:block" data-ad-client="ca-pub-5798698216356388" data-ad-slot="9425076351" data-ad-format="auto"></ins><script>(adsbygoogle = window.adsbygoogle || []).push({});</script>
<code>
driver.navigate().refresh();
driver.get(driver.getCurrentUrl());
driver.navigate().to(driver.getCurrentUrl());
driver.findElement(By.name("s")).sendKeys("\uE035");
</code></p>

<h2>Simple Practice Exercise</h2>

<p>1) Launch a new Firefox browser.</p>

<p>2) Open daringfireball.net</p>

<p>3) Get Page Title name and Title length</p>

<p>4) Print Page Title and Title length on the Eclipse Console.</p>

<p>5) Get Page URL and URL length</p>

<p>6) Print URL and URL length on the Eclipse Console.</p>

<p>7) Refresh current page</p>

<p>8) Get Page Source (HTML Source code) and Page Source length</p>

<p>9) Print Page Source and length on Eclipse Console.</p>

<p>10) Close the Browser.</p>

<h3>Solution</h3>

<h4>1) Create class &lsquo;PracticeBrowserCommands&rsquo; and copy code below paste to your class and Run this class.</h4>

<p><script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script><ins class="adsbygoogle" style="display:block" data-ad-client="ca-pub-5798698216356388" data-ad-slot="7145934352" data-ad-format="auto"></ins><script>(adsbygoogle = window.adsbygoogle || []).push({});</script>
```
package automationFramework;
import java.util.concurrent.TimeUnit;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.firefox.FirefoxDriver;</p>

<p>public class PracticeBrowserCommands {</p>

<pre><code>private static WebDriver driver = null;

public static void main(String[] args) throws InterruptedException {

     // Create a new instance of the Firefox driver
    driver = new FirefoxDriver();

    //Put a Implicit wait, this means that any search for elements on the page could take the time the implicit wait is set for before throwing exception
    driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);

    //Launch the markdown syntax
    driver.get("http://daringfireball.net/");

    // Storing Title name in String variable
    String sTitle = driver.getTitle();
    // Storing Title length in Int variable
    int iTitleLength = driver.getTitle().length();
    // Printing Title name on Console
    System.out.println(sTitle);
    // Printing Title length on console
    System.out.println(iTitleLength);

    // Storing URL in String variable
    sTitle = driver.getCurrentUrl();
    // Storing URL length in Int variable
    iTitleLength = driver.getCurrentUrl().length();
    // Printing URL on Console
    System.out.println(sTitle);
    // Printing URL length on console
    System.out.println(iTitleLength);

    // Refreshing current page
    driver.get(driver.getCurrentUrl());  

    // Storing Page Source in String variable
    String sPageSource = driver.getPageSource();
    // Storing Page Source length in Int variable
    int iPageSourceLength = driver.getPageSource().length();
    // Printing Page Source on console
    System.out.println(sPageSource);
    // Printing Page SOurce length on console
    System.out.println(iPageSourceLength);

    //Closing browser
    driver.close();
}
</code></pre>

<p>}
```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Webdriver : Browser Navigation Commands]]></title>
    <link href="http://www.tabaolan.com/blog/2014/08/07/webdriver-browser-navigation-commands/"/>
    <updated>2014-08-07T15:10:35+07:00</updated>
    <id>http://www.tabaolan.com/blog/2014/08/07/webdriver-browser-navigation-commands</id>
    <content type="html"><![CDATA[<h2>WebDriver Browser Navigation Commands</h2>

<p>The navigate interface exposes the ability to move backwards and forwards in your browser’s history but navigate().to() and get() do exactly the same thing. One’s just a lot easier to type than the other.</p>

<!--more-->


<h3>To Command</h3>

<p>Purpose : This command is use to navigate on specific page or URL in between the  test Command : driver.navigate().to(URL); Parameters : url – The URL to load. It is best to use a fully qualified URL.</p>

<p><code>
driver.navigate().to("http://www.gooogle.com");
</code></p>

<h3>Forward Command</h3>

<p>Purpose : This command is use to go on to next page like browser’s forward button.</p>

<p><code>
driver.navigate().forward();
</code></p>

<h3>Back Command</h3>

<p>Purpose : This command is use to go back to previous page like browser’s back button.</p>

<p><script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script><ins class="adsbygoogle" style="display:block" data-ad-client="ca-pub-5798698216356388" data-ad-slot="3378542759" data-ad-format="auto"></ins><script>(adsbygoogle = window.adsbygoogle || []).push({});</script>
<code>
driver.navigate().back();
</code></p>

<h3>Practice Exercise</h3>

<p>1) Launch new Browser</p>

<p>2) Open Selenium docs website</p>

<p>3) Click on About link ( On top navigation)</p>

<p>4) Come back to Home page (Use ‘Back’ command)</p>

<p>5) Again go back to About page (This time use ‘Forward’ command)</p>

<p>6) Again come back to Home page (This time use ‘To’ command)</p>

<p>7) Refresh the Browser (Use ‘Refresh’ command)</p>

<p>8) Close the Browser</p>

<h4>Solution</h4>

<p><script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script><ins class="adsbygoogle" style="display:block" data-ad-client="ca-pub-5798698216356388" data-ad-slot="9425076351" data-ad-format="auto"></ins><script>(adsbygoogle = window.adsbygoogle || []).push({});</script>
```
package automationFramework;</p>

<p>import java.util.concurrent.TimeUnit;</p>

<p>import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.firefox.FirefoxDriver;</p>

<p>public class PracticeNavigationCommands {</p>

<pre><code>private static WebDriver driver = null;
public static void main(String[] args) {

    // Create a new instance of the Firefox driver
    driver = new FirefoxDriver();

    // Open Selenium website
    driver.get("http://docs.seleniumhq.org/");

    // Put an Implicit wait on driver
    driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);

    // Click on About link
    driver.findElement(By.Xpath("//a[contains(@href, '/about/')]")).click();

    // Go back to Home Page
    driver.navigate().back();

    // Go forward to About page
    driver.navigate().forward();

    // Go back to Home page
    driver.navigate().to("http://docs.seleniumhq.org/");

    // Refresh browser
    driver.navigate().refresh();

    // Close browser
    driver.close();
}
</code></pre>

<p>}</p>

<p>```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Webdriver : Switch Window Commands]]></title>
    <link href="http://www.tabaolan.com/blog/2014/08/07/webdriver-switch-window-commands/"/>
    <updated>2014-08-07T15:05:35+07:00</updated>
    <id>http://www.tabaolan.com/blog/2014/08/07/webdriver-switch-window-commands</id>
    <content type="html"><![CDATA[<h2>WebDriver Switch Window Commands</h2>

<p>Some web applications have many frames or multiple windows. Selenium WebDriver assigns an alphanumeric id to each window as soon as the WebDriver object is instantiated. This unique alphanumeric id is called window handle. Selenium uses this unique id to switch control among several windows. In simple terms, each unique window has a unique ID, so that Selenium can differentiate when it is switching controls from one window to the other.</p>

<!--more-->


<h3>GetWindowHandle Command</h3>

<p>Purpose: To get the window handle of the current window.</p>

<p><script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script><ins class="adsbygoogle" style="display:block" data-ad-client="ca-pub-5798698216356388" data-ad-slot="9425076351" data-ad-format="auto"></ins><script>(adsbygoogle = window.adsbygoogle || []).push({});</script>
<code>
String  handle= driver.getWindowHandle();//Return a string of alphanumeric window handle
</code></p>

<h3>GetWindowHandles Command</h3>

<p>Purpose: To get the window handle of all the current windows.</p>

<p><code>
Set&lt;String&gt; handle= driver.getWindowHandles();//Return a set of window handle
</code></p>

<h3>SwitchTo Window Command</h3>

<p>Purpose: WebDriver supports moving between named windows using the “switchTo” method.</p>

<p><script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script><ins class="adsbygoogle" style="display:block" data-ad-client="ca-pub-5798698216356388" data-ad-slot="9425076351" data-ad-format="auto"></ins><script>(adsbygoogle = window.adsbygoogle || []).push({});</script>
```
driver.switchTo().window(&ldquo;windowName&rdquo;);</p>

<p>```
<script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script><ins class="adsbygoogle" style="display:block" data-ad-client="ca-pub-5798698216356388" data-ad-slot="3378542759" data-ad-format="auto"></ins><script>(adsbygoogle = window.adsbygoogle || []).push({});</script></p>

<p>Alternatively, you can pass a “window handle” to the “switchTo().window()” method. Knowing this, it’s possible to iterate over every open window like so:</p>

<p><script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script><ins class="adsbygoogle" style="display:block" data-ad-client="ca-pub-5798698216356388" data-ad-slot="9425076351" data-ad-format="auto"></ins><script>(adsbygoogle = window.adsbygoogle || []).push({});</script>
```
for (String handle : driver.getWindowHandles()) {</p>

<pre><code>driver.switchTo().window(handle);
</code></pre>

<p>}</p>

<p>```</p>

<p>Switching between windows with Iterators:</p>

<p><script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script><ins class="adsbygoogle" style="display:block" data-ad-client="ca-pub-5798698216356388" data-ad-slot="9425076351" data-ad-format="auto"></ins><script>(adsbygoogle = window.adsbygoogle || []).push({});</script>
```</p>

<p>driver.findElement(By.id(“id of the link which opens new window”)).click();
 //wait till two windows are not opened
 waitForNumberofWindowsToEqual(2);//this method is for wait</p>

<p> Set handles = driver.getWindowHandles();
 firstWinHandle = driver.getWindowHandle(); handles.remove(firstWinHandle);
 String winHandle=handles.iterator().next();
 if (winHandle!=firstWinHandle){
 //To retrieve the handle of second window, extracting the handle which does not match to first window handle
 secondWinHandle=winHandle; //Storing handle of second window handle</p>

<p>//Switch control to new window
 driver.switchTo().window(secondWinHandle);</p>

<p>```</p>

<h3>SwitchTo Frame Command</h3>

<p>Purpose: WebDriver supports moving between named frames using the “switchTo” method.</p>

<p><code>
driver.switchTo().frame("frameName");
</code></p>

<h3>SwitchTo PopUp Command</h3>

<p>Purpose: WebDriver supports moving between named PopUps using the “switchTo” method. After you’ve triggered an action that opens a popup, you can access the alert and it will return the currently open alert object. With this object you can now accept, dismiss, read its contents or even type into a prompt. This interface works equally well on alerts, confirms, and prompts.</p>

<p><code>
Alert alert = driver.switchTo().alert();
</code>
<script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script><ins class="adsbygoogle" style="display:block" data-ad-client="ca-pub-5798698216356388" data-ad-slot="7145934352" data-ad-format="auto"></ins><script>(adsbygoogle = window.adsbygoogle || []).push({});</script></p>

<h3>Practice Exercise 1</h3>

<p>1) Launch new Browser</p>

<p>2) Open URL &ldquo;<a href="http://docs.seleniumhq.org/download/">http://docs.seleniumhq.org/download/</a>&rdquo;</p>

<p>3) Get Window name (Use GetWindowHandle command)</p>

<p><script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script><ins class="adsbygoogle" style="display:block" data-ad-client="ca-pub-5798698216356388" data-ad-slot="9425076351" data-ad-format="auto"></ins><script>(adsbygoogle = window.adsbygoogle || []).push({});</script>
```
package practiceTestCases;
import java.util.Set;
import java.util.concurrent.TimeUnit;</p>

<p>import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.firefox.FirefoxDriver;</p>

<p>public class PracticeSwitchWindow {</p>

<pre><code>    public static WebDriver driver;
    public static void main(String[] args) {

        // Create a new instance of the Firefox driver
        driver = new FirefoxDriver();

        // Put an Implicit wait, this means that any search for elements on the page could take the time the implicit wait is set for before throwing exception
        driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);

        // Launch the URL
        driver.get("http://docs.seleniumhq.org/download/");

        // Store and Print the name of the First window on the console
        String handle= driver.getWindowHandle();
        System.out.println(handle);

        // Close Original window
        driver.quit();

}
</code></pre>

<p>}
```</p>
]]></content>
  </entry>
  
</feed>
